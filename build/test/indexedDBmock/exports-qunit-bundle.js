(function() {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw ((a.code = "MODULE_NOT_FOUND"), a);
                }
                var p = (n[i] = { exports: {} });
                e[i][0].call(
                    p.exports,
                    function(r) {
                        var n = e[i][1][r];
                        return o(n || r);
                    },
                    p,
                    p.exports,
                    r,
                    e,
                    n,
                    t,
                );
            }
            return n[i].exports;
        }
        for (
            var u = "function" == typeof require && require, i = 0;
            i < t.length;
            i++
        )
            o(t[i]);
        return o;
    }
    return r;
})()(
    {
        1: [
            function(require, module, exports) {
                "use strict";
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBKeyRange_1 = require("./FDBKeyRange");
                var FDBObjectStore_1 = require("./FDBObjectStore");
                var cmp_1 = require("./lib/cmp");
                var errors_1 = require("./lib/errors");
                var extractKey_1 = require("./lib/extractKey");
                var structuredClone_1 = require("./lib/structuredClone");
                var valueToKey_1 = require("./lib/valueToKey");
                var getEffectiveObjectStore = function(cursor) {
                    if (cursor.source instanceof FDBObjectStore_1.default) {
                        return cursor.source;
                    }
                    return cursor.source.objectStore;
                };
                // This takes a key range, a list of lower bounds, and a list of upper bounds and combines them all into a single key
                // range. It does not handle gt/gte distinctions, because it doesn't really matter much anyway, since for next/prev
                // cursor iteration it'd also have to look at values to be precise, which would be complicated. This should get us 99%
                // of the way there.
                var makeKeyRange = function(range, lowers, uppers) {
                    var e_1, _a, e_2, _b;
                    // Start with bounds from range
                    var lower = range !== undefined ? range.lower : undefined;
                    var upper = range !== undefined ? range.upper : undefined;
                    try {
                        // Augment with values from lowers and uppers
                        for (
                            var lowers_1 = __values(lowers),
                                lowers_1_1 = lowers_1.next();
                            !lowers_1_1.done;
                            lowers_1_1 = lowers_1.next()
                        ) {
                            var lowerTemp = lowers_1_1.value;
                            if (lowerTemp === undefined) {
                                continue;
                            }
                            if (
                                lower === undefined ||
                                cmp_1.default(lower, lowerTemp) === 1
                            ) {
                                lower = lowerTemp;
                            }
                        }
                    } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    } finally {
                        try {
                            if (
                                lowers_1_1 &&
                                !lowers_1_1.done &&
                                (_a = lowers_1.return)
                            )
                                _a.call(lowers_1);
                        } finally {
                            if (e_1) throw e_1.error;
                        }
                    }
                    try {
                        for (
                            var uppers_1 = __values(uppers),
                                uppers_1_1 = uppers_1.next();
                            !uppers_1_1.done;
                            uppers_1_1 = uppers_1.next()
                        ) {
                            var upperTemp = uppers_1_1.value;
                            if (upperTemp === undefined) {
                                continue;
                            }
                            if (
                                upper === undefined ||
                                cmp_1.default(upper, upperTemp) === -1
                            ) {
                                upper = upperTemp;
                            }
                        }
                    } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    } finally {
                        try {
                            if (
                                uppers_1_1 &&
                                !uppers_1_1.done &&
                                (_b = uppers_1.return)
                            )
                                _b.call(uppers_1);
                        } finally {
                            if (e_2) throw e_2.error;
                        }
                    }
                    if (lower !== undefined && upper !== undefined) {
                        return FDBKeyRange_1.default.bound(lower, upper);
                    }
                    if (lower !== undefined) {
                        return FDBKeyRange_1.default.lowerBound(lower);
                    }
                    if (upper !== undefined) {
                        return FDBKeyRange_1.default.upperBound(upper);
                    }
                };
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#cursor
                var FDBCursor = /** @class */ (function() {
                    function FDBCursor(
                        source,
                        range,
                        direction,
                        request,
                        keyOnly,
                    ) {
                        if (direction === void 0) {
                            direction = "next";
                        }
                        if (keyOnly === void 0) {
                            keyOnly = false;
                        }
                        this._gotValue = false;
                        this._position = undefined; // Key of previously returned record
                        this._objectStorePosition = undefined;
                        this._keyOnly = false;
                        this._key = undefined;
                        this._primaryKey = undefined;
                        this._range = range;
                        this._source = source;
                        this._direction = direction;
                        this._request = request;
                        this._keyOnly = keyOnly;
                    }
                    Object.defineProperty(FDBCursor.prototype, "source", {
                        // Read only properties
                        get: function() {
                            return this._source;
                        },
                        set: function(val) {
                            /* For babel */
                        },
                        enumerable: true,
                        configurable: true,
                    });
                    Object.defineProperty(FDBCursor.prototype, "direction", {
                        get: function() {
                            return this._direction;
                        },
                        set: function(val) {
                            /* For babel */
                        },
                        enumerable: true,
                        configurable: true,
                    });
                    Object.defineProperty(FDBCursor.prototype, "key", {
                        get: function() {
                            return this._key;
                        },
                        set: function(val) {
                            /* For babel */
                        },
                        enumerable: true,
                        configurable: true,
                    });
                    Object.defineProperty(FDBCursor.prototype, "primaryKey", {
                        get: function() {
                            return this._primaryKey;
                        },
                        set: function(val) {
                            /* For babel */
                        },
                        enumerable: true,
                        configurable: true,
                    });
                    // https://w3c.github.io/IndexedDB/#iterate-a-cursor
                    FDBCursor.prototype._iterate = function(key, primaryKey) {
                        var e_3, _a, e_4, _b, e_5, _c, e_6, _d;
                        var sourceIsObjectStore =
                            this.source instanceof FDBObjectStore_1.default;
                        // Can't use sourceIsObjectStore because TypeScript
                        var records =
                            this.source instanceof FDBObjectStore_1.default
                                ? this.source._rawObjectStore.records
                                : this.source._rawIndex.records;
                        var foundRecord;
                        if (this.direction === "next") {
                            var range = makeKeyRange(
                                this._range,
                                [key, this._position],
                                [],
                            );
                            try {
                                for (
                                    var _e = __values(records.values(range)),
                                        _f = _e.next();
                                    !_f.done;
                                    _f = _e.next()
                                ) {
                                    var record = _f.value;
                                    var cmpResultKey =
                                        key !== undefined
                                            ? cmp_1.default(record.key, key)
                                            : undefined;
                                    var cmpResultPosition =
                                        this._position !== undefined
                                            ? cmp_1.default(
                                                  record.key,
                                                  this._position,
                                              )
                                            : undefined;
                                    if (key !== undefined) {
                                        if (cmpResultKey === -1) {
                                            continue;
                                        }
                                    }
                                    if (primaryKey !== undefined) {
                                        if (cmpResultKey === -1) {
                                            continue;
                                        }
                                        var cmpResultPrimaryKey = cmp_1.default(
                                            record.value,
                                            primaryKey,
                                        );
                                        if (
                                            cmpResultKey === 0 &&
                                            cmpResultPrimaryKey === -1
                                        ) {
                                            continue;
                                        }
                                    }
                                    if (
                                        this._position !== undefined &&
                                        sourceIsObjectStore
                                    ) {
                                        if (cmpResultPosition !== 1) {
                                            continue;
                                        }
                                    }
                                    if (
                                        this._position !== undefined &&
                                        !sourceIsObjectStore
                                    ) {
                                        if (cmpResultPosition === -1) {
                                            continue;
                                        }
                                        if (
                                            cmpResultPosition === 0 &&
                                            cmp_1.default(
                                                record.value,
                                                this._objectStorePosition,
                                            ) !== 1
                                        ) {
                                            continue;
                                        }
                                    }
                                    if (this._range !== undefined) {
                                        if (!this._range.includes(record.key)) {
                                            continue;
                                        }
                                    }
                                    foundRecord = record;
                                    break;
                                }
                            } catch (e_3_1) {
                                e_3 = { error: e_3_1 };
                            } finally {
                                try {
                                    if (_f && !_f.done && (_a = _e.return))
                                        _a.call(_e);
                                } finally {
                                    if (e_3) throw e_3.error;
                                }
                            }
                        } else if (this.direction === "nextunique") {
                            // This could be done without iterating, if the range was defined slightly better (to handle gt/gte cases).
                            // But the performance difference should be small, and that wouldn't work anyway for directions where the
                            // value needs to be used (like next and prev).
                            var range = makeKeyRange(
                                this._range,
                                [key, this._position],
                                [],
                            );
                            try {
                                for (
                                    var _g = __values(records.values(range)),
                                        _h = _g.next();
                                    !_h.done;
                                    _h = _g.next()
                                ) {
                                    var record = _h.value;
                                    if (key !== undefined) {
                                        if (
                                            cmp_1.default(record.key, key) ===
                                            -1
                                        ) {
                                            continue;
                                        }
                                    }
                                    if (this._position !== undefined) {
                                        if (
                                            cmp_1.default(
                                                record.key,
                                                this._position,
                                            ) !== 1
                                        ) {
                                            continue;
                                        }
                                    }
                                    if (this._range !== undefined) {
                                        if (!this._range.includes(record.key)) {
                                            continue;
                                        }
                                    }
                                    foundRecord = record;
                                    break;
                                }
                            } catch (e_4_1) {
                                e_4 = { error: e_4_1 };
                            } finally {
                                try {
                                    if (_h && !_h.done && (_b = _g.return))
                                        _b.call(_g);
                                } finally {
                                    if (e_4) throw e_4.error;
                                }
                            }
                        } else if (this.direction === "prev") {
                            var range = makeKeyRange(
                                this._range,
                                [],
                                [key, this._position],
                            );
                            try {
                                for (
                                    var _j = __values(
                                            records.values(range, "prev"),
                                        ),
                                        _k = _j.next();
                                    !_k.done;
                                    _k = _j.next()
                                ) {
                                    var record = _k.value;
                                    var cmpResultKey =
                                        key !== undefined
                                            ? cmp_1.default(record.key, key)
                                            : undefined;
                                    var cmpResultPosition =
                                        this._position !== undefined
                                            ? cmp_1.default(
                                                  record.key,
                                                  this._position,
                                              )
                                            : undefined;
                                    if (key !== undefined) {
                                        if (cmpResultKey === 1) {
                                            continue;
                                        }
                                    }
                                    if (primaryKey !== undefined) {
                                        if (cmpResultKey === 1) {
                                            continue;
                                        }
                                        var cmpResultPrimaryKey = cmp_1.default(
                                            record.value,
                                            primaryKey,
                                        );
                                        if (
                                            cmpResultKey === 0 &&
                                            cmpResultPrimaryKey === 1
                                        ) {
                                            continue;
                                        }
                                    }
                                    if (
                                        this._position !== undefined &&
                                        sourceIsObjectStore
                                    ) {
                                        if (cmpResultPosition !== -1) {
                                            continue;
                                        }
                                    }
                                    if (
                                        this._position !== undefined &&
                                        !sourceIsObjectStore
                                    ) {
                                        if (cmpResultPosition === 1) {
                                            continue;
                                        }
                                        if (
                                            cmpResultPosition === 0 &&
                                            cmp_1.default(
                                                record.value,
                                                this._objectStorePosition,
                                            ) !== -1
                                        ) {
                                            continue;
                                        }
                                    }
                                    if (this._range !== undefined) {
                                        if (!this._range.includes(record.key)) {
                                            continue;
                                        }
                                    }
                                    foundRecord = record;
                                    break;
                                }
                            } catch (e_5_1) {
                                e_5 = { error: e_5_1 };
                            } finally {
                                try {
                                    if (_k && !_k.done && (_c = _j.return))
                                        _c.call(_j);
                                } finally {
                                    if (e_5) throw e_5.error;
                                }
                            }
                        } else if (this.direction === "prevunique") {
                            var tempRecord = void 0;
                            var range = makeKeyRange(
                                this._range,
                                [],
                                [key, this._position],
                            );
                            try {
                                for (
                                    var _l = __values(
                                            records.values(range, "prev"),
                                        ),
                                        _m = _l.next();
                                    !_m.done;
                                    _m = _l.next()
                                ) {
                                    var record = _m.value;
                                    if (key !== undefined) {
                                        if (
                                            cmp_1.default(record.key, key) === 1
                                        ) {
                                            continue;
                                        }
                                    }
                                    if (this._position !== undefined) {
                                        if (
                                            cmp_1.default(
                                                record.key,
                                                this._position,
                                            ) !== -1
                                        ) {
                                            continue;
                                        }
                                    }
                                    if (this._range !== undefined) {
                                        if (!this._range.includes(record.key)) {
                                            continue;
                                        }
                                    }
                                    tempRecord = record;
                                    break;
                                }
                            } catch (e_6_1) {
                                e_6 = { error: e_6_1 };
                            } finally {
                                try {
                                    if (_m && !_m.done && (_d = _l.return))
                                        _d.call(_l);
                                } finally {
                                    if (e_6) throw e_6.error;
                                }
                            }
                            if (tempRecord) {
                                foundRecord = records.get(tempRecord.key);
                            }
                        }
                        var result;
                        if (!foundRecord) {
                            this._key = undefined;
                            if (!sourceIsObjectStore) {
                                this._objectStorePosition = undefined;
                            }
                            // "this instanceof FDBCursorWithValue" would be better and not require (this as any), but causes runtime
                            // error due to circular dependency.
                            if (
                                !this._keyOnly &&
                                this.toString() ===
                                    "[object IDBCursorWithValue]"
                            ) {
                                this.value = undefined;
                            }
                            result = null;
                        } else {
                            this._position = foundRecord.key;
                            if (!sourceIsObjectStore) {
                                this._objectStorePosition = foundRecord.value;
                            }
                            this._key = foundRecord.key;
                            if (sourceIsObjectStore) {
                                this._primaryKey = structuredClone_1.default(
                                    foundRecord.key,
                                );
                                if (
                                    !this._keyOnly &&
                                    this.toString() ===
                                        "[object IDBCursorWithValue]"
                                ) {
                                    this.value = structuredClone_1.default(
                                        foundRecord.value,
                                    );
                                }
                            } else {
                                this._primaryKey = structuredClone_1.default(
                                    foundRecord.value,
                                );
                                if (
                                    !this._keyOnly &&
                                    this.toString() ===
                                        "[object IDBCursorWithValue]"
                                ) {
                                    if (
                                        this.source instanceof
                                        FDBObjectStore_1.default
                                    ) {
                                        // Can't use sourceIsObjectStore because TypeScript
                                        throw new Error(
                                            "This should never happen",
                                        );
                                    }
                                    var value = this.source.objectStore._rawObjectStore.getValue(
                                        foundRecord.value,
                                    );
                                    this.value = structuredClone_1.default(
                                        value,
                                    );
                                }
                            }
                            this._gotValue = true;
                            result = this;
                        }
                        return result;
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBCursor-update-IDBRequest-any-value
                    FDBCursor.prototype.update = function(value) {
                        if (value === undefined) {
                            throw new TypeError();
                        }
                        var effectiveObjectStore = getEffectiveObjectStore(
                            this,
                        );
                        var effectiveKey = this.source.hasOwnProperty(
                            "_rawIndex",
                        )
                            ? this.primaryKey
                            : this._position;
                        var transaction = effectiveObjectStore.transaction;
                        if (transaction._state !== "active") {
                            throw new errors_1.TransactionInactiveError();
                        }
                        if (transaction.mode === "readonly") {
                            throw new errors_1.ReadOnlyError();
                        }
                        if (effectiveObjectStore._rawObjectStore.deleted) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (
                            !(
                                this.source instanceof FDBObjectStore_1.default
                            ) &&
                            this.source._rawIndex.deleted
                        ) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (!this._gotValue || !this.hasOwnProperty("value")) {
                            throw new errors_1.InvalidStateError();
                        }
                        var clone = structuredClone_1.default(value);
                        if (effectiveObjectStore.keyPath !== null) {
                            var tempKey = void 0;
                            try {
                                tempKey = extractKey_1.default(
                                    effectiveObjectStore.keyPath,
                                    clone,
                                );
                            } catch (err) {
                                /* Handled immediately below */
                            }
                            if (cmp_1.default(tempKey, effectiveKey) !== 0) {
                                throw new errors_1.DataError();
                            }
                        }
                        var record = {
                            key: effectiveKey,
                            value: clone,
                        };
                        return transaction._execRequestAsync({
                            operation: effectiveObjectStore._rawObjectStore.storeRecord.bind(
                                effectiveObjectStore._rawObjectStore,
                                record,
                                false,
                                transaction._rollbackLog,
                            ),
                            source: this,
                        });
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBCursor-advance-void-unsigned-long-count
                    FDBCursor.prototype.advance = function(count) {
                        var _this = this;
                        if (!Number.isInteger(count) || count <= 0) {
                            throw new TypeError();
                        }
                        var effectiveObjectStore = getEffectiveObjectStore(
                            this,
                        );
                        var transaction = effectiveObjectStore.transaction;
                        if (transaction._state !== "active") {
                            throw new errors_1.TransactionInactiveError();
                        }
                        if (effectiveObjectStore._rawObjectStore.deleted) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (
                            !(
                                this.source instanceof FDBObjectStore_1.default
                            ) &&
                            this.source._rawIndex.deleted
                        ) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (!this._gotValue) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (this._request) {
                            this._request.readyState = "pending";
                        }
                        transaction._execRequestAsync({
                            operation: function() {
                                var result;
                                for (var i = 0; i < count; i++) {
                                    result = _this._iterate();
                                    // Not sure why this is needed
                                    if (!result) {
                                        break;
                                    }
                                }
                                return result;
                            },
                            request: this._request,
                            source: this.source,
                        });
                        this._gotValue = false;
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBCursor-continue-void-any-key
                    FDBCursor.prototype.continue = function(key) {
                        var effectiveObjectStore = getEffectiveObjectStore(
                            this,
                        );
                        var transaction = effectiveObjectStore.transaction;
                        if (transaction._state !== "active") {
                            throw new errors_1.TransactionInactiveError();
                        }
                        if (effectiveObjectStore._rawObjectStore.deleted) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (
                            !(
                                this.source instanceof FDBObjectStore_1.default
                            ) &&
                            this.source._rawIndex.deleted
                        ) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (!this._gotValue) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (key !== undefined) {
                            key = valueToKey_1.default(key);
                            var cmpResult = cmp_1.default(key, this._position);
                            if (
                                (cmpResult <= 0 &&
                                    (this.direction === "next" ||
                                        this.direction === "nextunique")) ||
                                (cmpResult >= 0 &&
                                    (this.direction === "prev" ||
                                        this.direction === "prevunique"))
                            ) {
                                throw new errors_1.DataError();
                            }
                        }
                        if (this._request) {
                            this._request.readyState = "pending";
                        }
                        transaction._execRequestAsync({
                            operation: this._iterate.bind(this, key),
                            request: this._request,
                            source: this.source,
                        });
                        this._gotValue = false;
                    };
                    // hthttps://w3c.github.io/IndexedDB/#dom-idbcursor-continueprimarykey
                    FDBCursor.prototype.continuePrimaryKey = function(
                        key,
                        primaryKey,
                    ) {
                        var effectiveObjectStore = getEffectiveObjectStore(
                            this,
                        );
                        var transaction = effectiveObjectStore.transaction;
                        if (transaction._state !== "active") {
                            throw new errors_1.TransactionInactiveError();
                        }
                        if (effectiveObjectStore._rawObjectStore.deleted) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (
                            !(
                                this.source instanceof FDBObjectStore_1.default
                            ) &&
                            this.source._rawIndex.deleted
                        ) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (
                            this.source instanceof FDBObjectStore_1.default ||
                            (this.direction !== "next" &&
                                this.direction !== "prev")
                        ) {
                            throw new errors_1.InvalidAccessError();
                        }
                        if (!this._gotValue) {
                            throw new errors_1.InvalidStateError();
                        }
                        // Not sure about this
                        if (key === undefined || primaryKey === undefined) {
                            throw new errors_1.DataError();
                        }
                        key = valueToKey_1.default(key);
                        var cmpResult = cmp_1.default(key, this._position);
                        if (
                            (cmpResult === -1 && this.direction === "next") ||
                            (cmpResult === 1 && this.direction === "prev")
                        ) {
                            throw new errors_1.DataError();
                        }
                        var cmpResult2 = cmp_1.default(
                            primaryKey,
                            this._objectStorePosition,
                        );
                        if (cmpResult === 0) {
                            if (
                                (cmpResult2 <= 0 &&
                                    this.direction === "next") ||
                                (cmpResult2 >= 0 && this.direction === "prev")
                            ) {
                                throw new errors_1.DataError();
                            }
                        }
                        if (this._request) {
                            this._request.readyState = "pending";
                        }
                        transaction._execRequestAsync({
                            operation: this._iterate.bind(
                                this,
                                key,
                                primaryKey,
                            ),
                            request: this._request,
                            source: this.source,
                        });
                        this._gotValue = false;
                    };
                    FDBCursor.prototype.delete = function() {
                        var effectiveObjectStore = getEffectiveObjectStore(
                            this,
                        );
                        var effectiveKey = this.source.hasOwnProperty(
                            "_rawIndex",
                        )
                            ? this.primaryKey
                            : this._position;
                        var transaction = effectiveObjectStore.transaction;
                        if (transaction._state !== "active") {
                            throw new errors_1.TransactionInactiveError();
                        }
                        if (transaction.mode === "readonly") {
                            throw new errors_1.ReadOnlyError();
                        }
                        if (effectiveObjectStore._rawObjectStore.deleted) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (
                            !(
                                this.source instanceof FDBObjectStore_1.default
                            ) &&
                            this.source._rawIndex.deleted
                        ) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (!this._gotValue || !this.hasOwnProperty("value")) {
                            throw new errors_1.InvalidStateError();
                        }
                        return transaction._execRequestAsync({
                            operation: effectiveObjectStore._rawObjectStore.deleteRecord.bind(
                                effectiveObjectStore._rawObjectStore,
                                effectiveKey,
                                transaction._rollbackLog,
                            ),
                            source: this,
                        });
                    };
                    FDBCursor.prototype.toString = function() {
                        return "[object IDBCursor]";
                    };
                    return FDBCursor;
                })();
                exports.default = FDBCursor;
            },
            {
                "./FDBKeyRange": 6,
                "./FDBObjectStore": 7,
                "./lib/cmp": 23,
                "./lib/errors": 25,
                "./lib/extractKey": 26,
                "./lib/structuredClone": 29,
                "./lib/valueToKey": 31,
            },
        ],
        2: [
            function(require, module, exports) {
                "use strict";
                var __extends =
                    (this && this.__extends) ||
                    (function() {
                        var extendStatics = function(d, b) {
                            extendStatics =
                                Object.setPrototypeOf ||
                                ({ __proto__: [] } instanceof Array &&
                                    function(d, b) {
                                        d.__proto__ = b;
                                    }) ||
                                function(d, b) {
                                    for (var p in b)
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                };
                            return extendStatics(d, b);
                        };
                        return function(d, b) {
                            extendStatics(d, b);
                            function __() {
                                this.constructor = d;
                            }
                            d.prototype =
                                b === null
                                    ? Object.create(b)
                                    : ((__.prototype = b.prototype), new __());
                        };
                    })();
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBCursor_1 = require("./FDBCursor");
                var FDBCursorWithValue = /** @class */ (function(_super) {
                    __extends(FDBCursorWithValue, _super);
                    function FDBCursorWithValue(
                        source,
                        range,
                        direction,
                        request,
                    ) {
                        var _this =
                            _super.call(
                                this,
                                source,
                                range,
                                direction,
                                request,
                            ) || this;
                        _this.value = undefined;
                        return _this;
                    }
                    FDBCursorWithValue.prototype.toString = function() {
                        return "[object IDBCursorWithValue]";
                    };
                    return FDBCursorWithValue;
                })(FDBCursor_1.default);
                exports.default = FDBCursorWithValue;
            },
            { "./FDBCursor": 1 },
        ],
        3: [
            function(require, module, exports) {
                "use strict";
                var __extends =
                    (this && this.__extends) ||
                    (function() {
                        var extendStatics = function(d, b) {
                            extendStatics =
                                Object.setPrototypeOf ||
                                ({ __proto__: [] } instanceof Array &&
                                    function(d, b) {
                                        d.__proto__ = b;
                                    }) ||
                                function(d, b) {
                                    for (var p in b)
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                };
                            return extendStatics(d, b);
                        };
                        return function(d, b) {
                            extendStatics(d, b);
                            function __() {
                                this.constructor = d;
                            }
                            d.prototype =
                                b === null
                                    ? Object.create(b)
                                    : ((__.prototype = b.prototype), new __());
                        };
                    })();
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBTransaction_1 = require("./FDBTransaction");
                var errors_1 = require("./lib/errors");
                var fakeDOMStringList_1 = require("./lib/fakeDOMStringList");
                var FakeEventTarget_1 = require("./lib/FakeEventTarget");
                var ObjectStore_1 = require("./lib/ObjectStore");
                var scheduling_1 = require("./lib/scheduling");
                var validateKeyPath_1 = require("./lib/validateKeyPath");
                var confirmActiveVersionchangeTransaction = function(database) {
                    if (!database._runningVersionchangeTransaction) {
                        throw new errors_1.InvalidStateError();
                    }
                    // Find the latest versionchange transaction
                    var transactions = database._rawDatabase.transactions.filter(
                        function(tx) {
                            return tx.mode === "versionchange";
                        },
                    );
                    var transaction = transactions[transactions.length - 1];
                    if (!transaction || transaction._state === "finished") {
                        throw new errors_1.InvalidStateError();
                    }
                    if (transaction._state !== "active") {
                        throw new errors_1.TransactionInactiveError();
                    }
                    return transaction;
                };
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#database-closing-steps
                var closeConnection = function(connection) {
                    connection._closePending = true;
                    var transactionsComplete = connection._rawDatabase.transactions.every(
                        function(transaction) {
                            return transaction._state === "finished";
                        },
                    );
                    if (transactionsComplete) {
                        connection._closed = true;
                        connection._rawDatabase.connections = connection._rawDatabase.connections.filter(
                            function(otherConnection) {
                                return connection !== otherConnection;
                            },
                        );
                    } else {
                        scheduling_1.queueTask(function() {
                            closeConnection(connection);
                        });
                    }
                };
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#database-interface
                var FDBDatabase = /** @class */ (function(_super) {
                    __extends(FDBDatabase, _super);
                    function FDBDatabase(rawDatabase) {
                        var _this = _super.call(this) || this;
                        _this._closePending = false;
                        _this._closed = false;
                        _this._runningVersionchangeTransaction = false;
                        _this._rawDatabase = rawDatabase;
                        _this._rawDatabase.connections.push(_this);
                        _this.name = rawDatabase.name;
                        _this.version = rawDatabase.version;
                        _this.objectStoreNames = fakeDOMStringList_1
                            .default(
                                Array.from(rawDatabase.rawObjectStores.keys()),
                            )
                            .sort();
                        return _this;
                    }
                    // http://w3c.github.io/IndexedDB/#dom-idbdatabase-createobjectstore
                    FDBDatabase.prototype.createObjectStore = function(
                        name,
                        options,
                    ) {
                        var _this = this;
                        if (options === void 0) {
                            options = {};
                        }
                        if (name === undefined) {
                            throw new TypeError();
                        }
                        var transaction = confirmActiveVersionchangeTransaction(
                            this,
                        );
                        var keyPath =
                            options !== null && options.keyPath !== undefined
                                ? options.keyPath
                                : null;
                        var autoIncrement =
                            options !== null &&
                            options.autoIncrement !== undefined
                                ? options.autoIncrement
                                : false;
                        if (keyPath !== null) {
                            validateKeyPath_1.default(keyPath);
                        }
                        if (this._rawDatabase.rawObjectStores.has(name)) {
                            throw new errors_1.ConstraintError();
                        }
                        if (
                            autoIncrement &&
                            (keyPath === "" || Array.isArray(keyPath))
                        ) {
                            throw new errors_1.InvalidAccessError();
                        }
                        var objectStoreNames = this.objectStoreNames.slice();
                        transaction._rollbackLog.push(function() {
                            var objectStore = _this._rawDatabase.rawObjectStores.get(
                                name,
                            );
                            if (objectStore) {
                                objectStore.deleted = true;
                            }
                            _this.objectStoreNames = fakeDOMStringList_1.default(
                                objectStoreNames,
                            );
                            transaction._scope.delete(name);
                            _this._rawDatabase.rawObjectStores.delete(name);
                        });
                        var rawObjectStore = new ObjectStore_1.default(
                            this._rawDatabase,
                            name,
                            keyPath,
                            autoIncrement,
                        );
                        this.objectStoreNames.push(name);
                        this.objectStoreNames.sort();
                        transaction._scope.add(name);
                        this._rawDatabase.rawObjectStores.set(
                            name,
                            rawObjectStore,
                        );
                        transaction.objectStoreNames = fakeDOMStringList_1.default(
                            this.objectStoreNames.slice(),
                        );
                        return transaction.objectStore(name);
                    };
                    FDBDatabase.prototype.deleteObjectStore = function(name) {
                        var _this = this;
                        if (name === undefined) {
                            throw new TypeError();
                        }
                        var transaction = confirmActiveVersionchangeTransaction(
                            this,
                        );
                        var store = this._rawDatabase.rawObjectStores.get(name);
                        if (store === undefined) {
                            throw new errors_1.NotFoundError();
                        }
                        this.objectStoreNames = fakeDOMStringList_1.default(
                            this.objectStoreNames.filter(function(
                                objectStoreName,
                            ) {
                                return objectStoreName !== name;
                            }),
                        );
                        transaction.objectStoreNames = fakeDOMStringList_1.default(
                            this.objectStoreNames.slice(),
                        );
                        transaction._rollbackLog.push(function() {
                            store.deleted = false;
                            _this._rawDatabase.rawObjectStores.set(name, store);
                            _this.objectStoreNames.push(name);
                            _this.objectStoreNames.sort();
                        });
                        store.deleted = true;
                        this._rawDatabase.rawObjectStores.delete(name);
                        transaction._objectStoresCache.delete(name);
                    };
                    FDBDatabase.prototype.transaction = function(
                        storeNames,
                        mode,
                    ) {
                        var e_1, _a;
                        var _this = this;
                        mode = mode !== undefined ? mode : "readonly";
                        if (
                            mode !== "readonly" &&
                            mode !== "readwrite" &&
                            mode !== "versionchange"
                        ) {
                            throw new TypeError("Invalid mode: " + mode);
                        }
                        var hasActiveVersionchange = this._rawDatabase.transactions.some(
                            function(transaction) {
                                return (
                                    transaction._state === "active" &&
                                    transaction.mode === "versionchange" &&
                                    transaction.db === _this
                                );
                            },
                        );
                        if (hasActiveVersionchange) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (this._closePending) {
                            throw new errors_1.InvalidStateError();
                        }
                        if (!Array.isArray(storeNames)) {
                            storeNames = [storeNames];
                        }
                        if (
                            storeNames.length === 0 &&
                            mode !== "versionchange"
                        ) {
                            throw new errors_1.InvalidAccessError();
                        }
                        try {
                            for (
                                var storeNames_1 = __values(storeNames),
                                    storeNames_1_1 = storeNames_1.next();
                                !storeNames_1_1.done;
                                storeNames_1_1 = storeNames_1.next()
                            ) {
                                var storeName = storeNames_1_1.value;
                                if (
                                    this.objectStoreNames.indexOf(storeName) < 0
                                ) {
                                    throw new errors_1.NotFoundError(
                                        "No objectStore named " +
                                            storeName +
                                            " in this database",
                                    );
                                }
                            }
                        } catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        } finally {
                            try {
                                if (
                                    storeNames_1_1 &&
                                    !storeNames_1_1.done &&
                                    (_a = storeNames_1.return)
                                )
                                    _a.call(storeNames_1);
                            } finally {
                                if (e_1) throw e_1.error;
                            }
                        }
                        var tx = new FDBTransaction_1.default(
                            storeNames,
                            mode,
                            this,
                        );
                        this._rawDatabase.transactions.push(tx);
                        this._rawDatabase.processTransactions(); // See if can start right away (async)
                        return tx;
                    };
                    FDBDatabase.prototype.close = function() {
                        closeConnection(this);
                    };
                    FDBDatabase.prototype.toString = function() {
                        return "[object IDBDatabase]";
                    };
                    return FDBDatabase;
                })(FakeEventTarget_1.default);
                exports.default = FDBDatabase;
            },
            {
                "./FDBTransaction": 10,
                "./lib/FakeEventTarget": 16,
                "./lib/ObjectStore": 19,
                "./lib/errors": 25,
                "./lib/fakeDOMStringList": 27,
                "./lib/scheduling": 28,
                "./lib/validateKeyPath": 30,
            },
        ],
        4: [
            function(require, module, exports) {
                "use strict";
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                var __read =
                    (this && this.__read) ||
                    function(o, n) {
                        var m =
                            typeof Symbol === "function" && o[Symbol.iterator];
                        if (!m) return o;
                        var i = m.call(o),
                            r,
                            ar = [],
                            e;
                        try {
                            while (
                                (n === void 0 || n-- > 0) &&
                                !(r = i.next()).done
                            )
                                ar.push(r.value);
                        } catch (error) {
                            e = { error: error };
                        } finally {
                            try {
                                if (r && !r.done && (m = i["return"]))
                                    m.call(i);
                            } finally {
                                if (e) throw e.error;
                            }
                        }
                        return ar;
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBDatabase_1 = require("./FDBDatabase");
                var FDBOpenDBRequest_1 = require("./FDBOpenDBRequest");
                var FDBVersionChangeEvent_1 = require("./FDBVersionChangeEvent");
                var cmp_1 = require("./lib/cmp");
                var Database_1 = require("./lib/Database");
                var enforceRange_1 = require("./lib/enforceRange");
                var errors_1 = require("./lib/errors");
                var FakeEvent_1 = require("./lib/FakeEvent");
                var scheduling_1 = require("./lib/scheduling");
                var waitForOthersClosedDelete = function(
                    databases,
                    name,
                    openDatabases,
                    cb,
                ) {
                    var anyOpen = openDatabases.some(function(openDatabase2) {
                        return (
                            !openDatabase2._closed &&
                            !openDatabase2._closePending
                        );
                    });
                    if (anyOpen) {
                        scheduling_1.queueTask(function() {
                            return waitForOthersClosedDelete(
                                databases,
                                name,
                                openDatabases,
                                cb,
                            );
                        });
                        return;
                    }
                    databases.delete(name);
                    cb(null);
                };
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-deleting-a-database
                var deleteDatabase = function(databases, name, request, cb) {
                    var e_1, _a;
                    try {
                        var db = databases.get(name);
                        if (db === undefined) {
                            cb(null);
                            return;
                        }
                        db.deletePending = true;
                        var openDatabases = db.connections.filter(function(
                            connection,
                        ) {
                            return (
                                !connection._closed && !connection._closePending
                            );
                        });
                        try {
                            for (
                                var openDatabases_1 = __values(openDatabases),
                                    openDatabases_1_1 = openDatabases_1.next();
                                !openDatabases_1_1.done;
                                openDatabases_1_1 = openDatabases_1.next()
                            ) {
                                var openDatabase2 = openDatabases_1_1.value;
                                if (!openDatabase2._closePending) {
                                    var event_1 = new FDBVersionChangeEvent_1.default(
                                        "versionchange",
                                        {
                                            newVersion: null,
                                            oldVersion: db.version,
                                        },
                                    );
                                    openDatabase2.dispatchEvent(event_1);
                                }
                            }
                        } catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        } finally {
                            try {
                                if (
                                    openDatabases_1_1 &&
                                    !openDatabases_1_1.done &&
                                    (_a = openDatabases_1.return)
                                )
                                    _a.call(openDatabases_1);
                            } finally {
                                if (e_1) throw e_1.error;
                            }
                        }
                        var anyOpen = openDatabases.some(function(
                            openDatabase3,
                        ) {
                            return (
                                !openDatabase3._closed &&
                                !openDatabase3._closePending
                            );
                        });
                        if (request && anyOpen) {
                            var event_2 = new FDBVersionChangeEvent_1.default(
                                "blocked",
                                {
                                    newVersion: null,
                                    oldVersion: db.version,
                                },
                            );
                            request.dispatchEvent(event_2);
                        }
                        waitForOthersClosedDelete(
                            databases,
                            name,
                            openDatabases,
                            cb,
                        );
                    } catch (err) {
                        cb(err);
                    }
                };
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-running-a-versionchange-transaction
                var runVersionchangeTransaction = function(
                    connection,
                    version,
                    request,
                    cb,
                ) {
                    var e_2, _a;
                    connection._runningVersionchangeTransaction = true;
                    var oldVersion = connection.version;
                    var openDatabases = connection._rawDatabase.connections.filter(
                        function(otherDatabase) {
                            return connection !== otherDatabase;
                        },
                    );
                    try {
                        for (
                            var openDatabases_2 = __values(openDatabases),
                                openDatabases_2_1 = openDatabases_2.next();
                            !openDatabases_2_1.done;
                            openDatabases_2_1 = openDatabases_2.next()
                        ) {
                            var openDatabase2 = openDatabases_2_1.value;
                            if (
                                !openDatabase2._closed &&
                                !openDatabase2._closePending
                            ) {
                                var event_3 = new FDBVersionChangeEvent_1.default(
                                    "versionchange",
                                    {
                                        newVersion: version,
                                        oldVersion: oldVersion,
                                    },
                                );
                                openDatabase2.dispatchEvent(event_3);
                            }
                        }
                    } catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    } finally {
                        try {
                            if (
                                openDatabases_2_1 &&
                                !openDatabases_2_1.done &&
                                (_a = openDatabases_2.return)
                            )
                                _a.call(openDatabases_2);
                        } finally {
                            if (e_2) throw e_2.error;
                        }
                    }
                    var anyOpen = openDatabases.some(function(openDatabase3) {
                        return (
                            !openDatabase3._closed &&
                            !openDatabase3._closePending
                        );
                    });
                    if (anyOpen) {
                        var event_4 = new FDBVersionChangeEvent_1.default(
                            "blocked",
                            {
                                newVersion: version,
                                oldVersion: oldVersion,
                            },
                        );
                        request.dispatchEvent(event_4);
                    }
                    var waitForOthersClosed = function() {
                        var anyOpen2 = openDatabases.some(function(
                            openDatabase2,
                        ) {
                            return (
                                !openDatabase2._closed &&
                                !openDatabase2._closePending
                            );
                        });
                        if (anyOpen2) {
                            scheduling_1.queueTask(waitForOthersClosed);
                            return;
                        }
                        // Set the version of database to version. This change is considered part of the transaction, and so if the
                        // transaction is aborted, this change is reverted.
                        connection._rawDatabase.version = version;
                        connection.version = version;
                        // Get rid of this setImmediate?
                        var transaction = connection.transaction(
                            connection.objectStoreNames,
                            "versionchange",
                        );
                        request.result = connection;
                        request.readyState = "done";
                        request.transaction = transaction;
                        transaction._rollbackLog.push(function() {
                            connection._rawDatabase.version = oldVersion;
                            connection.version = oldVersion;
                        });
                        var event = new FDBVersionChangeEvent_1.default(
                            "upgradeneeded",
                            {
                                newVersion: version,
                                oldVersion: oldVersion,
                            },
                        );
                        request.dispatchEvent(event);
                        transaction.addEventListener("error", function() {
                            connection._runningVersionchangeTransaction = false;
                            // throw arguments[0].target.error;
                            // console.log("error in versionchange transaction - not sure if anything needs to be done here", e.target.error.name);
                        });
                        transaction.addEventListener("abort", function() {
                            connection._runningVersionchangeTransaction = false;
                            request.transaction = null;
                            scheduling_1.queueTask(function() {
                                cb(new errors_1.AbortError());
                            });
                        });
                        transaction.addEventListener("complete", function() {
                            connection._runningVersionchangeTransaction = false;
                            request.transaction = null;
                            // Let other complete event handlers run before continuing
                            scheduling_1.queueTask(function() {
                                if (connection._closePending) {
                                    cb(new errors_1.AbortError());
                                } else {
                                    cb(null);
                                }
                            });
                        });
                    };
                    waitForOthersClosed();
                };
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-opening-a-database
                var openDatabase = function(
                    databases,
                    name,
                    version,
                    request,
                    cb,
                ) {
                    var db = databases.get(name);
                    if (db === undefined) {
                        db = new Database_1.default(name, 0);
                        databases.set(name, db);
                    }
                    if (version === undefined) {
                        version = db.version !== 0 ? db.version : 1;
                    }
                    if (db.version > version) {
                        return cb(new errors_1.VersionError());
                    }
                    var connection = new FDBDatabase_1.default(db);
                    if (db.version < version) {
                        runVersionchangeTransaction(
                            connection,
                            version,
                            request,
                            function(err) {
                                if (err) {
                                    // DO THIS HERE: ensure that connection is closed by running the steps for closing a database connection before these
                                    // steps are aborted.
                                    return cb(err);
                                }
                                cb(null, connection);
                            },
                        );
                    } else {
                        cb(null, connection);
                    }
                };
                var FDBFactory = /** @class */ (function() {
                    function FDBFactory() {
                        this.cmp = cmp_1.default;
                        this._databases = new Map();
                    }
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBFactory-deleteDatabase-IDBOpenDBRequest-DOMString-name
                    FDBFactory.prototype.deleteDatabase = function(name) {
                        var _this = this;
                        var request = new FDBOpenDBRequest_1.default();
                        request.source = null;
                        scheduling_1.queueTask(function() {
                            var db = _this._databases.get(name);
                            var oldVersion = db !== undefined ? db.version : 0;
                            deleteDatabase(
                                _this._databases,
                                name,
                                request,
                                function(err) {
                                    if (err) {
                                        request.error = new Error();
                                        request.error.name = err.name;
                                        request.readyState = "done";
                                        var event_5 = new FakeEvent_1.default(
                                            "error",
                                            {
                                                bubbles: true,
                                                cancelable: true,
                                            },
                                        );
                                        event_5.eventPath = [];
                                        request.dispatchEvent(event_5);
                                        return;
                                    }
                                    request.result = undefined;
                                    request.readyState = "done";
                                    var event2 = new FDBVersionChangeEvent_1.default(
                                        "success",
                                        {
                                            newVersion: null,
                                            oldVersion: oldVersion,
                                        },
                                    );
                                    request.dispatchEvent(event2);
                                },
                            );
                        });
                        return request;
                    };
                    // tslint:disable-next-line max-line-length
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBFactory-open-IDBOpenDBRequest-DOMString-name-unsigned-long-long-version
                    FDBFactory.prototype.open = function(name, version) {
                        var _this = this;
                        if (arguments.length > 1 && version !== undefined) {
                            // Based on spec, not sure why "MAX_SAFE_INTEGER" instead of "unsigned long long", but it's needed to pass
                            // tests
                            version = enforceRange_1.default(
                                version,
                                "MAX_SAFE_INTEGER",
                            );
                        }
                        if (version === 0) {
                            throw new TypeError();
                        }
                        var request = new FDBOpenDBRequest_1.default();
                        request.source = null;
                        scheduling_1.queueTask(function() {
                            openDatabase(
                                _this._databases,
                                name,
                                version,
                                request,
                                function(err, connection) {
                                    if (err) {
                                        request.result = undefined;
                                        request.readyState = "done";
                                        request.error = new Error();
                                        request.error.name = err.name;
                                        var event_6 = new FakeEvent_1.default(
                                            "error",
                                            {
                                                bubbles: true,
                                                cancelable: true,
                                            },
                                        );
                                        event_6.eventPath = [];
                                        request.dispatchEvent(event_6);
                                        return;
                                    }
                                    request.result = connection;
                                    request.readyState = "done";
                                    var event2 = new FakeEvent_1.default(
                                        "success",
                                    );
                                    event2.eventPath = [];
                                    request.dispatchEvent(event2);
                                },
                            );
                        });
                        return request;
                    };
                    // https://w3c.github.io/IndexedDB/#dom-idbfactory-databases
                    FDBFactory.prototype.databases = function() {
                        var _this = this;
                        return new Promise(function(resolve) {
                            var e_3, _a;
                            var result = [];
                            try {
                                for (
                                    var _b = __values(_this._databases),
                                        _c = _b.next();
                                    !_c.done;
                                    _c = _b.next()
                                ) {
                                    var _d = __read(_c.value, 2),
                                        name_1 = _d[0],
                                        database = _d[1];
                                    result.push({
                                        name: name_1,
                                        version: database.version,
                                    });
                                }
                            } catch (e_3_1) {
                                e_3 = { error: e_3_1 };
                            } finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return))
                                        _a.call(_b);
                                } finally {
                                    if (e_3) throw e_3.error;
                                }
                            }
                            resolve(result);
                        });
                    };
                    FDBFactory.prototype.toString = function() {
                        return "[object IDBFactory]";
                    };
                    return FDBFactory;
                })();
                exports.default = FDBFactory;
            },
            {
                "./FDBDatabase": 3,
                "./FDBOpenDBRequest": 8,
                "./FDBVersionChangeEvent": 11,
                "./lib/Database": 14,
                "./lib/FakeEvent": 15,
                "./lib/cmp": 23,
                "./lib/enforceRange": 24,
                "./lib/errors": 25,
                "./lib/scheduling": 28,
            },
        ],
        5: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBCursor_1 = require("./FDBCursor");
                var FDBCursorWithValue_1 = require("./FDBCursorWithValue");
                var FDBKeyRange_1 = require("./FDBKeyRange");
                var FDBRequest_1 = require("./FDBRequest");
                var enforceRange_1 = require("./lib/enforceRange");
                var errors_1 = require("./lib/errors");
                var fakeDOMStringList_1 = require("./lib/fakeDOMStringList");
                var valueToKey_1 = require("./lib/valueToKey");
                var valueToKeyRange_1 = require("./lib/valueToKeyRange");
                var confirmActiveTransaction = function(index) {
                    if (
                        index._rawIndex.deleted ||
                        index.objectStore._rawObjectStore.deleted
                    ) {
                        throw new errors_1.InvalidStateError();
                    }
                    if (index.objectStore.transaction._state !== "active") {
                        throw new errors_1.TransactionInactiveError();
                    }
                };
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#idl-def-IDBIndex
                var FDBIndex = /** @class */ (function() {
                    function FDBIndex(objectStore, rawIndex) {
                        this._rawIndex = rawIndex;
                        this._name = rawIndex.name;
                        this.objectStore = objectStore;
                        this.keyPath = rawIndex.keyPath;
                        this.multiEntry = rawIndex.multiEntry;
                        this.unique = rawIndex.unique;
                    }
                    Object.defineProperty(FDBIndex.prototype, "name", {
                        get: function() {
                            return this._name;
                        },
                        // https://w3c.github.io/IndexedDB/#dom-idbindex-name
                        set: function(name) {
                            var _this = this;
                            var transaction = this.objectStore.transaction;
                            if (
                                !transaction.db._runningVersionchangeTransaction
                            ) {
                                throw new errors_1.InvalidStateError();
                            }
                            if (transaction._state !== "active") {
                                throw new errors_1.TransactionInactiveError();
                            }
                            if (
                                this._rawIndex.deleted ||
                                this.objectStore._rawObjectStore.deleted
                            ) {
                                throw new errors_1.InvalidStateError();
                            }
                            name = String(name);
                            if (name === this._name) {
                                return;
                            }
                            if (
                                this.objectStore.indexNames.indexOf(name) >= 0
                            ) {
                                throw new errors_1.ConstraintError();
                            }
                            var oldName = this._name;
                            var oldIndexNames = this.objectStore.indexNames.slice();
                            this._name = name;
                            this._rawIndex.name = name;
                            this.objectStore._indexesCache.delete(oldName);
                            this.objectStore._indexesCache.set(name, this);
                            this.objectStore._rawObjectStore.rawIndexes.delete(
                                oldName,
                            );
                            this.objectStore._rawObjectStore.rawIndexes.set(
                                name,
                                this._rawIndex,
                            );
                            this.objectStore.indexNames = fakeDOMStringList_1
                                .default(
                                    Array.from(
                                        this.objectStore._rawObjectStore.rawIndexes.keys(),
                                    ).filter(function(indexName) {
                                        var index = _this.objectStore._rawObjectStore.rawIndexes.get(
                                            indexName,
                                        );
                                        return index && !index.deleted;
                                    }),
                                )
                                .sort();
                            transaction._rollbackLog.push(function() {
                                _this._name = oldName;
                                _this._rawIndex.name = oldName;
                                _this.objectStore._indexesCache.delete(name);
                                _this.objectStore._indexesCache.set(
                                    oldName,
                                    _this,
                                );
                                _this.objectStore._rawObjectStore.rawIndexes.delete(
                                    name,
                                );
                                _this.objectStore._rawObjectStore.rawIndexes.set(
                                    oldName,
                                    _this._rawIndex,
                                );
                                _this.objectStore.indexNames = fakeDOMStringList_1.default(
                                    oldIndexNames,
                                );
                            });
                        },
                        enumerable: true,
                        configurable: true,
                    });
                    // tslint:disable-next-line max-line-length
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBIndex-openCursor-IDBRequest-any-range-IDBCursorDirection-direction
                    FDBIndex.prototype.openCursor = function(range, direction) {
                        confirmActiveTransaction(this);
                        if (range === null) {
                            range = undefined;
                        }
                        if (
                            range !== undefined &&
                            !(range instanceof FDBKeyRange_1.default)
                        ) {
                            range = FDBKeyRange_1.default.only(
                                valueToKey_1.default(range),
                            );
                        }
                        var request = new FDBRequest_1.default();
                        request.source = this;
                        request.transaction = this.objectStore.transaction;
                        var cursor = new FDBCursorWithValue_1.default(
                            this,
                            range,
                            direction,
                            request,
                        );
                        return this.objectStore.transaction._execRequestAsync({
                            operation: cursor._iterate.bind(cursor),
                            request: request,
                            source: this,
                        });
                    };
                    // tslint:disable-next-line max-line-length
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBIndex-openKeyCursor-IDBRequest-any-range-IDBCursorDirection-direction
                    FDBIndex.prototype.openKeyCursor = function(
                        range,
                        direction,
                    ) {
                        confirmActiveTransaction(this);
                        if (range === null) {
                            range = undefined;
                        }
                        if (
                            range !== undefined &&
                            !(range instanceof FDBKeyRange_1.default)
                        ) {
                            range = FDBKeyRange_1.default.only(
                                valueToKey_1.default(range),
                            );
                        }
                        var request = new FDBRequest_1.default();
                        request.source = this;
                        request.transaction = this.objectStore.transaction;
                        var cursor = new FDBCursor_1.default(
                            this,
                            range,
                            direction,
                            request,
                            true,
                        );
                        return this.objectStore.transaction._execRequestAsync({
                            operation: cursor._iterate.bind(cursor),
                            request: request,
                            source: this,
                        });
                    };
                    FDBIndex.prototype.get = function(key) {
                        confirmActiveTransaction(this);
                        if (!(key instanceof FDBKeyRange_1.default)) {
                            key = valueToKey_1.default(key);
                        }
                        return this.objectStore.transaction._execRequestAsync({
                            operation: this._rawIndex.getValue.bind(
                                this._rawIndex,
                                key,
                            ),
                            source: this,
                        });
                    };
                    // http://w3c.github.io/IndexedDB/#dom-idbindex-getall
                    FDBIndex.prototype.getAll = function(query, count) {
                        if (arguments.length > 1 && count !== undefined) {
                            count = enforceRange_1.default(
                                count,
                                "unsigned long",
                            );
                        }
                        confirmActiveTransaction(this);
                        var range = valueToKeyRange_1.default(query);
                        return this.objectStore.transaction._execRequestAsync({
                            operation: this._rawIndex.getAllValues.bind(
                                this._rawIndex,
                                range,
                                count,
                            ),
                            source: this,
                        });
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBIndex-getKey-IDBRequest-any-key
                    FDBIndex.prototype.getKey = function(key) {
                        confirmActiveTransaction(this);
                        if (!(key instanceof FDBKeyRange_1.default)) {
                            key = valueToKey_1.default(key);
                        }
                        return this.objectStore.transaction._execRequestAsync({
                            operation: this._rawIndex.getKey.bind(
                                this._rawIndex,
                                key,
                            ),
                            source: this,
                        });
                    };
                    // http://w3c.github.io/IndexedDB/#dom-idbindex-getallkeys
                    FDBIndex.prototype.getAllKeys = function(query, count) {
                        if (arguments.length > 1 && count !== undefined) {
                            count = enforceRange_1.default(
                                count,
                                "unsigned long",
                            );
                        }
                        confirmActiveTransaction(this);
                        var range = valueToKeyRange_1.default(query);
                        return this.objectStore.transaction._execRequestAsync({
                            operation: this._rawIndex.getAllKeys.bind(
                                this._rawIndex,
                                range,
                                count,
                            ),
                            source: this,
                        });
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBIndex-count-IDBRequest-any-key
                    FDBIndex.prototype.count = function(key) {
                        var _this = this;
                        confirmActiveTransaction(this);
                        if (key === null) {
                            key = undefined;
                        }
                        if (
                            key !== undefined &&
                            !(key instanceof FDBKeyRange_1.default)
                        ) {
                            key = FDBKeyRange_1.default.only(
                                valueToKey_1.default(key),
                            );
                        }
                        return this.objectStore.transaction._execRequestAsync({
                            operation: function() {
                                var count = 0;
                                var cursor = new FDBCursor_1.default(
                                    _this,
                                    key,
                                );
                                while (cursor._iterate() !== null) {
                                    count += 1;
                                }
                                return count;
                            },
                            source: this,
                        });
                    };
                    FDBIndex.prototype.toString = function() {
                        return "[object IDBIndex]";
                    };
                    return FDBIndex;
                })();
                exports.default = FDBIndex;
            },
            {
                "./FDBCursor": 1,
                "./FDBCursorWithValue": 2,
                "./FDBKeyRange": 6,
                "./FDBRequest": 9,
                "./lib/enforceRange": 24,
                "./lib/errors": 25,
                "./lib/fakeDOMStringList": 27,
                "./lib/valueToKey": 31,
                "./lib/valueToKeyRange": 32,
            },
        ],
        6: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var cmp_1 = require("./lib/cmp");
                var errors_1 = require("./lib/errors");
                var valueToKey_1 = require("./lib/valueToKey");
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#range-concept
                var FDBKeyRange = /** @class */ (function() {
                    function FDBKeyRange(lower, upper, lowerOpen, upperOpen) {
                        this.lower = lower;
                        this.upper = upper;
                        this.lowerOpen = lowerOpen;
                        this.upperOpen = upperOpen;
                    }
                    FDBKeyRange.only = function(value) {
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        value = valueToKey_1.default(value);
                        return new FDBKeyRange(value, value, false, false);
                    };
                    FDBKeyRange.lowerBound = function(lower, open) {
                        if (open === void 0) {
                            open = false;
                        }
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        lower = valueToKey_1.default(lower);
                        return new FDBKeyRange(lower, undefined, open, true);
                    };
                    FDBKeyRange.upperBound = function(upper, open) {
                        if (open === void 0) {
                            open = false;
                        }
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        upper = valueToKey_1.default(upper);
                        return new FDBKeyRange(undefined, upper, true, open);
                    };
                    FDBKeyRange.bound = function(
                        lower,
                        upper,
                        lowerOpen,
                        upperOpen,
                    ) {
                        if (lowerOpen === void 0) {
                            lowerOpen = false;
                        }
                        if (upperOpen === void 0) {
                            upperOpen = false;
                        }
                        if (arguments.length < 2) {
                            throw new TypeError();
                        }
                        var cmpResult = cmp_1.default(lower, upper);
                        if (
                            cmpResult === 1 ||
                            (cmpResult === 0 && (lowerOpen || upperOpen))
                        ) {
                            throw new errors_1.DataError();
                        }
                        lower = valueToKey_1.default(lower);
                        upper = valueToKey_1.default(upper);
                        return new FDBKeyRange(
                            lower,
                            upper,
                            lowerOpen,
                            upperOpen,
                        );
                    };
                    // https://w3c.github.io/IndexedDB/#dom-idbkeyrange-includes
                    FDBKeyRange.prototype.includes = function(key) {
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        key = valueToKey_1.default(key);
                        if (this.lower !== undefined) {
                            var cmpResult = cmp_1.default(this.lower, key);
                            if (
                                cmpResult === 1 ||
                                (cmpResult === 0 && this.lowerOpen)
                            ) {
                                return false;
                            }
                        }
                        if (this.upper !== undefined) {
                            var cmpResult = cmp_1.default(this.upper, key);
                            if (
                                cmpResult === -1 ||
                                (cmpResult === 0 && this.upperOpen)
                            ) {
                                return false;
                            }
                        }
                        return true;
                    };
                    FDBKeyRange.prototype.toString = function() {
                        return "[object IDBKeyRange]";
                    };
                    return FDBKeyRange;
                })();
                exports.default = FDBKeyRange;
            },
            { "./lib/cmp": 23, "./lib/errors": 25, "./lib/valueToKey": 31 },
        ],
        7: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBCursor_1 = require("./FDBCursor");
                var FDBCursorWithValue_1 = require("./FDBCursorWithValue");
                var FDBIndex_1 = require("./FDBIndex");
                var FDBKeyRange_1 = require("./FDBKeyRange");
                var FDBRequest_1 = require("./FDBRequest");
                var canInjectKey_1 = require("./lib/canInjectKey");
                var enforceRange_1 = require("./lib/enforceRange");
                var errors_1 = require("./lib/errors");
                var extractKey_1 = require("./lib/extractKey");
                var fakeDOMStringList_1 = require("./lib/fakeDOMStringList");
                var Index_1 = require("./lib/Index");
                var structuredClone_1 = require("./lib/structuredClone");
                var validateKeyPath_1 = require("./lib/validateKeyPath");
                var valueToKey_1 = require("./lib/valueToKey");
                var valueToKeyRange_1 = require("./lib/valueToKeyRange");
                var confirmActiveTransaction = function(objectStore) {
                    if (objectStore._rawObjectStore.deleted) {
                        throw new errors_1.InvalidStateError();
                    }
                    if (objectStore.transaction._state !== "active") {
                        throw new errors_1.TransactionInactiveError();
                    }
                };
                var buildRecordAddPut = function(objectStore, value, key) {
                    confirmActiveTransaction(objectStore);
                    if (objectStore.transaction.mode === "readonly") {
                        throw new errors_1.ReadOnlyError();
                    }
                    if (objectStore.keyPath !== null) {
                        if (key !== undefined) {
                            throw new errors_1.DataError();
                        }
                    }
                    var clone = structuredClone_1.default(value);
                    if (objectStore.keyPath !== null) {
                        var tempKey = extractKey_1.default(
                            objectStore.keyPath,
                            clone,
                        );
                        if (tempKey !== undefined) {
                            valueToKey_1.default(tempKey);
                        } else {
                            if (!objectStore._rawObjectStore.keyGenerator) {
                                throw new errors_1.DataError();
                            } else if (
                                !canInjectKey_1.default(
                                    objectStore.keyPath,
                                    clone,
                                )
                            ) {
                                throw new errors_1.DataError();
                            }
                        }
                    }
                    if (
                        objectStore.keyPath === null &&
                        objectStore._rawObjectStore.keyGenerator === null &&
                        key === undefined
                    ) {
                        throw new errors_1.DataError();
                    }
                    if (key !== undefined) {
                        key = valueToKey_1.default(key);
                    }
                    return {
                        key: key,
                        value: clone,
                    };
                };
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#object-store
                var FDBObjectStore = /** @class */ (function() {
                    function FDBObjectStore(transaction, rawObjectStore) {
                        this._indexesCache = new Map();
                        this._rawObjectStore = rawObjectStore;
                        this._name = rawObjectStore.name;
                        this.keyPath = rawObjectStore.keyPath;
                        this.autoIncrement = rawObjectStore.autoIncrement;
                        this.transaction = transaction;
                        this.indexNames = fakeDOMStringList_1
                            .default(
                                Array.from(rawObjectStore.rawIndexes.keys()),
                            )
                            .sort();
                    }
                    Object.defineProperty(FDBObjectStore.prototype, "name", {
                        get: function() {
                            return this._name;
                        },
                        // http://w3c.github.io/IndexedDB/#dom-idbobjectstore-name
                        set: function(name) {
                            var _this = this;
                            var transaction = this.transaction;
                            if (
                                !transaction.db._runningVersionchangeTransaction
                            ) {
                                throw new errors_1.InvalidStateError();
                            }
                            confirmActiveTransaction(this);
                            name = String(name);
                            if (name === this._name) {
                                return;
                            }
                            if (
                                this._rawObjectStore.rawDatabase.rawObjectStores.has(
                                    name,
                                )
                            ) {
                                throw new errors_1.ConstraintError();
                            }
                            var oldName = this._name;
                            var oldObjectStoreNames = transaction.db.objectStoreNames.slice();
                            this._name = name;
                            this._rawObjectStore.name = name;
                            this.transaction._objectStoresCache.delete(oldName);
                            this.transaction._objectStoresCache.set(name, this);
                            this._rawObjectStore.rawDatabase.rawObjectStores.delete(
                                oldName,
                            );
                            this._rawObjectStore.rawDatabase.rawObjectStores.set(
                                name,
                                this._rawObjectStore,
                            );
                            transaction.db.objectStoreNames = fakeDOMStringList_1
                                .default(
                                    Array.from(
                                        this._rawObjectStore.rawDatabase.rawObjectStores.keys(),
                                    ).filter(function(objectStoreName) {
                                        var objectStore = _this._rawObjectStore.rawDatabase.rawObjectStores.get(
                                            objectStoreName,
                                        );
                                        return (
                                            objectStore && !objectStore.deleted
                                        );
                                    }),
                                )
                                .sort();
                            var oldScope = new Set(transaction._scope);
                            var oldTransactionObjectStoreNames = transaction.objectStoreNames.slice();
                            this.transaction._scope.delete(oldName);
                            transaction._scope.add(name);
                            transaction.objectStoreNames = fakeDOMStringList_1.default(
                                Array.from(transaction._scope).sort(),
                            );
                            transaction._rollbackLog.push(function() {
                                _this._name = oldName;
                                _this._rawObjectStore.name = oldName;
                                _this.transaction._objectStoresCache.delete(
                                    name,
                                );
                                _this.transaction._objectStoresCache.set(
                                    oldName,
                                    _this,
                                );
                                _this._rawObjectStore.rawDatabase.rawObjectStores.delete(
                                    name,
                                );
                                _this._rawObjectStore.rawDatabase.rawObjectStores.set(
                                    oldName,
                                    _this._rawObjectStore,
                                );
                                transaction.db.objectStoreNames = fakeDOMStringList_1.default(
                                    oldObjectStoreNames,
                                );
                                transaction._scope = oldScope;
                                transaction.objectStoreNames = fakeDOMStringList_1.default(
                                    oldTransactionObjectStoreNames,
                                );
                            });
                        },
                        enumerable: true,
                        configurable: true,
                    });
                    FDBObjectStore.prototype.put = function(value, key) {
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        var record = buildRecordAddPut(this, value, key);
                        return this.transaction._execRequestAsync({
                            operation: this._rawObjectStore.storeRecord.bind(
                                this._rawObjectStore,
                                record,
                                false,
                                this.transaction._rollbackLog,
                            ),
                            source: this,
                        });
                    };
                    FDBObjectStore.prototype.add = function(value, key) {
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        var record = buildRecordAddPut(this, value, key);
                        return this.transaction._execRequestAsync({
                            operation: this._rawObjectStore.storeRecord.bind(
                                this._rawObjectStore,
                                record,
                                true,
                                this.transaction._rollbackLog,
                            ),
                            source: this,
                        });
                    };
                    FDBObjectStore.prototype.delete = function(key) {
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        confirmActiveTransaction(this);
                        if (this.transaction.mode === "readonly") {
                            throw new errors_1.ReadOnlyError();
                        }
                        if (!(key instanceof FDBKeyRange_1.default)) {
                            key = valueToKey_1.default(key);
                        }
                        return this.transaction._execRequestAsync({
                            operation: this._rawObjectStore.deleteRecord.bind(
                                this._rawObjectStore,
                                key,
                                this.transaction._rollbackLog,
                            ),
                            source: this,
                        });
                    };
                    FDBObjectStore.prototype.get = function(key) {
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        confirmActiveTransaction(this);
                        if (!(key instanceof FDBKeyRange_1.default)) {
                            key = valueToKey_1.default(key);
                        }
                        return this.transaction._execRequestAsync({
                            operation: this._rawObjectStore.getValue.bind(
                                this._rawObjectStore,
                                key,
                            ),
                            source: this,
                        });
                    };
                    // http://w3c.github.io/IndexedDB/#dom-idbobjectstore-getall
                    FDBObjectStore.prototype.getAll = function(query, count) {
                        if (arguments.length > 1 && count !== undefined) {
                            count = enforceRange_1.default(
                                count,
                                "unsigned long",
                            );
                        }
                        confirmActiveTransaction(this);
                        var range = valueToKeyRange_1.default(query);
                        return this.transaction._execRequestAsync({
                            operation: this._rawObjectStore.getAllValues.bind(
                                this._rawObjectStore,
                                range,
                                count,
                            ),
                            source: this,
                        });
                    };
                    // http://w3c.github.io/IndexedDB/#dom-idbobjectstore-getkey
                    FDBObjectStore.prototype.getKey = function(key) {
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        confirmActiveTransaction(this);
                        if (!(key instanceof FDBKeyRange_1.default)) {
                            key = valueToKey_1.default(key);
                        }
                        return this.transaction._execRequestAsync({
                            operation: this._rawObjectStore.getKey.bind(
                                this._rawObjectStore,
                                key,
                            ),
                            source: this,
                        });
                    };
                    // http://w3c.github.io/IndexedDB/#dom-idbobjectstore-getallkeys
                    FDBObjectStore.prototype.getAllKeys = function(
                        query,
                        count,
                    ) {
                        if (arguments.length > 1 && count !== undefined) {
                            count = enforceRange_1.default(
                                count,
                                "unsigned long",
                            );
                        }
                        confirmActiveTransaction(this);
                        var range = valueToKeyRange_1.default(query);
                        return this.transaction._execRequestAsync({
                            operation: this._rawObjectStore.getAllKeys.bind(
                                this._rawObjectStore,
                                range,
                                count,
                            ),
                            source: this,
                        });
                    };
                    FDBObjectStore.prototype.clear = function() {
                        confirmActiveTransaction(this);
                        if (this.transaction.mode === "readonly") {
                            throw new errors_1.ReadOnlyError();
                        }
                        return this.transaction._execRequestAsync({
                            operation: this._rawObjectStore.clear.bind(
                                this._rawObjectStore,
                                this.transaction._rollbackLog,
                            ),
                            source: this,
                        });
                    };
                    FDBObjectStore.prototype.openCursor = function(
                        range,
                        direction,
                    ) {
                        confirmActiveTransaction(this);
                        if (range === null) {
                            range = undefined;
                        }
                        if (
                            range !== undefined &&
                            !(range instanceof FDBKeyRange_1.default)
                        ) {
                            range = FDBKeyRange_1.default.only(
                                valueToKey_1.default(range),
                            );
                        }
                        var request = new FDBRequest_1.default();
                        request.source = this;
                        request.transaction = this.transaction;
                        var cursor = new FDBCursorWithValue_1.default(
                            this,
                            range,
                            direction,
                            request,
                        );
                        return this.transaction._execRequestAsync({
                            operation: cursor._iterate.bind(cursor),
                            request: request,
                            source: this,
                        });
                    };
                    FDBObjectStore.prototype.openKeyCursor = function(
                        range,
                        direction,
                    ) {
                        confirmActiveTransaction(this);
                        if (range === null) {
                            range = undefined;
                        }
                        if (
                            range !== undefined &&
                            !(range instanceof FDBKeyRange_1.default)
                        ) {
                            range = FDBKeyRange_1.default.only(
                                valueToKey_1.default(range),
                            );
                        }
                        var request = new FDBRequest_1.default();
                        request.source = this;
                        request.transaction = this.transaction;
                        var cursor = new FDBCursor_1.default(
                            this,
                            range,
                            direction,
                            request,
                            true,
                        );
                        return this.transaction._execRequestAsync({
                            operation: cursor._iterate.bind(cursor),
                            request: request,
                            source: this,
                        });
                    };
                    // tslint:disable-next-line max-line-length
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBObjectStore-createIndex-IDBIndex-DOMString-name-DOMString-sequence-DOMString--keyPath-IDBIndexParameters-optionalParameters
                    FDBObjectStore.prototype.createIndex = function(
                        name,
                        keyPath,
                        optionalParameters,
                    ) {
                        var _this = this;
                        if (optionalParameters === void 0) {
                            optionalParameters = {};
                        }
                        if (arguments.length < 2) {
                            throw new TypeError();
                        }
                        var multiEntry =
                            optionalParameters.multiEntry !== undefined
                                ? optionalParameters.multiEntry
                                : false;
                        var unique =
                            optionalParameters.unique !== undefined
                                ? optionalParameters.unique
                                : false;
                        if (this.transaction.mode !== "versionchange") {
                            throw new errors_1.InvalidStateError();
                        }
                        confirmActiveTransaction(this);
                        if (this.indexNames.indexOf(name) >= 0) {
                            throw new errors_1.ConstraintError();
                        }
                        validateKeyPath_1.default(keyPath);
                        if (Array.isArray(keyPath) && multiEntry) {
                            throw new errors_1.InvalidAccessError();
                        }
                        // The index that is requested to be created can contain constraints on the data allowed in the index's
                        // referenced object store, such as requiring uniqueness of the values referenced by the index's keyPath. If the
                        // referenced object store already contains data which violates these constraints, this MUST NOT cause the
                        // implementation of createIndex to throw an exception or affect what it returns. The implementation MUST still
                        // create and return an IDBIndex object. Instead the implementation must queue up an operation to abort the
                        // "versionchange" transaction which was used for the createIndex call.
                        var indexNames = this.indexNames.slice();
                        this.transaction._rollbackLog.push(function() {
                            var index2 = _this._rawObjectStore.rawIndexes.get(
                                name,
                            );
                            if (index2) {
                                index2.deleted = true;
                            }
                            _this.indexNames = fakeDOMStringList_1.default(
                                indexNames,
                            );
                            _this._rawObjectStore.rawIndexes.delete(name);
                        });
                        var index = new Index_1.default(
                            this._rawObjectStore,
                            name,
                            keyPath,
                            multiEntry,
                            unique,
                        );
                        this.indexNames.push(name);
                        this.indexNames.sort();
                        this._rawObjectStore.rawIndexes.set(name, index);
                        index.initialize(this.transaction); // This is async by design
                        return new FDBIndex_1.default(this, index);
                    };
                    // https://w3c.github.io/IndexedDB/#dom-idbobjectstore-index
                    FDBObjectStore.prototype.index = function(name) {
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        if (
                            this._rawObjectStore.deleted ||
                            this.transaction._state === "finished"
                        ) {
                            throw new errors_1.InvalidStateError();
                        }
                        var index = this._indexesCache.get(name);
                        if (index !== undefined) {
                            return index;
                        }
                        var rawIndex = this._rawObjectStore.rawIndexes.get(
                            name,
                        );
                        if (
                            this.indexNames.indexOf(name) < 0 ||
                            rawIndex === undefined
                        ) {
                            throw new errors_1.NotFoundError();
                        }
                        var index2 = new FDBIndex_1.default(this, rawIndex);
                        this._indexesCache.set(name, index2);
                        return index2;
                    };
                    FDBObjectStore.prototype.deleteIndex = function(name) {
                        var _this = this;
                        if (arguments.length === 0) {
                            throw new TypeError();
                        }
                        if (this.transaction.mode !== "versionchange") {
                            throw new errors_1.InvalidStateError();
                        }
                        confirmActiveTransaction(this);
                        var rawIndex = this._rawObjectStore.rawIndexes.get(
                            name,
                        );
                        if (rawIndex === undefined) {
                            throw new errors_1.NotFoundError();
                        }
                        this.transaction._rollbackLog.push(function() {
                            rawIndex.deleted = false;
                            _this._rawObjectStore.rawIndexes.set(
                                name,
                                rawIndex,
                            );
                            _this.indexNames.push(name);
                            _this.indexNames.sort();
                        });
                        this.indexNames = fakeDOMStringList_1.default(
                            this.indexNames.filter(function(indexName) {
                                return indexName !== name;
                            }),
                        );
                        rawIndex.deleted = true; // Not sure if this is supposed to happen synchronously
                        this.transaction._execRequestAsync({
                            operation: function() {
                                var rawIndex2 = _this._rawObjectStore.rawIndexes.get(
                                    name,
                                );
                                // Hack in case another index is given this name before this async request is processed. It'd be better
                                // to have a real unique ID for each index.
                                if (rawIndex === rawIndex2) {
                                    _this._rawObjectStore.rawIndexes.delete(
                                        name,
                                    );
                                }
                            },
                            source: this,
                        });
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBObjectStore-count-IDBRequest-any-key
                    FDBObjectStore.prototype.count = function(key) {
                        var _this = this;
                        confirmActiveTransaction(this);
                        if (key === null) {
                            key = undefined;
                        }
                        if (
                            key !== undefined &&
                            !(key instanceof FDBKeyRange_1.default)
                        ) {
                            key = FDBKeyRange_1.default.only(
                                valueToKey_1.default(key),
                            );
                        }
                        return this.transaction._execRequestAsync({
                            operation: function() {
                                var count = 0;
                                var cursor = new FDBCursor_1.default(
                                    _this,
                                    key,
                                );
                                while (cursor._iterate() !== null) {
                                    count += 1;
                                }
                                return count;
                            },
                            source: this,
                        });
                    };
                    FDBObjectStore.prototype.toString = function() {
                        return "[object IDBObjectStore]";
                    };
                    return FDBObjectStore;
                })();
                exports.default = FDBObjectStore;
            },
            {
                "./FDBCursor": 1,
                "./FDBCursorWithValue": 2,
                "./FDBIndex": 5,
                "./FDBKeyRange": 6,
                "./FDBRequest": 9,
                "./lib/Index": 17,
                "./lib/canInjectKey": 22,
                "./lib/enforceRange": 24,
                "./lib/errors": 25,
                "./lib/extractKey": 26,
                "./lib/fakeDOMStringList": 27,
                "./lib/structuredClone": 29,
                "./lib/validateKeyPath": 30,
                "./lib/valueToKey": 31,
                "./lib/valueToKeyRange": 32,
            },
        ],
        8: [
            function(require, module, exports) {
                "use strict";
                var __extends =
                    (this && this.__extends) ||
                    (function() {
                        var extendStatics = function(d, b) {
                            extendStatics =
                                Object.setPrototypeOf ||
                                ({ __proto__: [] } instanceof Array &&
                                    function(d, b) {
                                        d.__proto__ = b;
                                    }) ||
                                function(d, b) {
                                    for (var p in b)
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                };
                            return extendStatics(d, b);
                        };
                        return function(d, b) {
                            extendStatics(d, b);
                            function __() {
                                this.constructor = d;
                            }
                            d.prototype =
                                b === null
                                    ? Object.create(b)
                                    : ((__.prototype = b.prototype), new __());
                        };
                    })();
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBRequest_1 = require("./FDBRequest");
                var FDBOpenDBRequest = /** @class */ (function(_super) {
                    __extends(FDBOpenDBRequest, _super);
                    function FDBOpenDBRequest() {
                        var _this =
                            (_super !== null &&
                                _super.apply(this, arguments)) ||
                            this;
                        _this.onupgradeneeded = null;
                        _this.onblocked = null;
                        return _this;
                    }
                    FDBOpenDBRequest.prototype.toString = function() {
                        return "[object IDBOpenDBRequest]";
                    };
                    return FDBOpenDBRequest;
                })(FDBRequest_1.default);
                exports.default = FDBOpenDBRequest;
            },
            { "./FDBRequest": 9 },
        ],
        9: [
            function(require, module, exports) {
                "use strict";
                var __extends =
                    (this && this.__extends) ||
                    (function() {
                        var extendStatics = function(d, b) {
                            extendStatics =
                                Object.setPrototypeOf ||
                                ({ __proto__: [] } instanceof Array &&
                                    function(d, b) {
                                        d.__proto__ = b;
                                    }) ||
                                function(d, b) {
                                    for (var p in b)
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                };
                            return extendStatics(d, b);
                        };
                        return function(d, b) {
                            extendStatics(d, b);
                            function __() {
                                this.constructor = d;
                            }
                            d.prototype =
                                b === null
                                    ? Object.create(b)
                                    : ((__.prototype = b.prototype), new __());
                        };
                    })();
                Object.defineProperty(exports, "__esModule", { value: true });
                var errors_1 = require("./lib/errors");
                var FakeEventTarget_1 = require("./lib/FakeEventTarget");
                var FDBRequest = /** @class */ (function(_super) {
                    __extends(FDBRequest, _super);
                    function FDBRequest() {
                        var _this =
                            (_super !== null &&
                                _super.apply(this, arguments)) ||
                            this;
                        _this._result = null;
                        _this._error = null;
                        _this.source = null;
                        _this.transaction = null;
                        _this.readyState = "pending";
                        _this.onsuccess = null;
                        _this.onerror = null;
                        return _this;
                    }
                    Object.defineProperty(FDBRequest.prototype, "error", {
                        get: function() {
                            if (this.readyState === "pending") {
                                throw new errors_1.InvalidStateError();
                            }
                            return this._error;
                        },
                        set: function(value) {
                            this._error = value;
                        },
                        enumerable: true,
                        configurable: true,
                    });
                    Object.defineProperty(FDBRequest.prototype, "result", {
                        get: function() {
                            if (this.readyState === "pending") {
                                throw new errors_1.InvalidStateError();
                            }
                            return this._result;
                        },
                        set: function(value) {
                            this._result = value;
                        },
                        enumerable: true,
                        configurable: true,
                    });
                    FDBRequest.prototype.toString = function() {
                        return "[object IDBRequest]";
                    };
                    return FDBRequest;
                })(FakeEventTarget_1.default);
                exports.default = FDBRequest;
            },
            { "./lib/FakeEventTarget": 16, "./lib/errors": 25 },
        ],
        10: [
            function(require, module, exports) {
                "use strict";
                var __extends =
                    (this && this.__extends) ||
                    (function() {
                        var extendStatics = function(d, b) {
                            extendStatics =
                                Object.setPrototypeOf ||
                                ({ __proto__: [] } instanceof Array &&
                                    function(d, b) {
                                        d.__proto__ = b;
                                    }) ||
                                function(d, b) {
                                    for (var p in b)
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                };
                            return extendStatics(d, b);
                        };
                        return function(d, b) {
                            extendStatics(d, b);
                            function __() {
                                this.constructor = d;
                            }
                            d.prototype =
                                b === null
                                    ? Object.create(b)
                                    : ((__.prototype = b.prototype), new __());
                        };
                    })();
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBObjectStore_1 = require("./FDBObjectStore");
                var FDBRequest_1 = require("./FDBRequest");
                var errors_1 = require("./lib/errors");
                var fakeDOMStringList_1 = require("./lib/fakeDOMStringList");
                var FakeEvent_1 = require("./lib/FakeEvent");
                var FakeEventTarget_1 = require("./lib/FakeEventTarget");
                var scheduling_1 = require("./lib/scheduling");
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#transaction
                var FDBTransaction = /** @class */ (function(_super) {
                    __extends(FDBTransaction, _super);
                    function FDBTransaction(storeNames, mode, db) {
                        var _this = _super.call(this) || this;
                        _this._state = "active";
                        _this._started = false;
                        _this._rollbackLog = [];
                        _this._objectStoresCache = new Map();
                        _this.error = null;
                        _this.onabort = null;
                        _this.oncomplete = null;
                        _this.onerror = null;
                        _this._requests = [];
                        _this._scope = new Set(storeNames);
                        _this.mode = mode;
                        _this.db = db;
                        _this.objectStoreNames = fakeDOMStringList_1.default(
                            Array.from(_this._scope).sort(),
                        );
                        return _this;
                    }
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-aborting-a-transaction
                    FDBTransaction.prototype._abort = function(errName) {
                        var e_1, _a, e_2, _b;
                        var _this = this;
                        try {
                            for (
                                var _c = __values(this._rollbackLog.reverse()),
                                    _d = _c.next();
                                !_d.done;
                                _d = _c.next()
                            ) {
                                var f = _d.value;
                                f();
                            }
                        } catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        } finally {
                            try {
                                if (_d && !_d.done && (_a = _c.return))
                                    _a.call(_c);
                            } finally {
                                if (e_1) throw e_1.error;
                            }
                        }
                        if (errName !== null) {
                            var e = new Error();
                            e.name = errName;
                            this.error = e;
                        }
                        try {
                            // Should this directly remove from _requests?
                            for (
                                var _e = __values(this._requests),
                                    _f = _e.next();
                                !_f.done;
                                _f = _e.next()
                            ) {
                                var request = _f.value.request;
                                if (request.readyState !== "done") {
                                    request.readyState = "done"; // This will cancel execution of this request's operation
                                    if (request.source) {
                                        request.result = undefined;
                                        request.error = new errors_1.AbortError();
                                        var event_1 = new FakeEvent_1.default(
                                            "error",
                                            {
                                                bubbles: true,
                                                cancelable: true,
                                            },
                                        );
                                        event_1.eventPath = [this.db, this];
                                        request.dispatchEvent(event_1);
                                    }
                                }
                            }
                        } catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        } finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return))
                                    _b.call(_e);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        scheduling_1.queueTask(function() {
                            var event = new FakeEvent_1.default("abort", {
                                bubbles: true,
                                cancelable: false,
                            });
                            event.eventPath = [_this.db];
                            _this.dispatchEvent(event);
                        });
                        this._state = "finished";
                    };
                    FDBTransaction.prototype.abort = function() {
                        if (
                            this._state === "committing" ||
                            this._state === "finished"
                        ) {
                            throw new errors_1.InvalidStateError();
                        }
                        this._state = "active";
                        this._abort(null);
                    };
                    // http://w3c.github.io/IndexedDB/#dom-idbtransaction-objectstore
                    FDBTransaction.prototype.objectStore = function(name) {
                        if (this._state !== "active") {
                            throw new errors_1.InvalidStateError();
                        }
                        var objectStore = this._objectStoresCache.get(name);
                        if (objectStore !== undefined) {
                            return objectStore;
                        }
                        var rawObjectStore = this.db._rawDatabase.rawObjectStores.get(
                            name,
                        );
                        if (
                            !this._scope.has(name) ||
                            rawObjectStore === undefined
                        ) {
                            throw new errors_1.NotFoundError();
                        }
                        var objectStore2 = new FDBObjectStore_1.default(
                            this,
                            rawObjectStore,
                        );
                        this._objectStoresCache.set(name, objectStore2);
                        return objectStore2;
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-asynchronously-executing-a-request
                    FDBTransaction.prototype._execRequestAsync = function(obj) {
                        var source = obj.source;
                        var operation = obj.operation;
                        var request = obj.hasOwnProperty("request")
                            ? obj.request
                            : null;
                        if (this._state !== "active") {
                            throw new errors_1.TransactionInactiveError();
                        }
                        // Request should only be passed for cursors
                        if (!request) {
                            if (!source) {
                                // Special requests like indexes that just need to run some code
                                request = new FDBRequest_1.default();
                            } else {
                                request = new FDBRequest_1.default();
                                request.source = source;
                                request.transaction = source.transaction;
                            }
                        }
                        this._requests.push({
                            operation: operation,
                            request: request,
                        });
                        return request;
                    };
                    FDBTransaction.prototype._start = function() {
                        this._started = true;
                        // Remove from request queue - cursor ones will be added back if necessary by cursor.continue and such
                        var operation;
                        var request;
                        while (this._requests.length > 0) {
                            var r = this._requests.shift();
                            // This should only be false if transaction was aborted
                            if (r && r.request.readyState !== "done") {
                                request = r.request;
                                operation = r.operation;
                                break;
                            }
                        }
                        if (request && operation) {
                            if (!request.source) {
                                // Special requests like indexes that just need to run some code, with error handling already built into
                                // operation
                                operation();
                            } else {
                                var defaultAction = void 0;
                                var event_2;
                                try {
                                    var result = operation();
                                    request.readyState = "done";
                                    request.result = result;
                                    request.error = undefined;
                                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-fire-a-success-event
                                    if (this._state === "inactive") {
                                        this._state = "active";
                                    }
                                    event_2 = new FakeEvent_1.default(
                                        "success",
                                        {
                                            bubbles: false,
                                            cancelable: false,
                                        },
                                    );
                                } catch (err) {
                                    request.readyState = "done";
                                    request.result = undefined;
                                    request.error = err;
                                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-fire-an-error-event
                                    if (this._state === "inactive") {
                                        this._state = "active";
                                    }
                                    event_2 = new FakeEvent_1.default("error", {
                                        bubbles: true,
                                        cancelable: true,
                                    });
                                    defaultAction = this._abort.bind(
                                        this,
                                        err.name,
                                    );
                                }
                                try {
                                    event_2.eventPath = [this.db, this];
                                    request.dispatchEvent(event_2);
                                } catch (err) {
                                    if (this._state !== "committing") {
                                        this._abort("AbortError");
                                    }
                                    throw err;
                                }
                                // Default action of event
                                if (!event_2.canceled) {
                                    if (defaultAction) {
                                        defaultAction();
                                    }
                                }
                            }
                            // Give it another chance for new handlers to be set before finishing
                            scheduling_1.queueTask(this._start.bind(this));
                            return;
                        }
                        // Check if transaction complete event needs to be fired
                        if (this._state !== "finished") {
                            this._state = "finished";
                            if (!this.error) {
                                var event_3 = new FakeEvent_1.default(
                                    "complete",
                                );
                                this.dispatchEvent(event_3);
                            }
                        }
                    };
                    FDBTransaction.prototype.commit = function() {
                        if (this._state !== "active") {
                            throw new errors_1.InvalidStateError();
                        }
                        this._state = "committing";
                    };
                    FDBTransaction.prototype.toString = function() {
                        return "[object IDBRequest]";
                    };
                    return FDBTransaction;
                })(FakeEventTarget_1.default);
                exports.default = FDBTransaction;
            },
            {
                "./FDBObjectStore": 7,
                "./FDBRequest": 9,
                "./lib/FakeEvent": 15,
                "./lib/FakeEventTarget": 16,
                "./lib/errors": 25,
                "./lib/fakeDOMStringList": 27,
                "./lib/scheduling": 28,
            },
        ],
        11: [
            function(require, module, exports) {
                "use strict";
                var __extends =
                    (this && this.__extends) ||
                    (function() {
                        var extendStatics = function(d, b) {
                            extendStatics =
                                Object.setPrototypeOf ||
                                ({ __proto__: [] } instanceof Array &&
                                    function(d, b) {
                                        d.__proto__ = b;
                                    }) ||
                                function(d, b) {
                                    for (var p in b)
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                };
                            return extendStatics(d, b);
                        };
                        return function(d, b) {
                            extendStatics(d, b);
                            function __() {
                                this.constructor = d;
                            }
                            d.prototype =
                                b === null
                                    ? Object.create(b)
                                    : ((__.prototype = b.prototype), new __());
                        };
                    })();
                Object.defineProperty(exports, "__esModule", { value: true });
                var FakeEvent_1 = require("./lib/FakeEvent");
                var FDBVersionChangeEvent = /** @class */ (function(_super) {
                    __extends(FDBVersionChangeEvent, _super);
                    function FDBVersionChangeEvent(type, parameters) {
                        if (parameters === void 0) {
                            parameters = {};
                        }
                        var _this = _super.call(this, type) || this;
                        _this.newVersion =
                            parameters.newVersion !== undefined
                                ? parameters.newVersion
                                : null;
                        _this.oldVersion =
                            parameters.oldVersion !== undefined
                                ? parameters.oldVersion
                                : 0;
                        return _this;
                    }
                    FDBVersionChangeEvent.prototype.toString = function() {
                        return "[object IDBVersionChangeEvent]";
                    };
                    return FDBVersionChangeEvent;
                })(FakeEvent_1.default);
                exports.default = FDBVersionChangeEvent;
            },
            { "./lib/FakeEvent": 15 },
        ],
        12: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBFactory_1 = require("./FDBFactory");
                var fakeIndexedDB = new FDBFactory_1.default();
                exports.default = fakeIndexedDB;
            },
            { "./FDBFactory": 4 },
        ],
        13: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var fakeIndexedDB_1 = require("./fakeIndexedDB");
                module.exports = fakeIndexedDB_1.default;
            },
            { "./fakeIndexedDB": 12 },
        ],
        14: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var scheduling_1 = require("./scheduling");
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-database
                var Database = /** @class */ (function() {
                    function Database(name, version) {
                        this.deletePending = false;
                        this.transactions = [];
                        this.rawObjectStores = new Map();
                        this.connections = [];
                        this.name = name;
                        this.version = version;
                        this.processTransactions = this.processTransactions.bind(
                            this,
                        );
                    }
                    Database.prototype.processTransactions = function() {
                        var _this = this;
                        scheduling_1.queueTask(function() {
                            var anyRunning = _this.transactions.some(function(
                                transaction,
                            ) {
                                return (
                                    transaction._started &&
                                    transaction._state !== "finished"
                                );
                            });
                            if (!anyRunning) {
                                var next = _this.transactions.find(function(
                                    transaction,
                                ) {
                                    return (
                                        !transaction._started &&
                                        transaction._state !== "finished"
                                    );
                                });
                                if (next) {
                                    next.addEventListener(
                                        "complete",
                                        _this.processTransactions,
                                    );
                                    next.addEventListener(
                                        "abort",
                                        _this.processTransactions,
                                    );
                                    next._start();
                                }
                            }
                        });
                    };
                    return Database;
                })();
                exports.default = Database;
            },
            { "./scheduling": 28 },
        ],
        15: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var Event = /** @class */ (function() {
                    function Event(type, eventInitDict) {
                        if (eventInitDict === void 0) {
                            eventInitDict = {};
                        }
                        this.eventPath = [];
                        this.NONE = 0;
                        this.CAPTURING_PHASE = 1;
                        this.AT_TARGET = 2;
                        this.BUBBLING_PHASE = 3;
                        // Flags
                        this.propagationStopped = false;
                        this.immediatePropagationStopped = false;
                        this.canceled = false;
                        this.initialized = true;
                        this.dispatched = false;
                        this.target = null;
                        this.currentTarget = null;
                        this.eventPhase = 0;
                        this.defaultPrevented = false;
                        this.isTrusted = false;
                        this.timeStamp = Date.now();
                        this.type = type;
                        this.bubbles =
                            eventInitDict.bubbles !== undefined
                                ? eventInitDict.bubbles
                                : false;
                        this.cancelable =
                            eventInitDict.cancelable !== undefined
                                ? eventInitDict.cancelable
                                : false;
                    }
                    Event.prototype.preventDefault = function() {
                        if (this.cancelable) {
                            this.canceled = true;
                        }
                    };
                    Event.prototype.stopPropagation = function() {
                        this.propagationStopped = true;
                    };
                    Event.prototype.stopImmediatePropagation = function() {
                        this.propagationStopped = true;
                        this.immediatePropagationStopped = true;
                    };
                    return Event;
                })();
                exports.default = Event;
            },
            {},
        ],
        16: [
            function(require, module, exports) {
                "use strict";
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                var errors_1 = require("./errors");
                var stopped = function(event, listener) {
                    return (
                        event.immediatePropagationStopped ||
                        (event.eventPhase === event.CAPTURING_PHASE &&
                            listener.capture === false) ||
                        (event.eventPhase === event.BUBBLING_PHASE &&
                            listener.capture === true)
                    );
                };
                // http://www.w3.org/TR/dom/#concept-event-listener-invoke
                var invokeEventListeners = function(event, obj) {
                    var e_1, _a;
                    event.currentTarget = obj;
                    try {
                        // The callback might cause obj.listeners to mutate as we traverse it.
                        // Take a copy of the array so that nothing sneaks in and we don't lose
                        // our place.
                        for (
                            var _b = __values(obj.listeners.slice()),
                                _c = _b.next();
                            !_c.done;
                            _c = _b.next()
                        ) {
                            var listener = _c.value;
                            if (
                                event.type !== listener.type ||
                                stopped(event, listener)
                            ) {
                                continue;
                            }
                            // @ts-ignore
                            listener.callback.call(event.currentTarget, event);
                        }
                    } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    } finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        } finally {
                            if (e_1) throw e_1.error;
                        }
                    }
                    var typeToProp = {
                        abort: "onabort",
                        blocked: "onblocked",
                        complete: "oncomplete",
                        error: "onerror",
                        success: "onsuccess",
                        upgradeneeded: "onupgradeneeded",
                        versionchange: "onversionchange",
                    };
                    var prop = typeToProp[event.type];
                    if (prop === undefined) {
                        throw new Error(
                            'Unknown event type: "' + event.type + '"',
                        );
                    }
                    var callback = event.currentTarget[prop];
                    if (callback) {
                        var listener = {
                            callback: callback,
                            capture: false,
                            type: event.type,
                        };
                        if (!stopped(event, listener)) {
                            // @ts-ignore
                            listener.callback.call(event.currentTarget, event);
                        }
                    }
                };
                var FakeEventTarget = /** @class */ (function() {
                    function FakeEventTarget() {
                        this.listeners = [];
                    }
                    FakeEventTarget.prototype.addEventListener = function(
                        type,
                        callback,
                        capture,
                    ) {
                        if (capture === void 0) {
                            capture = false;
                        }
                        this.listeners.push({
                            callback: callback,
                            capture: capture,
                            type: type,
                        });
                    };
                    FakeEventTarget.prototype.removeEventListener = function(
                        type,
                        callback,
                        capture,
                    ) {
                        if (capture === void 0) {
                            capture = false;
                        }
                        var i = this.listeners.findIndex(function(listener) {
                            return (
                                listener.type === type &&
                                listener.callback === callback &&
                                listener.capture === capture
                            );
                        });
                        this.listeners.splice(i, 1);
                    };
                    // http://www.w3.org/TR/dom/#dispatching-events
                    FakeEventTarget.prototype.dispatchEvent = function(event) {
                        var e_2, _a, e_3, _b;
                        if (event.dispatched || !event.initialized) {
                            throw new errors_1.InvalidStateError(
                                "The object is in an invalid state.",
                            );
                        }
                        event.isTrusted = false;
                        event.dispatched = true;
                        event.target = this;
                        // NOT SURE WHEN THIS SHOULD BE SET        event.eventPath = [];
                        event.eventPhase = event.CAPTURING_PHASE;
                        try {
                            for (
                                var _c = __values(event.eventPath),
                                    _d = _c.next();
                                !_d.done;
                                _d = _c.next()
                            ) {
                                var obj = _d.value;
                                if (!event.propagationStopped) {
                                    invokeEventListeners(event, obj);
                                }
                            }
                        } catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        } finally {
                            try {
                                if (_d && !_d.done && (_a = _c.return))
                                    _a.call(_c);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        event.eventPhase = event.AT_TARGET;
                        if (!event.propagationStopped) {
                            invokeEventListeners(event, event.target);
                        }
                        if (event.bubbles) {
                            event.eventPath.reverse();
                            event.eventPhase = event.BUBBLING_PHASE;
                            try {
                                for (
                                    var _e = __values(event.eventPath),
                                        _f = _e.next();
                                    !_f.done;
                                    _f = _e.next()
                                ) {
                                    var obj = _f.value;
                                    if (!event.propagationStopped) {
                                        invokeEventListeners(event, obj);
                                    }
                                }
                            } catch (e_3_1) {
                                e_3 = { error: e_3_1 };
                            } finally {
                                try {
                                    if (_f && !_f.done && (_b = _e.return))
                                        _b.call(_e);
                                } finally {
                                    if (e_3) throw e_3.error;
                                }
                            }
                        }
                        event.dispatched = false;
                        event.eventPhase = event.NONE;
                        event.currentTarget = null;
                        if (event.canceled) {
                            return false;
                        }
                        return true;
                    };
                    return FakeEventTarget;
                })();
                exports.default = FakeEventTarget;
            },
            { "./errors": 25 },
        ],
        17: [
            function(require, module, exports) {
                "use strict";
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                var errors_1 = require("./errors");
                var extractKey_1 = require("./extractKey");
                var RecordStore_1 = require("./RecordStore");
                var structuredClone_1 = require("./structuredClone");
                var valueToKey_1 = require("./valueToKey");
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-index
                var Index = /** @class */ (function() {
                    function Index(
                        rawObjectStore,
                        name,
                        keyPath,
                        multiEntry,
                        unique,
                    ) {
                        this.deleted = false;
                        // Initialized should be used to decide whether to throw an error or abort the versionchange transaction when there is a
                        // constraint
                        this.initialized = false;
                        this.records = new RecordStore_1.default();
                        this.rawObjectStore = rawObjectStore;
                        this.name = name;
                        this.keyPath = keyPath;
                        this.multiEntry = multiEntry;
                        this.unique = unique;
                    }
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-retrieving-a-value-from-an-index
                    Index.prototype.getKey = function(key) {
                        var record = this.records.get(key);
                        return record !== undefined ? record.value : undefined;
                    };
                    // http://w3c.github.io/IndexedDB/#retrieve-multiple-referenced-values-from-an-index
                    Index.prototype.getAllKeys = function(range, count) {
                        var e_1, _a;
                        if (count === undefined || count === 0) {
                            count = Infinity;
                        }
                        var records = [];
                        try {
                            for (
                                var _b = __values(this.records.values(range)),
                                    _c = _b.next();
                                !_c.done;
                                _c = _b.next()
                            ) {
                                var record = _c.value;
                                records.push(
                                    structuredClone_1.default(record.value),
                                );
                                if (records.length >= count) {
                                    break;
                                }
                            }
                        } catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            } finally {
                                if (e_1) throw e_1.error;
                            }
                        }
                        return records;
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#index-referenced-value-retrieval-operation
                    Index.prototype.getValue = function(key) {
                        var record = this.records.get(key);
                        return record !== undefined
                            ? this.rawObjectStore.getValue(record.value)
                            : undefined;
                    };
                    // http://w3c.github.io/IndexedDB/#retrieve-multiple-referenced-values-from-an-index
                    Index.prototype.getAllValues = function(range, count) {
                        var e_2, _a;
                        if (count === undefined || count === 0) {
                            count = Infinity;
                        }
                        var records = [];
                        try {
                            for (
                                var _b = __values(this.records.values(range)),
                                    _c = _b.next();
                                !_c.done;
                                _c = _b.next()
                            ) {
                                var record = _c.value;
                                records.push(
                                    this.rawObjectStore.getValue(record.value),
                                );
                                if (records.length >= count) {
                                    break;
                                }
                            }
                        } catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        return records;
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-storing-a-record-into-an-object-store (step 7)
                    Index.prototype.storeRecord = function(newRecord) {
                        var e_3, _a, e_4, _b, e_5, _c;
                        var indexKey;
                        try {
                            indexKey = extractKey_1.default(
                                this.keyPath,
                                newRecord.value,
                            );
                        } catch (err) {
                            if (err.name === "DataError") {
                                // Invalid key is not an actual error, just means we do not store an entry in this index
                                return;
                            }
                            throw err;
                        }
                        if (!this.multiEntry || !Array.isArray(indexKey)) {
                            try {
                                valueToKey_1.default(indexKey);
                            } catch (e) {
                                return;
                            }
                        } else {
                            // remove any elements from index key that are not valid keys and remove any duplicate elements from index
                            // key such that only one instance of the duplicate value remains.
                            var keep = [];
                            try {
                                for (
                                    var indexKey_1 = __values(indexKey),
                                        indexKey_1_1 = indexKey_1.next();
                                    !indexKey_1_1.done;
                                    indexKey_1_1 = indexKey_1.next()
                                ) {
                                    var part = indexKey_1_1.value;
                                    if (keep.indexOf(part) < 0) {
                                        try {
                                            keep.push(
                                                valueToKey_1.default(part),
                                            );
                                        } catch (err) {
                                            /* Do nothing */
                                        }
                                    }
                                }
                            } catch (e_3_1) {
                                e_3 = { error: e_3_1 };
                            } finally {
                                try {
                                    if (
                                        indexKey_1_1 &&
                                        !indexKey_1_1.done &&
                                        (_a = indexKey_1.return)
                                    )
                                        _a.call(indexKey_1);
                                } finally {
                                    if (e_3) throw e_3.error;
                                }
                            }
                            indexKey = keep;
                        }
                        if (!this.multiEntry || !Array.isArray(indexKey)) {
                            if (this.unique) {
                                var existingRecord = this.records.get(indexKey);
                                if (existingRecord) {
                                    throw new errors_1.ConstraintError();
                                }
                            }
                        } else {
                            if (this.unique) {
                                try {
                                    for (
                                        var indexKey_2 = __values(indexKey),
                                            indexKey_2_1 = indexKey_2.next();
                                        !indexKey_2_1.done;
                                        indexKey_2_1 = indexKey_2.next()
                                    ) {
                                        var individualIndexKey =
                                            indexKey_2_1.value;
                                        var existingRecord = this.records.get(
                                            individualIndexKey,
                                        );
                                        if (existingRecord) {
                                            throw new errors_1.ConstraintError();
                                        }
                                    }
                                } catch (e_4_1) {
                                    e_4 = { error: e_4_1 };
                                } finally {
                                    try {
                                        if (
                                            indexKey_2_1 &&
                                            !indexKey_2_1.done &&
                                            (_b = indexKey_2.return)
                                        )
                                            _b.call(indexKey_2);
                                    } finally {
                                        if (e_4) throw e_4.error;
                                    }
                                }
                            }
                        }
                        if (!this.multiEntry || !Array.isArray(indexKey)) {
                            this.records.add({
                                key: indexKey,
                                value: newRecord.key,
                            });
                        } else {
                            try {
                                for (
                                    var indexKey_3 = __values(indexKey),
                                        indexKey_3_1 = indexKey_3.next();
                                    !indexKey_3_1.done;
                                    indexKey_3_1 = indexKey_3.next()
                                ) {
                                    var individualIndexKey = indexKey_3_1.value;
                                    this.records.add({
                                        key: individualIndexKey,
                                        value: newRecord.key,
                                    });
                                }
                            } catch (e_5_1) {
                                e_5 = { error: e_5_1 };
                            } finally {
                                try {
                                    if (
                                        indexKey_3_1 &&
                                        !indexKey_3_1.done &&
                                        (_c = indexKey_3.return)
                                    )
                                        _c.call(indexKey_3);
                                } finally {
                                    if (e_5) throw e_5.error;
                                }
                            }
                        }
                    };
                    Index.prototype.initialize = function(transaction) {
                        var _this = this;
                        if (this.initialized) {
                            throw new Error("Index already initialized");
                        }
                        transaction._execRequestAsync({
                            operation: function() {
                                var e_6, _a;
                                try {
                                    try {
                                        // Create index based on current value of objectstore
                                        for (
                                            var _b = __values(
                                                    _this.rawObjectStore.records.values(),
                                                ),
                                                _c = _b.next();
                                            !_c.done;
                                            _c = _b.next()
                                        ) {
                                            var record = _c.value;
                                            _this.storeRecord(record);
                                        }
                                    } catch (e_6_1) {
                                        e_6 = { error: e_6_1 };
                                    } finally {
                                        try {
                                            if (
                                                _c &&
                                                !_c.done &&
                                                (_a = _b.return)
                                            )
                                                _a.call(_b);
                                        } finally {
                                            if (e_6) throw e_6.error;
                                        }
                                    }
                                    _this.initialized = true;
                                } catch (err) {
                                    // console.error(err);
                                    transaction._abort(err.name);
                                }
                            },
                            source: null,
                        });
                    };
                    return Index;
                })();
                exports.default = Index;
            },
            {
                "./RecordStore": 20,
                "./errors": 25,
                "./extractKey": 26,
                "./structuredClone": 29,
                "./valueToKey": 31,
            },
        ],
        18: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var errors_1 = require("./errors");
                var MAX_KEY = 9007199254740992;
                var KeyGenerator = /** @class */ (function() {
                    function KeyGenerator() {
                        // This is kind of wrong. Should start at 1 and increment only after record is saved
                        this.num = 0;
                    }
                    KeyGenerator.prototype.next = function() {
                        if (this.num >= MAX_KEY) {
                            throw new errors_1.ConstraintError();
                        }
                        this.num += 1;
                        return this.num;
                    };
                    // https://w3c.github.io/IndexedDB/#possibly-update-the-key-generator
                    KeyGenerator.prototype.setIfLarger = function(num) {
                        var value = Math.floor(Math.min(num, MAX_KEY)) - 1;
                        if (value >= this.num) {
                            this.num = value + 1;
                        }
                    };
                    return KeyGenerator;
                })();
                exports.default = KeyGenerator;
            },
            { "./errors": 25 },
        ],
        19: [
            function(require, module, exports) {
                "use strict";
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                var errors_1 = require("./errors");
                var extractKey_1 = require("./extractKey");
                var KeyGenerator_1 = require("./KeyGenerator");
                var RecordStore_1 = require("./RecordStore");
                var structuredClone_1 = require("./structuredClone");
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-object-store
                var ObjectStore = /** @class */ (function() {
                    function ObjectStore(
                        rawDatabase,
                        name,
                        keyPath,
                        autoIncrement,
                    ) {
                        this.deleted = false;
                        this.records = new RecordStore_1.default();
                        this.rawIndexes = new Map();
                        this.rawDatabase = rawDatabase;
                        this.keyGenerator =
                            autoIncrement === true
                                ? new KeyGenerator_1.default()
                                : null;
                        this.deleted = false;
                        this.name = name;
                        this.keyPath = keyPath;
                        this.autoIncrement = autoIncrement;
                    }
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-retrieving-a-value-from-an-object-store
                    ObjectStore.prototype.getKey = function(key) {
                        var record = this.records.get(key);
                        return record !== undefined
                            ? structuredClone_1.default(record.key)
                            : undefined;
                    };
                    // http://w3c.github.io/IndexedDB/#retrieve-multiple-keys-from-an-object-store
                    ObjectStore.prototype.getAllKeys = function(range, count) {
                        var e_1, _a;
                        if (count === undefined || count === 0) {
                            count = Infinity;
                        }
                        var records = [];
                        try {
                            for (
                                var _b = __values(this.records.values(range)),
                                    _c = _b.next();
                                !_c.done;
                                _c = _b.next()
                            ) {
                                var record = _c.value;
                                records.push(
                                    structuredClone_1.default(record.key),
                                );
                                if (records.length >= count) {
                                    break;
                                }
                            }
                        } catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            } finally {
                                if (e_1) throw e_1.error;
                            }
                        }
                        return records;
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-retrieving-a-value-from-an-object-store
                    ObjectStore.prototype.getValue = function(key) {
                        var record = this.records.get(key);
                        return record !== undefined
                            ? structuredClone_1.default(record.value)
                            : undefined;
                    };
                    // http://w3c.github.io/IndexedDB/#retrieve-multiple-values-from-an-object-store
                    ObjectStore.prototype.getAllValues = function(
                        range,
                        count,
                    ) {
                        var e_2, _a;
                        if (count === undefined || count === 0) {
                            count = Infinity;
                        }
                        var records = [];
                        try {
                            for (
                                var _b = __values(this.records.values(range)),
                                    _c = _b.next();
                                !_c.done;
                                _c = _b.next()
                            ) {
                                var record = _c.value;
                                records.push(
                                    structuredClone_1.default(record.value),
                                );
                                if (records.length >= count) {
                                    break;
                                }
                            }
                        } catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        return records;
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-storing-a-record-into-an-object-store
                    ObjectStore.prototype.storeRecord = function(
                        newRecord,
                        noOverwrite,
                        rollbackLog,
                    ) {
                        var e_3, _a;
                        var _this = this;
                        if (this.keyPath !== null) {
                            var key = extractKey_1.default(
                                this.keyPath,
                                newRecord.value,
                            );
                            if (key !== undefined) {
                                newRecord.key = key;
                            }
                        }
                        if (
                            this.keyGenerator !== null &&
                            newRecord.key === undefined
                        ) {
                            if (rollbackLog) {
                                var keyGeneratorBefore_1 = this.keyGenerator
                                    .num;
                                rollbackLog.push(function() {
                                    if (_this.keyGenerator) {
                                        _this.keyGenerator.num = keyGeneratorBefore_1;
                                    }
                                });
                            }
                            newRecord.key = this.keyGenerator.next();
                            // Set in value if keyPath defiend but led to no key
                            // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-to-assign-a-key-to-a-value-using-a-key-path
                            if (this.keyPath !== null) {
                                if (Array.isArray(this.keyPath)) {
                                    throw new Error(
                                        "Cannot have an array key path in an object store with a key generator",
                                    );
                                }
                                var remainingKeyPath = this.keyPath;
                                var object = newRecord.value;
                                var identifier = void 0;
                                var i = 0; // Just to run the loop at least once
                                while (i >= 0) {
                                    if (typeof object !== "object") {
                                        throw new errors_1.DataError();
                                    }
                                    i = remainingKeyPath.indexOf(".");
                                    if (i >= 0) {
                                        identifier = remainingKeyPath.slice(
                                            0,
                                            i,
                                        );
                                        remainingKeyPath = remainingKeyPath.slice(
                                            i + 1,
                                        );
                                        if (
                                            !object.hasOwnProperty(identifier)
                                        ) {
                                            object[identifier] = {};
                                        }
                                        object = object[identifier];
                                    }
                                }
                                identifier = remainingKeyPath;
                                object[identifier] = newRecord.key;
                            }
                        } else if (
                            this.keyGenerator !== null &&
                            typeof newRecord.key === "number"
                        ) {
                            this.keyGenerator.setIfLarger(newRecord.key);
                        }
                        var existingRecord = this.records.get(newRecord.key);
                        if (existingRecord) {
                            if (noOverwrite) {
                                throw new errors_1.ConstraintError();
                            }
                            this.deleteRecord(newRecord.key, rollbackLog);
                        }
                        this.records.add(newRecord);
                        if (rollbackLog) {
                            rollbackLog.push(function() {
                                _this.deleteRecord(newRecord.key);
                            });
                        }
                        try {
                            // Update indexes
                            for (
                                var _b = __values(this.rawIndexes.values()),
                                    _c = _b.next();
                                !_c.done;
                                _c = _b.next()
                            ) {
                                var rawIndex = _c.value;
                                if (rawIndex.initialized) {
                                    rawIndex.storeRecord(newRecord);
                                }
                            }
                        } catch (e_3_1) {
                            e_3 = { error: e_3_1 };
                        } finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            } finally {
                                if (e_3) throw e_3.error;
                            }
                        }
                        return newRecord.key;
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-deleting-records-from-an-object-store
                    ObjectStore.prototype.deleteRecord = function(
                        key,
                        rollbackLog,
                    ) {
                        var e_4, _a, e_5, _b;
                        var _this = this;
                        var deletedRecords = this.records.delete(key);
                        if (rollbackLog) {
                            var _loop_1 = function(record) {
                                rollbackLog.push(function() {
                                    _this.storeRecord(record, true);
                                });
                            };
                            try {
                                for (
                                    var deletedRecords_1 = __values(
                                            deletedRecords,
                                        ),
                                        deletedRecords_1_1 = deletedRecords_1.next();
                                    !deletedRecords_1_1.done;
                                    deletedRecords_1_1 = deletedRecords_1.next()
                                ) {
                                    var record = deletedRecords_1_1.value;
                                    _loop_1(record);
                                }
                            } catch (e_4_1) {
                                e_4 = { error: e_4_1 };
                            } finally {
                                try {
                                    if (
                                        deletedRecords_1_1 &&
                                        !deletedRecords_1_1.done &&
                                        (_a = deletedRecords_1.return)
                                    )
                                        _a.call(deletedRecords_1);
                                } finally {
                                    if (e_4) throw e_4.error;
                                }
                            }
                        }
                        try {
                            for (
                                var _c = __values(this.rawIndexes.values()),
                                    _d = _c.next();
                                !_d.done;
                                _d = _c.next()
                            ) {
                                var rawIndex = _d.value;
                                rawIndex.records.deleteByValue(key);
                            }
                        } catch (e_5_1) {
                            e_5 = { error: e_5_1 };
                        } finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return))
                                    _b.call(_c);
                            } finally {
                                if (e_5) throw e_5.error;
                            }
                        }
                    };
                    // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-clearing-an-object-store
                    ObjectStore.prototype.clear = function(rollbackLog) {
                        var e_6, _a, e_7, _b;
                        var _this = this;
                        var deletedRecords = this.records.clear();
                        if (rollbackLog) {
                            var _loop_2 = function(record) {
                                rollbackLog.push(function() {
                                    _this.storeRecord(record, true);
                                });
                            };
                            try {
                                for (
                                    var deletedRecords_2 = __values(
                                            deletedRecords,
                                        ),
                                        deletedRecords_2_1 = deletedRecords_2.next();
                                    !deletedRecords_2_1.done;
                                    deletedRecords_2_1 = deletedRecords_2.next()
                                ) {
                                    var record = deletedRecords_2_1.value;
                                    _loop_2(record);
                                }
                            } catch (e_6_1) {
                                e_6 = { error: e_6_1 };
                            } finally {
                                try {
                                    if (
                                        deletedRecords_2_1 &&
                                        !deletedRecords_2_1.done &&
                                        (_a = deletedRecords_2.return)
                                    )
                                        _a.call(deletedRecords_2);
                                } finally {
                                    if (e_6) throw e_6.error;
                                }
                            }
                        }
                        try {
                            for (
                                var _c = __values(this.rawIndexes.values()),
                                    _d = _c.next();
                                !_d.done;
                                _d = _c.next()
                            ) {
                                var rawIndex = _d.value;
                                rawIndex.records.clear();
                            }
                        } catch (e_7_1) {
                            e_7 = { error: e_7_1 };
                        } finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return))
                                    _b.call(_c);
                            } finally {
                                if (e_7) throw e_7.error;
                            }
                        }
                    };
                    return ObjectStore;
                })();
                exports.default = ObjectStore;
            },
            {
                "./KeyGenerator": 18,
                "./RecordStore": 20,
                "./errors": 25,
                "./extractKey": 26,
                "./structuredClone": 29,
            },
        ],
        20: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBKeyRange_1 = require("../FDBKeyRange");
                var binarySearch_1 = require("./binarySearch");
                var cmp_1 = require("./cmp");
                var RecordStore = /** @class */ (function() {
                    function RecordStore() {
                        this.records = [];
                    }
                    RecordStore.prototype.get = function(key) {
                        if (key instanceof FDBKeyRange_1.default) {
                            return binarySearch_1.getByKeyRange(
                                this.records,
                                key,
                            );
                        }
                        return binarySearch_1.getByKey(this.records, key);
                    };
                    RecordStore.prototype.add = function(newRecord) {
                        // Find where to put it so it's sorted by key
                        var i;
                        if (this.records.length === 0) {
                            i = 0;
                        } else {
                            i = binarySearch_1.getIndexByKeyGTE(
                                this.records,
                                newRecord.key,
                            );
                            if (i === -1) {
                                // If no matching key, add to end
                                i = this.records.length;
                            } else {
                                // If matching key, advance to appropriate position based on value (used in indexes)
                                while (
                                    i < this.records.length &&
                                    cmp_1.default(
                                        this.records[i].key,
                                        newRecord.key,
                                    ) === 0
                                ) {
                                    if (
                                        cmp_1.default(
                                            this.records[i].value,
                                            newRecord.value,
                                        ) !== -1
                                    ) {
                                        // Record value >= newRecord value, so insert here
                                        break;
                                    }
                                    i += 1; // Look at next record
                                }
                            }
                        }
                        this.records.splice(i, 0, newRecord);
                    };
                    RecordStore.prototype.delete = function(key) {
                        var deletedRecords = [];
                        var isRange = key instanceof FDBKeyRange_1.default;
                        while (true) {
                            var idx = isRange
                                ? binarySearch_1.getIndexByKeyRange(
                                      this.records,
                                      key,
                                  )
                                : binarySearch_1.getIndexByKey(
                                      this.records,
                                      key,
                                  );
                            if (idx === -1) {
                                break;
                            }
                            deletedRecords.push(this.records[idx]);
                            this.records.splice(idx, 1);
                        }
                        return deletedRecords;
                    };
                    RecordStore.prototype.deleteByValue = function(key) {
                        var range =
                            key instanceof FDBKeyRange_1.default
                                ? key
                                : FDBKeyRange_1.default.only(key);
                        var deletedRecords = [];
                        this.records = this.records.filter(function(record) {
                            var shouldDelete = range.includes(record.value);
                            if (shouldDelete) {
                                deletedRecords.push(record);
                            }
                            return !shouldDelete;
                        });
                        return deletedRecords;
                    };
                    RecordStore.prototype.clear = function() {
                        var deletedRecords = this.records.slice();
                        this.records = [];
                        return deletedRecords;
                    };
                    RecordStore.prototype.values = function(range, direction) {
                        var _a;
                        var _this = this;
                        if (direction === void 0) {
                            direction = "next";
                        }
                        return (
                            (_a = {}),
                            (_a[Symbol.iterator] = function() {
                                var i;
                                if (direction === "next") {
                                    i = 0;
                                    if (
                                        range !== undefined &&
                                        range.lower !== undefined
                                    ) {
                                        while (_this.records[i] !== undefined) {
                                            var cmpResult = cmp_1.default(
                                                _this.records[i].key,
                                                range.lower,
                                            );
                                            if (
                                                cmpResult === 1 ||
                                                (cmpResult === 0 &&
                                                    !range.lowerOpen)
                                            ) {
                                                break;
                                            }
                                            i += 1;
                                        }
                                    }
                                } else {
                                    i = _this.records.length - 1;
                                    if (
                                        range !== undefined &&
                                        range.upper !== undefined
                                    ) {
                                        while (_this.records[i] !== undefined) {
                                            var cmpResult = cmp_1.default(
                                                _this.records[i].key,
                                                range.upper,
                                            );
                                            if (
                                                cmpResult === -1 ||
                                                (cmpResult === 0 &&
                                                    !range.upperOpen)
                                            ) {
                                                break;
                                            }
                                            i -= 1;
                                        }
                                    }
                                }
                                return {
                                    next: function() {
                                        var done;
                                        var value;
                                        if (direction === "next") {
                                            value = _this.records[i];
                                            done = i >= _this.records.length;
                                            i += 1;
                                            if (
                                                !done &&
                                                range !== undefined &&
                                                range.upper !== undefined
                                            ) {
                                                var cmpResult = cmp_1.default(
                                                    value.key,
                                                    range.upper,
                                                );
                                                done =
                                                    cmpResult === 1 ||
                                                    (cmpResult === 0 &&
                                                        range.upperOpen);
                                                if (done) {
                                                    value = undefined;
                                                }
                                            }
                                        } else {
                                            value = _this.records[i];
                                            done = i < 0;
                                            i -= 1;
                                            if (
                                                !done &&
                                                range !== undefined &&
                                                range.lower !== undefined
                                            ) {
                                                var cmpResult = cmp_1.default(
                                                    value.key,
                                                    range.lower,
                                                );
                                                done =
                                                    cmpResult === -1 ||
                                                    (cmpResult === 0 &&
                                                        range.lowerOpen);
                                                if (done) {
                                                    value = undefined;
                                                }
                                            }
                                        }
                                        // The weird "as IteratorResult<Record>" is needed because of
                                        // https://github.com/Microsoft/TypeScript/issues/11375 and
                                        // https://github.com/Microsoft/TypeScript/issues/2983
                                        // tslint:disable-next-line no-object-literal-type-assertion
                                        return {
                                            done: done,
                                            value: value,
                                        };
                                    },
                                };
                            }),
                            _a
                        );
                    };
                    return RecordStore;
                })();
                exports.default = RecordStore;
            },
            { "../FDBKeyRange": 6, "./binarySearch": 21, "./cmp": 23 },
        ],
        21: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var cmp_1 = require("./cmp");
                /**
                 * Classic binary search implementation. Returns the index where the key
                 * should be inserted, assuming the records list is ordered.
                 */
                function binarySearch(records, key) {
                    var low = 0;
                    var high = records.length;
                    var mid;
                    while (low < high) {
                        // tslint:disable-next-line:no-bitwise
                        mid = (low + high) >>> 1; // like Math.floor((low + high) / 2) but fast
                        if (cmp_1.default(records[mid].key, key) < 0) {
                            low = mid + 1;
                        } else {
                            high = mid;
                        }
                    }
                    return low;
                }
                /**
                 * Equivalent to `records.findIndex(record => cmp(record.key, key) === 0)`
                 */
                function getIndexByKey(records, key) {
                    var idx = binarySearch(records, key);
                    var record = records[idx];
                    if (record && cmp_1.default(record.key, key) === 0) {
                        return idx;
                    }
                    return -1;
                }
                exports.getIndexByKey = getIndexByKey;
                /**
                 * Equivalent to `records.find(record => cmp(record.key, key) === 0)`
                 */
                function getByKey(records, key) {
                    var idx = getIndexByKey(records, key);
                    return records[idx];
                }
                exports.getByKey = getByKey;
                /**
                 * Equivalent to `records.findIndex(record => key.includes(record.key))`
                 */
                function getIndexByKeyRange(records, keyRange) {
                    var lowerIdx =
                        typeof keyRange.lower === "undefined"
                            ? 0
                            : binarySearch(records, keyRange.lower);
                    var upperIdx =
                        typeof keyRange.upper === "undefined"
                            ? records.length - 1
                            : binarySearch(records, keyRange.upper);
                    for (var i = lowerIdx; i <= upperIdx; i++) {
                        var record = records[i];
                        if (record && keyRange.includes(record.key)) {
                            return i;
                        }
                    }
                    return -1;
                }
                exports.getIndexByKeyRange = getIndexByKeyRange;
                /**
                 * Equivalent to `records.find(record => key.includes(record.key))`
                 */
                function getByKeyRange(records, keyRange) {
                    var idx = getIndexByKeyRange(records, keyRange);
                    return records[idx];
                }
                exports.getByKeyRange = getByKeyRange;
                /**
                 * Equivalent to `records.findIndex(record => cmp(record.key, key) >= 0)`
                 */
                function getIndexByKeyGTE(records, key) {
                    var idx = binarySearch(records, key);
                    var record = records[idx];
                    if (record && cmp_1.default(record.key, key) >= 0) {
                        return idx;
                    }
                    return -1;
                }
                exports.getIndexByKeyGTE = getIndexByKeyGTE;
            },
            { "./cmp": 23 },
        ],
        22: [
            function(require, module, exports) {
                "use strict";
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                // http://w3c.github.io/IndexedDB/#check-that-a-key-could-be-injected-into-a-value
                var canInjectKey = function(keyPath, value) {
                    var e_1, _a;
                    if (Array.isArray(keyPath)) {
                        // tslint:disable-next-line max-line-length
                        throw new Error(
                            "The key paths used in this section are always strings and never sequences, since it is not possible to create a object store which has a key generator and also has a key path that is a sequence.",
                        );
                    }
                    var identifiers = keyPath.split(".");
                    if (identifiers.length === 0) {
                        throw new Error("Assert: identifiers is not empty");
                    }
                    identifiers.pop();
                    try {
                        for (
                            var identifiers_1 = __values(identifiers),
                                identifiers_1_1 = identifiers_1.next();
                            !identifiers_1_1.done;
                            identifiers_1_1 = identifiers_1.next()
                        ) {
                            var identifier = identifiers_1_1.value;
                            if (
                                typeof value !== "object" &&
                                !Array.isArray(value)
                            ) {
                                return false;
                            }
                            var hop = value.hasOwnProperty(identifier);
                            if (!hop) {
                                return true;
                            }
                            value = value[identifier];
                        }
                    } catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    } finally {
                        try {
                            if (
                                identifiers_1_1 &&
                                !identifiers_1_1.done &&
                                (_a = identifiers_1.return)
                            )
                                _a.call(identifiers_1);
                        } finally {
                            if (e_1) throw e_1.error;
                        }
                    }
                    return typeof value === "object" || Array.isArray(value);
                };
                exports.default = canInjectKey;
            },
            {},
        ],
        23: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var errors_1 = require("./errors");
                var valueToKey_1 = require("./valueToKey");
                var getType = function(x) {
                    if (typeof x === "number") {
                        return "Number";
                    }
                    if (x instanceof Date) {
                        return "Date";
                    }
                    if (Array.isArray(x)) {
                        return "Array";
                    }
                    if (typeof x === "string") {
                        return "String";
                    }
                    if (x instanceof ArrayBuffer) {
                        return "Binary";
                    }
                    throw new errors_1.DataError();
                };
                // https://w3c.github.io/IndexedDB/#compare-two-keys
                var cmp = function(first, second) {
                    if (second === undefined) {
                        throw new TypeError();
                    }
                    first = valueToKey_1.default(first);
                    second = valueToKey_1.default(second);
                    var t1 = getType(first);
                    var t2 = getType(second);
                    if (t1 !== t2) {
                        if (t1 === "Array") {
                            return 1;
                        }
                        if (
                            t1 === "Binary" &&
                            (t2 === "String" ||
                                t2 === "Date" ||
                                t2 === "Number")
                        ) {
                            return 1;
                        }
                        if (
                            t1 === "String" &&
                            (t2 === "Date" || t2 === "Number")
                        ) {
                            return 1;
                        }
                        if (t1 === "Date" && t2 === "Number") {
                            return 1;
                        }
                        return -1;
                    }
                    if (t1 === "Binary") {
                        first = new Uint8Array(first);
                        second = new Uint8Array(second);
                    }
                    if (t1 === "Array" || t1 === "Binary") {
                        var length_1 = Math.min(first.length, second.length);
                        for (var i = 0; i < length_1; i++) {
                            var result = cmp(first[i], second[i]);
                            if (result !== 0) {
                                return result;
                            }
                        }
                        if (first.length > second.length) {
                            return 1;
                        }
                        if (first.length < second.length) {
                            return -1;
                        }
                        return 0;
                    }
                    if (t1 === "Date") {
                        if (first.getTime() === second.getTime()) {
                            return 0;
                        }
                    } else {
                        if (first === second) {
                            return 0;
                        }
                    }
                    return first > second ? 1 : -1;
                };
                exports.default = cmp;
            },
            { "./errors": 25, "./valueToKey": 31 },
        ],
        24: [
            function(require, module, exports) {
                "use strict";
                // https://heycam.github.io/webidl/#EnforceRange
                Object.defineProperty(exports, "__esModule", { value: true });
                var enforceRange = function(num, type) {
                    var min = 0;
                    var max =
                        type === "unsigned long"
                            ? 4294967295
                            : 9007199254740991;
                    if (isNaN(num) || num < min || num > max) {
                        throw new TypeError();
                    }
                    if (num >= 0) {
                        return Math.floor(num);
                    }
                };
                exports.default = enforceRange;
            },
            {},
        ],
        25: [
            function(require, module, exports) {
                "use strict";
                /* tslint:disable: max-classes-per-file max-line-length */
                var __extends =
                    (this && this.__extends) ||
                    (function() {
                        var extendStatics = function(d, b) {
                            extendStatics =
                                Object.setPrototypeOf ||
                                ({ __proto__: [] } instanceof Array &&
                                    function(d, b) {
                                        d.__proto__ = b;
                                    }) ||
                                function(d, b) {
                                    for (var p in b)
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                };
                            return extendStatics(d, b);
                        };
                        return function(d, b) {
                            extendStatics(d, b);
                            function __() {
                                this.constructor = d;
                            }
                            d.prototype =
                                b === null
                                    ? Object.create(b)
                                    : ((__.prototype = b.prototype), new __());
                        };
                    })();
                Object.defineProperty(exports, "__esModule", { value: true });
                var messages = {
                    AbortError:
                        "A request was aborted, for example through a call to IDBTransaction.abort.",
                    ConstraintError:
                        "A mutation operation in the transaction failed because a constraint was not satisfied. For example, an object such as an object store or index already exists and a request attempted to create a new one.",
                    DataCloneError:
                        "The data being stored could not be cloned by the internal structured cloning algorithm.",
                    DataError:
                        "Data provided to an operation does not meet requirements.",
                    InvalidAccessError:
                        "An invalid operation was performed on an object. For example transaction creation attempt was made, but an empty scope was provided.",
                    InvalidStateError:
                        "An operation was called on an object on which it is not allowed or at a time when it is not allowed. Also occurs if a request is made on a source object that has been deleted or removed. Use TransactionInactiveError or ReadOnlyError when possible, as they are more specific variations of InvalidStateError.",
                    NotFoundError:
                        "The operation failed because the requested database object could not be found. For example, an object store did not exist but was being opened.",
                    ReadOnlyError:
                        'The mutating operation was attempted in a "readonly" transaction.',
                    TransactionInactiveError:
                        "A request was placed against a transaction which is currently not active, or which is finished.",
                    VersionError:
                        "An attempt was made to open a database using a lower version than the existing version.",
                };
                var AbortError = /** @class */ (function(_super) {
                    __extends(AbortError, _super);
                    function AbortError(message) {
                        if (message === void 0) {
                            message = messages.AbortError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "AbortError";
                        _this.message = message;
                        return _this;
                    }
                    return AbortError;
                })(Error);
                exports.AbortError = AbortError;
                var ConstraintError = /** @class */ (function(_super) {
                    __extends(ConstraintError, _super);
                    function ConstraintError(message) {
                        if (message === void 0) {
                            message = messages.ConstraintError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "ConstraintError";
                        _this.message = message;
                        return _this;
                    }
                    return ConstraintError;
                })(Error);
                exports.ConstraintError = ConstraintError;
                var DataCloneError = /** @class */ (function(_super) {
                    __extends(DataCloneError, _super);
                    function DataCloneError(message) {
                        if (message === void 0) {
                            message = messages.DataCloneError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "DataCloneError";
                        _this.message = message;
                        return _this;
                    }
                    return DataCloneError;
                })(Error);
                exports.DataCloneError = DataCloneError;
                var DataError = /** @class */ (function(_super) {
                    __extends(DataError, _super);
                    function DataError(message) {
                        if (message === void 0) {
                            message = messages.DataError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "DataError";
                        _this.message = message;
                        return _this;
                    }
                    return DataError;
                })(Error);
                exports.DataError = DataError;
                var InvalidAccessError = /** @class */ (function(_super) {
                    __extends(InvalidAccessError, _super);
                    function InvalidAccessError(message) {
                        if (message === void 0) {
                            message = messages.InvalidAccessError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "InvalidAccessError";
                        _this.message = message;
                        return _this;
                    }
                    return InvalidAccessError;
                })(Error);
                exports.InvalidAccessError = InvalidAccessError;
                var InvalidStateError = /** @class */ (function(_super) {
                    __extends(InvalidStateError, _super);
                    function InvalidStateError(message) {
                        if (message === void 0) {
                            message = messages.InvalidStateError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "InvalidStateError";
                        _this.message = message;
                        return _this;
                    }
                    return InvalidStateError;
                })(Error);
                exports.InvalidStateError = InvalidStateError;
                var NotFoundError = /** @class */ (function(_super) {
                    __extends(NotFoundError, _super);
                    function NotFoundError(message) {
                        if (message === void 0) {
                            message = messages.NotFoundError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "NotFoundError";
                        _this.message = message;
                        return _this;
                    }
                    return NotFoundError;
                })(Error);
                exports.NotFoundError = NotFoundError;
                var ReadOnlyError = /** @class */ (function(_super) {
                    __extends(ReadOnlyError, _super);
                    function ReadOnlyError(message) {
                        if (message === void 0) {
                            message = messages.ReadOnlyError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "ReadOnlyError";
                        _this.message = message;
                        return _this;
                    }
                    return ReadOnlyError;
                })(Error);
                exports.ReadOnlyError = ReadOnlyError;
                var TransactionInactiveError = /** @class */ (function(_super) {
                    __extends(TransactionInactiveError, _super);
                    function TransactionInactiveError(message) {
                        if (message === void 0) {
                            message = messages.TransactionInactiveError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "TransactionInactiveError";
                        _this.message = message;
                        return _this;
                    }
                    return TransactionInactiveError;
                })(Error);
                exports.TransactionInactiveError = TransactionInactiveError;
                var VersionError = /** @class */ (function(_super) {
                    __extends(VersionError, _super);
                    function VersionError(message) {
                        if (message === void 0) {
                            message = messages.VersionError;
                        }
                        var _this = _super.call(this) || this;
                        _this.name = "VersionError";
                        _this.message = message;
                        return _this;
                    }
                    return VersionError;
                })(Error);
                exports.VersionError = VersionError;
            },
            {},
        ],
        26: [
            function(require, module, exports) {
                "use strict";
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                var valueToKey_1 = require("./valueToKey");
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-steps-for-extracting-a-key-from-a-value-using-a-key-path
                var extractKey = function(keyPath, value) {
                    var e_1, _a;
                    if (Array.isArray(keyPath)) {
                        var result = [];
                        try {
                            for (
                                var keyPath_1 = __values(keyPath),
                                    keyPath_1_1 = keyPath_1.next();
                                !keyPath_1_1.done;
                                keyPath_1_1 = keyPath_1.next()
                            ) {
                                var item = keyPath_1_1.value;
                                // This doesn't make sense to me based on the spec, but it is needed to pass the W3C KeyPath tests (see same
                                // comment in validateKeyPath)
                                if (
                                    item !== undefined &&
                                    item !== null &&
                                    typeof item !== "string" &&
                                    item.toString
                                ) {
                                    item = item.toString();
                                }
                                result.push(
                                    valueToKey_1.default(
                                        extractKey(item, value),
                                    ),
                                );
                            }
                        } catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        } finally {
                            try {
                                if (
                                    keyPath_1_1 &&
                                    !keyPath_1_1.done &&
                                    (_a = keyPath_1.return)
                                )
                                    _a.call(keyPath_1);
                            } finally {
                                if (e_1) throw e_1.error;
                            }
                        }
                        return result;
                    }
                    if (keyPath === "") {
                        return value;
                    }
                    var remainingKeyPath = keyPath;
                    var object = value;
                    while (remainingKeyPath !== null) {
                        var identifier = void 0;
                        var i = remainingKeyPath.indexOf(".");
                        if (i >= 0) {
                            identifier = remainingKeyPath.slice(0, i);
                            remainingKeyPath = remainingKeyPath.slice(i + 1);
                        } else {
                            identifier = remainingKeyPath;
                            remainingKeyPath = null;
                        }
                        if (
                            object === undefined ||
                            object === null ||
                            !object.hasOwnProperty(identifier)
                        ) {
                            return;
                        }
                        object = object[identifier];
                    }
                    return object;
                };
                exports.default = extractKey;
            },
            { "./valueToKey": 31 },
        ],
        27: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                // Would be nicer to sublcass Array, but I'd have to sacrifice Node 4 support to do that.
                var fakeDOMStringList = function(arr) {
                    var arr2 = arr.slice();
                    Object.defineProperty(arr2, "contains", {
                        // tslint:disable-next-line object-literal-shorthand
                        value: function(value) {
                            return arr2.indexOf(value) >= 0;
                        },
                    });
                    Object.defineProperty(arr2, "item", {
                        // tslint:disable-next-line object-literal-shorthand
                        value: function(i) {
                            return arr2[i];
                        },
                    });
                    return arr2;
                };
                exports.default = fakeDOMStringList;
            },
            {},
        ],
        28: [
            function(require, module, exports) {
                (function(global) {
                    "use strict";
                    Object.defineProperty(exports, "__esModule", {
                        value: true,
                    });
                    // When running within Node.js (including jsdom), we want to use setImmediate
                    // (which runs immediately) rather than setTimeout (which enforces a minimum
                    // delay of 1ms, and on Windows only has a resolution of 15ms or so).  jsdom
                    // doesn't provide setImmediate (to better match the browser environment) and
                    // sandboxes scripts, but its sandbox is by necessity imperfect, so we can break
                    // out of it:
                    //
                    // - https://github.com/jsdom/jsdom#executing-scripts
                    // - https://github.com/jsdom/jsdom/issues/2729
                    // - https://github.com/scala-js/scala-js-macrotask-executor/pull/17
                    function getSetImmediateFromJsdom() {
                        if (
                            typeof navigator !== "undefined" &&
                            /jsdom/.test(navigator.userAgent)
                        ) {
                            var outerRealmFunctionConstructor =
                                Node.constructor;
                            return new outerRealmFunctionConstructor(
                                "return setImmediate",
                            )();
                        } else {
                            return undefined;
                        }
                    }
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
                    // Remove this after dropping Node 8 support
                    // tslint:disable-next-line
                    var getGlobal = function() {
                        if (typeof globalThis !== "undefined") {
                            return globalThis;
                        }
                        if (typeof global !== "undefined") {
                            return global;
                        }
                        if (typeof self !== "undefined") {
                            return self;
                        }
                        if (typeof window !== "undefined") {
                            return window;
                        }
                        throw new Error("unable to locate global object");
                    };
                    var globals = getGlobal();
                    // Schedules a task to run later.  Use Node.js's setImmediate if available and
                    // setTimeout otherwise.  Note that options like process.nextTick or
                    // queueMicrotask will likely not work: IndexedDB semantics require that
                    // transactions are marked as not active when the event loop runs. The next
                    // tick queue and microtask queue run within the current event loop macrotask,
                    // so they'd process database operations too quickly.
                    exports.queueTask =
                        globals.setImmediate ||
                        getSetImmediateFromJsdom() ||
                        function(fn) {
                            return setTimeout(fn, 0);
                        };
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {},
                ));
            },
            {},
        ],
        29: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var realisticStructuredClone = require("realistic-structured-clone"); // tslint:disable-line no-var-requires
                var errors_1 = require("./errors");
                var structuredClone = function(input) {
                    try {
                        return realisticStructuredClone(input);
                    } catch (err) {
                        throw new errors_1.DataCloneError();
                    }
                };
                exports.default = structuredClone;
            },
            { "./errors": 25, "realistic-structured-clone": 402 },
        ],
        30: [
            function(require, module, exports) {
                "use strict";
                var __values =
                    (this && this.__values) ||
                    function(o) {
                        var s = typeof Symbol === "function" && Symbol.iterator,
                            m = s && o[s],
                            i = 0;
                        if (m) return m.call(o);
                        if (o && typeof o.length === "number")
                            return {
                                next: function() {
                                    if (o && i >= o.length) o = void 0;
                                    return { value: o && o[i++], done: !o };
                                },
                            };
                        throw new TypeError(
                            s
                                ? "Object is not iterable."
                                : "Symbol.iterator is not defined.",
                        );
                    };
                Object.defineProperty(exports, "__esModule", { value: true });
                // http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#dfn-valid-key-path
                var validateKeyPath = function(keyPath, parent) {
                    var e_1, _a, e_2, _b;
                    // This doesn't make sense to me based on the spec, but it is needed to pass the W3C KeyPath tests (see same
                    // comment in extractKey)
                    if (
                        keyPath !== undefined &&
                        keyPath !== null &&
                        typeof keyPath !== "string" &&
                        keyPath.toString &&
                        (parent === "array" || !Array.isArray(keyPath))
                    ) {
                        keyPath = keyPath.toString();
                    }
                    if (typeof keyPath === "string") {
                        if (keyPath === "" && parent !== "string") {
                            return;
                        }
                        try {
                            // https://mathiasbynens.be/demo/javascript-identifier-regex for ECMAScript 5.1 / Unicode v7.0.0, with
                            // reserved words at beginning removed
                            // tslint:disable-next-line max-line-length
                            var validIdentifierRegex = /^(?:[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC])(?:[\$0-9A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC])*$/;
                            if (
                                keyPath.length >= 1 &&
                                validIdentifierRegex.test(keyPath)
                            ) {
                                return;
                            }
                        } catch (err) {
                            throw new SyntaxError(err.message);
                        }
                        if (keyPath.indexOf(" ") >= 0) {
                            throw new SyntaxError(
                                "The keypath argument contains an invalid key path (no spaces allowed).",
                            );
                        }
                    }
                    if (Array.isArray(keyPath) && keyPath.length > 0) {
                        if (parent) {
                            // No nested arrays
                            throw new SyntaxError(
                                "The keypath argument contains an invalid key path (nested arrays).",
                            );
                        }
                        try {
                            for (
                                var keyPath_1 = __values(keyPath),
                                    keyPath_1_1 = keyPath_1.next();
                                !keyPath_1_1.done;
                                keyPath_1_1 = keyPath_1.next()
                            ) {
                                var part = keyPath_1_1.value;
                                validateKeyPath(part, "array");
                            }
                        } catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        } finally {
                            try {
                                if (
                                    keyPath_1_1 &&
                                    !keyPath_1_1.done &&
                                    (_a = keyPath_1.return)
                                )
                                    _a.call(keyPath_1);
                            } finally {
                                if (e_1) throw e_1.error;
                            }
                        }
                        return;
                    } else if (
                        typeof keyPath === "string" &&
                        keyPath.indexOf(".") >= 0
                    ) {
                        keyPath = keyPath.split(".");
                        try {
                            for (
                                var keyPath_2 = __values(keyPath),
                                    keyPath_2_1 = keyPath_2.next();
                                !keyPath_2_1.done;
                                keyPath_2_1 = keyPath_2.next()
                            ) {
                                var part = keyPath_2_1.value;
                                validateKeyPath(part, "string");
                            }
                        } catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        } finally {
                            try {
                                if (
                                    keyPath_2_1 &&
                                    !keyPath_2_1.done &&
                                    (_b = keyPath_2.return)
                                )
                                    _b.call(keyPath_2);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        return;
                    }
                    throw new SyntaxError();
                };
                exports.default = validateKeyPath;
            },
            {},
        ],
        31: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var errors_1 = require("./errors");
                // https://w3c.github.io/IndexedDB/#convert-a-value-to-a-input
                var valueToKey = function(input, seen) {
                    if (typeof input === "number") {
                        if (isNaN(input)) {
                            throw new errors_1.DataError();
                        }
                        return input;
                    } else if (input instanceof Date) {
                        var ms = input.valueOf();
                        if (isNaN(ms)) {
                            throw new errors_1.DataError();
                        }
                        return new Date(ms);
                    } else if (typeof input === "string") {
                        return input;
                    } else if (
                        input instanceof ArrayBuffer ||
                        (typeof ArrayBuffer !== "undefined" &&
                            ArrayBuffer.isView &&
                            ArrayBuffer.isView(input))
                    ) {
                        if (input instanceof ArrayBuffer) {
                            return new Uint8Array(input).buffer;
                        }
                        return new Uint8Array(input.buffer).buffer;
                    } else if (Array.isArray(input)) {
                        if (seen === undefined) {
                            seen = new Set();
                        } else if (seen.has(input)) {
                            throw new errors_1.DataError();
                        }
                        seen.add(input);
                        var keys = [];
                        for (var i = 0; i < input.length; i++) {
                            var hop = input.hasOwnProperty(i);
                            if (!hop) {
                                throw new errors_1.DataError();
                            }
                            var entry = input[i];
                            var key = valueToKey(entry, seen);
                            keys.push(key);
                        }
                        return keys;
                    } else {
                        throw new errors_1.DataError();
                    }
                };
                exports.default = valueToKey;
            },
            { "./errors": 25 },
        ],
        32: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: true });
                var FDBKeyRange_1 = require("../FDBKeyRange");
                var errors_1 = require("./errors");
                var valueToKey_1 = require("./valueToKey");
                // http://w3c.github.io/IndexedDB/#convert-a-value-to-a-key-range
                var valueToKeyRange = function(value, nullDisallowedFlag) {
                    if (nullDisallowedFlag === void 0) {
                        nullDisallowedFlag = false;
                    }
                    if (value instanceof FDBKeyRange_1.default) {
                        return value;
                    }
                    if (value === null || value === undefined) {
                        if (nullDisallowedFlag) {
                            throw new errors_1.DataError();
                        }
                        return new FDBKeyRange_1.default(
                            undefined,
                            undefined,
                            false,
                            false,
                        );
                    }
                    var key = valueToKey_1.default(value);
                    return FDBKeyRange_1.default.only(key);
                };
                exports.default = valueToKeyRange;
            },
            { "../FDBKeyRange": 6, "./errors": 25, "./valueToKey": 31 },
        ],
        33: [
            function(require, module, exports) {
                "use strict";
                require("core-js/stable");
                window.indexedDBmock = require("../..");
                window.IDBKeyRangemock = require("../../FDBKeyRange").default;
            },
            { "../..": 13, "../../FDBKeyRange": 6, "core-js/stable": 399 },
        ],
        34: [
            function(require, module, exports) {
                "use strict";

                exports.byteLength = byteLength;
                exports.toByteArray = toByteArray;
                exports.fromByteArray = fromByteArray;

                var lookup = [];
                var revLookup = [];
                var Arr =
                    typeof Uint8Array !== "undefined" ? Uint8Array : Array;

                var code =
                    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                for (var i = 0, len = code.length; i < len; ++i) {
                    lookup[i] = code[i];
                    revLookup[code.charCodeAt(i)] = i;
                }

                // Support decoding URL-safe base64 strings, as Node.js does.
                // See: https://en.wikipedia.org/wiki/Base64#URL_applications
                revLookup["-".charCodeAt(0)] = 62;
                revLookup["_".charCodeAt(0)] = 63;

                function getLens(b64) {
                    var len = b64.length;

                    if (len % 4 > 0) {
                        throw new Error(
                            "Invalid string. Length must be a multiple of 4",
                        );
                    }

                    // Trim off extra bytes after placeholder bytes are found
                    // See: https://github.com/beatgammit/base64-js/issues/42
                    var validLen = b64.indexOf("=");
                    if (validLen === -1) validLen = len;

                    var placeHoldersLen =
                        validLen === len ? 0 : 4 - (validLen % 4);

                    return [validLen, placeHoldersLen];
                }

                // base64 is 4/3 + up to two characters of the original data
                function byteLength(b64) {
                    var lens = getLens(b64);
                    var validLen = lens[0];
                    var placeHoldersLen = lens[1];
                    return (
                        ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen
                    );
                }

                function _byteLength(b64, validLen, placeHoldersLen) {
                    return (
                        ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen
                    );
                }

                function toByteArray(b64) {
                    var tmp;
                    var lens = getLens(b64);
                    var validLen = lens[0];
                    var placeHoldersLen = lens[1];

                    var arr = new Arr(
                        _byteLength(b64, validLen, placeHoldersLen),
                    );

                    var curByte = 0;

                    // if there are placeholders, only get up to the last complete 4 chars
                    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

                    var i;
                    for (i = 0; i < len; i += 4) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 18) |
                            (revLookup[b64.charCodeAt(i + 1)] << 12) |
                            (revLookup[b64.charCodeAt(i + 2)] << 6) |
                            revLookup[b64.charCodeAt(i + 3)];
                        arr[curByte++] = (tmp >> 16) & 0xff;
                        arr[curByte++] = (tmp >> 8) & 0xff;
                        arr[curByte++] = tmp & 0xff;
                    }

                    if (placeHoldersLen === 2) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 2) |
                            (revLookup[b64.charCodeAt(i + 1)] >> 4);
                        arr[curByte++] = tmp & 0xff;
                    }

                    if (placeHoldersLen === 1) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 10) |
                            (revLookup[b64.charCodeAt(i + 1)] << 4) |
                            (revLookup[b64.charCodeAt(i + 2)] >> 2);
                        arr[curByte++] = (tmp >> 8) & 0xff;
                        arr[curByte++] = tmp & 0xff;
                    }

                    return arr;
                }

                function tripletToBase64(num) {
                    return (
                        lookup[(num >> 18) & 0x3f] +
                        lookup[(num >> 12) & 0x3f] +
                        lookup[(num >> 6) & 0x3f] +
                        lookup[num & 0x3f]
                    );
                }

                function encodeChunk(uint8, start, end) {
                    var tmp;
                    var output = [];
                    for (var i = start; i < end; i += 3) {
                        tmp =
                            ((uint8[i] << 16) & 0xff0000) +
                            ((uint8[i + 1] << 8) & 0xff00) +
                            (uint8[i + 2] & 0xff);
                        output.push(tripletToBase64(tmp));
                    }
                    return output.join("");
                }

                function fromByteArray(uint8) {
                    var tmp;
                    var len = uint8.length;
                    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
                    var parts = [];
                    var maxChunkLength = 16383; // must be multiple of 3

                    // go through the array every three bytes, we'll deal with trailing stuff later
                    for (
                        var i = 0, len2 = len - extraBytes;
                        i < len2;
                        i += maxChunkLength
                    ) {
                        parts.push(
                            encodeChunk(
                                uint8,
                                i,
                                i + maxChunkLength > len2
                                    ? len2
                                    : i + maxChunkLength,
                            ),
                        );
                    }

                    // pad the end with zeros, but make sure to not forget the extra bytes
                    if (extraBytes === 1) {
                        tmp = uint8[len - 1];
                        parts.push(
                            lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==",
                        );
                    } else if (extraBytes === 2) {
                        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                        parts.push(
                            lookup[tmp >> 10] +
                                lookup[(tmp >> 4) & 0x3f] +
                                lookup[(tmp << 2) & 0x3f] +
                                "=",
                        );
                    }

                    return parts.join("");
                }
            },
            {},
        ],
        35: [
            function(require, module, exports) {
                (function(Buffer) {
                    /*!
                     * The buffer module from node.js, for the browser.
                     *
                     * @author   Feross Aboukhadijeh <https://feross.org>
                     * @license  MIT
                     */
                    /* eslint-disable no-proto */

                    "use strict";

                    var base64 = require("base64-js");
                    var ieee754 = require("ieee754");
                    var customInspectSymbol =
                        typeof Symbol === "function" &&
                        typeof Symbol.for === "function"
                            ? Symbol.for("nodejs.util.inspect.custom")
                            : null;

                    exports.Buffer = Buffer;
                    exports.SlowBuffer = SlowBuffer;
                    exports.INSPECT_MAX_BYTES = 50;

                    var K_MAX_LENGTH = 0x7fffffff;
                    exports.kMaxLength = K_MAX_LENGTH;

                    /**
                     * If `Buffer.TYPED_ARRAY_SUPPORT`:
                     *   === true    Use Uint8Array implementation (fastest)
                     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
                     *               implementation (most compatible, even IE6)
                     *
                     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                     * Opera 11.6+, iOS 4.2+.
                     *
                     * We report that the browser does not support typed arrays if the are not subclassable
                     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
                     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
                     * for __proto__ and has a buggy typed array implementation.
                     */
                    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

                    if (
                        !Buffer.TYPED_ARRAY_SUPPORT &&
                        typeof console !== "undefined" &&
                        typeof console.error === "function"
                    ) {
                        console.error(
                            "This browser lacks typed array (Uint8Array) support which is required by " +
                                "`buffer` v5.x. Use `buffer` v4.x if you require old browser support.",
                        );
                    }

                    function typedArraySupport() {
                        // Can typed array instances can be augmented?
                        try {
                            var arr = new Uint8Array(1);
                            var proto = {
                                foo: function() {
                                    return 42;
                                },
                            };
                            Object.setPrototypeOf(proto, Uint8Array.prototype);
                            Object.setPrototypeOf(arr, proto);
                            return arr.foo() === 42;
                        } catch (e) {
                            return false;
                        }
                    }

                    Object.defineProperty(Buffer.prototype, "parent", {
                        enumerable: true,
                        get: function() {
                            if (!Buffer.isBuffer(this)) return undefined;
                            return this.buffer;
                        },
                    });

                    Object.defineProperty(Buffer.prototype, "offset", {
                        enumerable: true,
                        get: function() {
                            if (!Buffer.isBuffer(this)) return undefined;
                            return this.byteOffset;
                        },
                    });

                    function createBuffer(length) {
                        if (length > K_MAX_LENGTH) {
                            throw new RangeError(
                                'The value "' +
                                    length +
                                    '" is invalid for option "size"',
                            );
                        }
                        // Return an augmented `Uint8Array` instance
                        var buf = new Uint8Array(length);
                        Object.setPrototypeOf(buf, Buffer.prototype);
                        return buf;
                    }

                    /**
                     * The Buffer constructor returns instances of `Uint8Array` that have their
                     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
                     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
                     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
                     * returns a single octet.
                     *
                     * The `Uint8Array` prototype remains unmodified.
                     */

                    function Buffer(arg, encodingOrOffset, length) {
                        // Common case.
                        if (typeof arg === "number") {
                            if (typeof encodingOrOffset === "string") {
                                throw new TypeError(
                                    'The "string" argument must be of type string. Received type number',
                                );
                            }
                            return allocUnsafe(arg);
                        }
                        return from(arg, encodingOrOffset, length);
                    }

                    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                    if (
                        typeof Symbol !== "undefined" &&
                        Symbol.species != null &&
                        Buffer[Symbol.species] === Buffer
                    ) {
                        Object.defineProperty(Buffer, Symbol.species, {
                            value: null,
                            configurable: true,
                            enumerable: false,
                            writable: false,
                        });
                    }

                    Buffer.poolSize = 8192; // not used by this implementation

                    function from(value, encodingOrOffset, length) {
                        if (typeof value === "string") {
                            return fromString(value, encodingOrOffset);
                        }

                        if (ArrayBuffer.isView(value)) {
                            return fromArrayLike(value);
                        }

                        if (value == null) {
                            throw new TypeError(
                                "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " +
                                    "or Array-like Object. Received type " +
                                    typeof value,
                            );
                        }

                        if (
                            isInstance(value, ArrayBuffer) ||
                            (value && isInstance(value.buffer, ArrayBuffer))
                        ) {
                            return fromArrayBuffer(
                                value,
                                encodingOrOffset,
                                length,
                            );
                        }

                        if (typeof value === "number") {
                            throw new TypeError(
                                'The "value" argument must not be of type number. Received type number',
                            );
                        }

                        var valueOf = value.valueOf && value.valueOf();
                        if (valueOf != null && valueOf !== value) {
                            return Buffer.from(
                                valueOf,
                                encodingOrOffset,
                                length,
                            );
                        }

                        var b = fromObject(value);
                        if (b) return b;

                        if (
                            typeof Symbol !== "undefined" &&
                            Symbol.toPrimitive != null &&
                            typeof value[Symbol.toPrimitive] === "function"
                        ) {
                            return Buffer.from(
                                value[Symbol.toPrimitive]("string"),
                                encodingOrOffset,
                                length,
                            );
                        }

                        throw new TypeError(
                            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " +
                                "or Array-like Object. Received type " +
                                typeof value,
                        );
                    }

                    /**
                     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
                     * if value is a number.
                     * Buffer.from(str[, encoding])
                     * Buffer.from(array)
                     * Buffer.from(buffer)
                     * Buffer.from(arrayBuffer[, byteOffset[, length]])
                     **/
                    Buffer.from = function(value, encodingOrOffset, length) {
                        return from(value, encodingOrOffset, length);
                    };

                    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
                    // https://github.com/feross/buffer/pull/148
                    Object.setPrototypeOf(
                        Buffer.prototype,
                        Uint8Array.prototype,
                    );
                    Object.setPrototypeOf(Buffer, Uint8Array);

                    function assertSize(size) {
                        if (typeof size !== "number") {
                            throw new TypeError(
                                '"size" argument must be of type number',
                            );
                        } else if (size < 0) {
                            throw new RangeError(
                                'The value "' +
                                    size +
                                    '" is invalid for option "size"',
                            );
                        }
                    }

                    function alloc(size, fill, encoding) {
                        assertSize(size);
                        if (size <= 0) {
                            return createBuffer(size);
                        }
                        if (fill !== undefined) {
                            // Only pay attention to encoding if it's a string. This
                            // prevents accidentally sending in a number that would
                            // be interpretted as a start offset.
                            return typeof encoding === "string"
                                ? createBuffer(size).fill(fill, encoding)
                                : createBuffer(size).fill(fill);
                        }
                        return createBuffer(size);
                    }

                    /**
                     * Creates a new filled Buffer instance.
                     * alloc(size[, fill[, encoding]])
                     **/
                    Buffer.alloc = function(size, fill, encoding) {
                        return alloc(size, fill, encoding);
                    };

                    function allocUnsafe(size) {
                        assertSize(size);
                        return createBuffer(size < 0 ? 0 : checked(size) | 0);
                    }

                    /**
                     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
                     * */
                    Buffer.allocUnsafe = function(size) {
                        return allocUnsafe(size);
                    };
                    /**
                     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
                     */
                    Buffer.allocUnsafeSlow = function(size) {
                        return allocUnsafe(size);
                    };

                    function fromString(string, encoding) {
                        if (typeof encoding !== "string" || encoding === "") {
                            encoding = "utf8";
                        }

                        if (!Buffer.isEncoding(encoding)) {
                            throw new TypeError(
                                "Unknown encoding: " + encoding,
                            );
                        }

                        var length = byteLength(string, encoding) | 0;
                        var buf = createBuffer(length);

                        var actual = buf.write(string, encoding);

                        if (actual !== length) {
                            // Writing a hex string, for example, that contains invalid characters will
                            // cause everything after the first invalid character to be ignored. (e.g.
                            // 'abxxcd' will be treated as 'ab')
                            buf = buf.slice(0, actual);
                        }

                        return buf;
                    }

                    function fromArrayLike(array) {
                        var length =
                            array.length < 0 ? 0 : checked(array.length) | 0;
                        var buf = createBuffer(length);
                        for (var i = 0; i < length; i += 1) {
                            buf[i] = array[i] & 255;
                        }
                        return buf;
                    }

                    function fromArrayBuffer(array, byteOffset, length) {
                        if (byteOffset < 0 || array.byteLength < byteOffset) {
                            throw new RangeError(
                                '"offset" is outside of buffer bounds',
                            );
                        }

                        if (array.byteLength < byteOffset + (length || 0)) {
                            throw new RangeError(
                                '"length" is outside of buffer bounds',
                            );
                        }

                        var buf;
                        if (byteOffset === undefined && length === undefined) {
                            buf = new Uint8Array(array);
                        } else if (length === undefined) {
                            buf = new Uint8Array(array, byteOffset);
                        } else {
                            buf = new Uint8Array(array, byteOffset, length);
                        }

                        // Return an augmented `Uint8Array` instance
                        Object.setPrototypeOf(buf, Buffer.prototype);

                        return buf;
                    }

                    function fromObject(obj) {
                        if (Buffer.isBuffer(obj)) {
                            var len = checked(obj.length) | 0;
                            var buf = createBuffer(len);

                            if (buf.length === 0) {
                                return buf;
                            }

                            obj.copy(buf, 0, 0, len);
                            return buf;
                        }

                        if (obj.length !== undefined) {
                            if (
                                typeof obj.length !== "number" ||
                                numberIsNaN(obj.length)
                            ) {
                                return createBuffer(0);
                            }
                            return fromArrayLike(obj);
                        }

                        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                            return fromArrayLike(obj.data);
                        }
                    }

                    function checked(length) {
                        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                        // length is NaN (which is otherwise coerced to zero.)
                        if (length >= K_MAX_LENGTH) {
                            throw new RangeError(
                                "Attempt to allocate Buffer larger than maximum " +
                                    "size: 0x" +
                                    K_MAX_LENGTH.toString(16) +
                                    " bytes",
                            );
                        }
                        return length | 0;
                    }

                    function SlowBuffer(length) {
                        if (+length != length) {
                            // eslint-disable-line eqeqeq
                            length = 0;
                        }
                        return Buffer.alloc(+length);
                    }

                    Buffer.isBuffer = function isBuffer(b) {
                        return (
                            b != null &&
                            b._isBuffer === true &&
                            b !== Buffer.prototype
                        ); // so Buffer.isBuffer(Buffer.prototype) will be false
                    };

                    Buffer.compare = function compare(a, b) {
                        if (isInstance(a, Uint8Array))
                            a = Buffer.from(a, a.offset, a.byteLength);
                        if (isInstance(b, Uint8Array))
                            b = Buffer.from(b, b.offset, b.byteLength);
                        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                            throw new TypeError(
                                'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array',
                            );
                        }

                        if (a === b) return 0;

                        var x = a.length;
                        var y = b.length;

                        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                            if (a[i] !== b[i]) {
                                x = a[i];
                                y = b[i];
                                break;
                            }
                        }

                        if (x < y) return -1;
                        if (y < x) return 1;
                        return 0;
                    };

                    Buffer.isEncoding = function isEncoding(encoding) {
                        switch (String(encoding).toLowerCase()) {
                            case "hex":
                            case "utf8":
                            case "utf-8":
                            case "ascii":
                            case "latin1":
                            case "binary":
                            case "base64":
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return true;
                            default:
                                return false;
                        }
                    };

                    Buffer.concat = function concat(list, length) {
                        if (!Array.isArray(list)) {
                            throw new TypeError(
                                '"list" argument must be an Array of Buffers',
                            );
                        }

                        if (list.length === 0) {
                            return Buffer.alloc(0);
                        }

                        var i;
                        if (length === undefined) {
                            length = 0;
                            for (i = 0; i < list.length; ++i) {
                                length += list[i].length;
                            }
                        }

                        var buffer = Buffer.allocUnsafe(length);
                        var pos = 0;
                        for (i = 0; i < list.length; ++i) {
                            var buf = list[i];
                            if (isInstance(buf, Uint8Array)) {
                                buf = Buffer.from(buf);
                            }
                            if (!Buffer.isBuffer(buf)) {
                                throw new TypeError(
                                    '"list" argument must be an Array of Buffers',
                                );
                            }
                            buf.copy(buffer, pos);
                            pos += buf.length;
                        }
                        return buffer;
                    };

                    function byteLength(string, encoding) {
                        if (Buffer.isBuffer(string)) {
                            return string.length;
                        }
                        if (
                            ArrayBuffer.isView(string) ||
                            isInstance(string, ArrayBuffer)
                        ) {
                            return string.byteLength;
                        }
                        if (typeof string !== "string") {
                            throw new TypeError(
                                'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                                    "Received type " +
                                    typeof string,
                            );
                        }

                        var len = string.length;
                        var mustMatch =
                            arguments.length > 2 && arguments[2] === true;
                        if (!mustMatch && len === 0) return 0;

                        // Use a for loop to avoid recursion
                        var loweredCase = false;
                        for (;;) {
                            switch (encoding) {
                                case "ascii":
                                case "latin1":
                                case "binary":
                                    return len;
                                case "utf8":
                                case "utf-8":
                                    return utf8ToBytes(string).length;
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return len * 2;
                                case "hex":
                                    return len >>> 1;
                                case "base64":
                                    return base64ToBytes(string).length;
                                default:
                                    if (loweredCase) {
                                        return mustMatch
                                            ? -1
                                            : utf8ToBytes(string).length; // assume utf8
                                    }
                                    encoding = ("" + encoding).toLowerCase();
                                    loweredCase = true;
                            }
                        }
                    }
                    Buffer.byteLength = byteLength;

                    function slowToString(encoding, start, end) {
                        var loweredCase = false;

                        // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                        // property of a typed array.

                        // This behaves neither like String nor Uint8Array in that we set start/end
                        // to their upper/lower bounds if the value passed is out of range.
                        // undefined is handled specially as per ECMA-262 6th Edition,
                        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                        if (start === undefined || start < 0) {
                            start = 0;
                        }
                        // Return early if start > this.length. Done here to prevent potential uint32
                        // coercion fail below.
                        if (start > this.length) {
                            return "";
                        }

                        if (end === undefined || end > this.length) {
                            end = this.length;
                        }

                        if (end <= 0) {
                            return "";
                        }

                        // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                        end >>>= 0;
                        start >>>= 0;

                        if (end <= start) {
                            return "";
                        }

                        if (!encoding) encoding = "utf8";

                        while (true) {
                            switch (encoding) {
                                case "hex":
                                    return hexSlice(this, start, end);

                                case "utf8":
                                case "utf-8":
                                    return utf8Slice(this, start, end);

                                case "ascii":
                                    return asciiSlice(this, start, end);

                                case "latin1":
                                case "binary":
                                    return latin1Slice(this, start, end);

                                case "base64":
                                    return base64Slice(this, start, end);

                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return utf16leSlice(this, start, end);

                                default:
                                    if (loweredCase)
                                        throw new TypeError(
                                            "Unknown encoding: " + encoding,
                                        );
                                    encoding = (encoding + "").toLowerCase();
                                    loweredCase = true;
                            }
                        }
                    }

                    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
                    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
                    // reliably in a browserify context because there could be multiple different
                    // copies of the 'buffer' package in use. This method works even for Buffer
                    // instances that were created from another copy of the `buffer` package.
                    // See: https://github.com/feross/buffer/issues/154
                    Buffer.prototype._isBuffer = true;

                    function swap(b, n, m) {
                        var i = b[n];
                        b[n] = b[m];
                        b[m] = i;
                    }

                    Buffer.prototype.swap16 = function swap16() {
                        var len = this.length;
                        if (len % 2 !== 0) {
                            throw new RangeError(
                                "Buffer size must be a multiple of 16-bits",
                            );
                        }
                        for (var i = 0; i < len; i += 2) {
                            swap(this, i, i + 1);
                        }
                        return this;
                    };

                    Buffer.prototype.swap32 = function swap32() {
                        var len = this.length;
                        if (len % 4 !== 0) {
                            throw new RangeError(
                                "Buffer size must be a multiple of 32-bits",
                            );
                        }
                        for (var i = 0; i < len; i += 4) {
                            swap(this, i, i + 3);
                            swap(this, i + 1, i + 2);
                        }
                        return this;
                    };

                    Buffer.prototype.swap64 = function swap64() {
                        var len = this.length;
                        if (len % 8 !== 0) {
                            throw new RangeError(
                                "Buffer size must be a multiple of 64-bits",
                            );
                        }
                        for (var i = 0; i < len; i += 8) {
                            swap(this, i, i + 7);
                            swap(this, i + 1, i + 6);
                            swap(this, i + 2, i + 5);
                            swap(this, i + 3, i + 4);
                        }
                        return this;
                    };

                    Buffer.prototype.toString = function toString() {
                        var length = this.length;
                        if (length === 0) return "";
                        if (arguments.length === 0)
                            return utf8Slice(this, 0, length);
                        return slowToString.apply(this, arguments);
                    };

                    Buffer.prototype.toLocaleString = Buffer.prototype.toString;

                    Buffer.prototype.equals = function equals(b) {
                        if (!Buffer.isBuffer(b))
                            throw new TypeError("Argument must be a Buffer");
                        if (this === b) return true;
                        return Buffer.compare(this, b) === 0;
                    };

                    Buffer.prototype.inspect = function inspect() {
                        var str = "";
                        var max = exports.INSPECT_MAX_BYTES;
                        str = this.toString("hex", 0, max)
                            .replace(/(.{2})/g, "$1 ")
                            .trim();
                        if (this.length > max) str += " ... ";
                        return "<Buffer " + str + ">";
                    };
                    if (customInspectSymbol) {
                        Buffer.prototype[customInspectSymbol] =
                            Buffer.prototype.inspect;
                    }

                    Buffer.prototype.compare = function compare(
                        target,
                        start,
                        end,
                        thisStart,
                        thisEnd,
                    ) {
                        if (isInstance(target, Uint8Array)) {
                            target = Buffer.from(
                                target,
                                target.offset,
                                target.byteLength,
                            );
                        }
                        if (!Buffer.isBuffer(target)) {
                            throw new TypeError(
                                'The "target" argument must be one of type Buffer or Uint8Array. ' +
                                    "Received type " +
                                    typeof target,
                            );
                        }

                        if (start === undefined) {
                            start = 0;
                        }
                        if (end === undefined) {
                            end = target ? target.length : 0;
                        }
                        if (thisStart === undefined) {
                            thisStart = 0;
                        }
                        if (thisEnd === undefined) {
                            thisEnd = this.length;
                        }

                        if (
                            start < 0 ||
                            end > target.length ||
                            thisStart < 0 ||
                            thisEnd > this.length
                        ) {
                            throw new RangeError("out of range index");
                        }

                        if (thisStart >= thisEnd && start >= end) {
                            return 0;
                        }
                        if (thisStart >= thisEnd) {
                            return -1;
                        }
                        if (start >= end) {
                            return 1;
                        }

                        start >>>= 0;
                        end >>>= 0;
                        thisStart >>>= 0;
                        thisEnd >>>= 0;

                        if (this === target) return 0;

                        var x = thisEnd - thisStart;
                        var y = end - start;
                        var len = Math.min(x, y);

                        var thisCopy = this.slice(thisStart, thisEnd);
                        var targetCopy = target.slice(start, end);

                        for (var i = 0; i < len; ++i) {
                            if (thisCopy[i] !== targetCopy[i]) {
                                x = thisCopy[i];
                                y = targetCopy[i];
                                break;
                            }
                        }

                        if (x < y) return -1;
                        if (y < x) return 1;
                        return 0;
                    };

                    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
                    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
                    //
                    // Arguments:
                    // - buffer - a Buffer to search
                    // - val - a string, Buffer, or number
                    // - byteOffset - an index into `buffer`; will be clamped to an int32
                    // - encoding - an optional encoding, relevant is val is a string
                    // - dir - true for indexOf, false for lastIndexOf
                    function bidirectionalIndexOf(
                        buffer,
                        val,
                        byteOffset,
                        encoding,
                        dir,
                    ) {
                        // Empty buffer means no match
                        if (buffer.length === 0) return -1;

                        // Normalize byteOffset
                        if (typeof byteOffset === "string") {
                            encoding = byteOffset;
                            byteOffset = 0;
                        } else if (byteOffset > 0x7fffffff) {
                            byteOffset = 0x7fffffff;
                        } else if (byteOffset < -0x80000000) {
                            byteOffset = -0x80000000;
                        }
                        byteOffset = +byteOffset; // Coerce to Number.
                        if (numberIsNaN(byteOffset)) {
                            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                            byteOffset = dir ? 0 : buffer.length - 1;
                        }

                        // Normalize byteOffset: negative offsets start from the end of the buffer
                        if (byteOffset < 0)
                            byteOffset = buffer.length + byteOffset;
                        if (byteOffset >= buffer.length) {
                            if (dir) return -1;
                            else byteOffset = buffer.length - 1;
                        } else if (byteOffset < 0) {
                            if (dir) byteOffset = 0;
                            else return -1;
                        }

                        // Normalize val
                        if (typeof val === "string") {
                            val = Buffer.from(val, encoding);
                        }

                        // Finally, search either indexOf (if dir is true) or lastIndexOf
                        if (Buffer.isBuffer(val)) {
                            // Special case: looking for empty string/buffer always fails
                            if (val.length === 0) {
                                return -1;
                            }
                            return arrayIndexOf(
                                buffer,
                                val,
                                byteOffset,
                                encoding,
                                dir,
                            );
                        } else if (typeof val === "number") {
                            val = val & 0xff; // Search for a byte value [0-255]
                            if (
                                typeof Uint8Array.prototype.indexOf ===
                                "function"
                            ) {
                                if (dir) {
                                    return Uint8Array.prototype.indexOf.call(
                                        buffer,
                                        val,
                                        byteOffset,
                                    );
                                } else {
                                    return Uint8Array.prototype.lastIndexOf.call(
                                        buffer,
                                        val,
                                        byteOffset,
                                    );
                                }
                            }
                            return arrayIndexOf(
                                buffer,
                                [val],
                                byteOffset,
                                encoding,
                                dir,
                            );
                        }

                        throw new TypeError(
                            "val must be string, number or Buffer",
                        );
                    }

                    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                        var indexSize = 1;
                        var arrLength = arr.length;
                        var valLength = val.length;

                        if (encoding !== undefined) {
                            encoding = String(encoding).toLowerCase();
                            if (
                                encoding === "ucs2" ||
                                encoding === "ucs-2" ||
                                encoding === "utf16le" ||
                                encoding === "utf-16le"
                            ) {
                                if (arr.length < 2 || val.length < 2) {
                                    return -1;
                                }
                                indexSize = 2;
                                arrLength /= 2;
                                valLength /= 2;
                                byteOffset /= 2;
                            }
                        }

                        function read(buf, i) {
                            if (indexSize === 1) {
                                return buf[i];
                            } else {
                                return buf.readUInt16BE(i * indexSize);
                            }
                        }

                        var i;
                        if (dir) {
                            var foundIndex = -1;
                            for (i = byteOffset; i < arrLength; i++) {
                                if (
                                    read(arr, i) ===
                                    read(
                                        val,
                                        foundIndex === -1 ? 0 : i - foundIndex,
                                    )
                                ) {
                                    if (foundIndex === -1) foundIndex = i;
                                    if (i - foundIndex + 1 === valLength)
                                        return foundIndex * indexSize;
                                } else {
                                    if (foundIndex !== -1) i -= i - foundIndex;
                                    foundIndex = -1;
                                }
                            }
                        } else {
                            if (byteOffset + valLength > arrLength)
                                byteOffset = arrLength - valLength;
                            for (i = byteOffset; i >= 0; i--) {
                                var found = true;
                                for (var j = 0; j < valLength; j++) {
                                    if (read(arr, i + j) !== read(val, j)) {
                                        found = false;
                                        break;
                                    }
                                }
                                if (found) return i;
                            }
                        }

                        return -1;
                    }

                    Buffer.prototype.includes = function includes(
                        val,
                        byteOffset,
                        encoding,
                    ) {
                        return this.indexOf(val, byteOffset, encoding) !== -1;
                    };

                    Buffer.prototype.indexOf = function indexOf(
                        val,
                        byteOffset,
                        encoding,
                    ) {
                        return bidirectionalIndexOf(
                            this,
                            val,
                            byteOffset,
                            encoding,
                            true,
                        );
                    };

                    Buffer.prototype.lastIndexOf = function lastIndexOf(
                        val,
                        byteOffset,
                        encoding,
                    ) {
                        return bidirectionalIndexOf(
                            this,
                            val,
                            byteOffset,
                            encoding,
                            false,
                        );
                    };

                    function hexWrite(buf, string, offset, length) {
                        offset = Number(offset) || 0;
                        var remaining = buf.length - offset;
                        if (!length) {
                            length = remaining;
                        } else {
                            length = Number(length);
                            if (length > remaining) {
                                length = remaining;
                            }
                        }

                        var strLen = string.length;

                        if (length > strLen / 2) {
                            length = strLen / 2;
                        }
                        for (var i = 0; i < length; ++i) {
                            var parsed = parseInt(string.substr(i * 2, 2), 16);
                            if (numberIsNaN(parsed)) return i;
                            buf[offset + i] = parsed;
                        }
                        return i;
                    }

                    function utf8Write(buf, string, offset, length) {
                        return blitBuffer(
                            utf8ToBytes(string, buf.length - offset),
                            buf,
                            offset,
                            length,
                        );
                    }

                    function asciiWrite(buf, string, offset, length) {
                        return blitBuffer(
                            asciiToBytes(string),
                            buf,
                            offset,
                            length,
                        );
                    }

                    function latin1Write(buf, string, offset, length) {
                        return asciiWrite(buf, string, offset, length);
                    }

                    function base64Write(buf, string, offset, length) {
                        return blitBuffer(
                            base64ToBytes(string),
                            buf,
                            offset,
                            length,
                        );
                    }

                    function ucs2Write(buf, string, offset, length) {
                        return blitBuffer(
                            utf16leToBytes(string, buf.length - offset),
                            buf,
                            offset,
                            length,
                        );
                    }

                    Buffer.prototype.write = function write(
                        string,
                        offset,
                        length,
                        encoding,
                    ) {
                        // Buffer#write(string)
                        if (offset === undefined) {
                            encoding = "utf8";
                            length = this.length;
                            offset = 0;
                            // Buffer#write(string, encoding)
                        } else if (
                            length === undefined &&
                            typeof offset === "string"
                        ) {
                            encoding = offset;
                            length = this.length;
                            offset = 0;
                            // Buffer#write(string, offset[, length][, encoding])
                        } else if (isFinite(offset)) {
                            offset = offset >>> 0;
                            if (isFinite(length)) {
                                length = length >>> 0;
                                if (encoding === undefined) encoding = "utf8";
                            } else {
                                encoding = length;
                                length = undefined;
                            }
                        } else {
                            throw new Error(
                                "Buffer.write(string, encoding, offset[, length]) is no longer supported",
                            );
                        }

                        var remaining = this.length - offset;
                        if (length === undefined || length > remaining)
                            length = remaining;

                        if (
                            (string.length > 0 && (length < 0 || offset < 0)) ||
                            offset > this.length
                        ) {
                            throw new RangeError(
                                "Attempt to write outside buffer bounds",
                            );
                        }

                        if (!encoding) encoding = "utf8";

                        var loweredCase = false;
                        for (;;) {
                            switch (encoding) {
                                case "hex":
                                    return hexWrite(
                                        this,
                                        string,
                                        offset,
                                        length,
                                    );

                                case "utf8":
                                case "utf-8":
                                    return utf8Write(
                                        this,
                                        string,
                                        offset,
                                        length,
                                    );

                                case "ascii":
                                    return asciiWrite(
                                        this,
                                        string,
                                        offset,
                                        length,
                                    );

                                case "latin1":
                                case "binary":
                                    return latin1Write(
                                        this,
                                        string,
                                        offset,
                                        length,
                                    );

                                case "base64":
                                    // Warning: maxLength not taken into account in base64Write
                                    return base64Write(
                                        this,
                                        string,
                                        offset,
                                        length,
                                    );

                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return ucs2Write(
                                        this,
                                        string,
                                        offset,
                                        length,
                                    );

                                default:
                                    if (loweredCase)
                                        throw new TypeError(
                                            "Unknown encoding: " + encoding,
                                        );
                                    encoding = ("" + encoding).toLowerCase();
                                    loweredCase = true;
                            }
                        }
                    };

                    Buffer.prototype.toJSON = function toJSON() {
                        return {
                            type: "Buffer",
                            data: Array.prototype.slice.call(
                                this._arr || this,
                                0,
                            ),
                        };
                    };

                    function base64Slice(buf, start, end) {
                        if (start === 0 && end === buf.length) {
                            return base64.fromByteArray(buf);
                        } else {
                            return base64.fromByteArray(buf.slice(start, end));
                        }
                    }

                    function utf8Slice(buf, start, end) {
                        end = Math.min(buf.length, end);
                        var res = [];

                        var i = start;
                        while (i < end) {
                            var firstByte = buf[i];
                            var codePoint = null;
                            var bytesPerSequence =
                                firstByte > 0xef
                                    ? 4
                                    : firstByte > 0xdf
                                    ? 3
                                    : firstByte > 0xbf
                                    ? 2
                                    : 1;

                            if (i + bytesPerSequence <= end) {
                                var secondByte,
                                    thirdByte,
                                    fourthByte,
                                    tempCodePoint;

                                switch (bytesPerSequence) {
                                    case 1:
                                        if (firstByte < 0x80) {
                                            codePoint = firstByte;
                                        }
                                        break;
                                    case 2:
                                        secondByte = buf[i + 1];
                                        if ((secondByte & 0xc0) === 0x80) {
                                            tempCodePoint =
                                                ((firstByte & 0x1f) << 0x6) |
                                                (secondByte & 0x3f);
                                            if (tempCodePoint > 0x7f) {
                                                codePoint = tempCodePoint;
                                            }
                                        }
                                        break;
                                    case 3:
                                        secondByte = buf[i + 1];
                                        thirdByte = buf[i + 2];
                                        if (
                                            (secondByte & 0xc0) === 0x80 &&
                                            (thirdByte & 0xc0) === 0x80
                                        ) {
                                            tempCodePoint =
                                                ((firstByte & 0xf) << 0xc) |
                                                ((secondByte & 0x3f) << 0x6) |
                                                (thirdByte & 0x3f);
                                            if (
                                                tempCodePoint > 0x7ff &&
                                                (tempCodePoint < 0xd800 ||
                                                    tempCodePoint > 0xdfff)
                                            ) {
                                                codePoint = tempCodePoint;
                                            }
                                        }
                                        break;
                                    case 4:
                                        secondByte = buf[i + 1];
                                        thirdByte = buf[i + 2];
                                        fourthByte = buf[i + 3];
                                        if (
                                            (secondByte & 0xc0) === 0x80 &&
                                            (thirdByte & 0xc0) === 0x80 &&
                                            (fourthByte & 0xc0) === 0x80
                                        ) {
                                            tempCodePoint =
                                                ((firstByte & 0xf) << 0x12) |
                                                ((secondByte & 0x3f) << 0xc) |
                                                ((thirdByte & 0x3f) << 0x6) |
                                                (fourthByte & 0x3f);
                                            if (
                                                tempCodePoint > 0xffff &&
                                                tempCodePoint < 0x110000
                                            ) {
                                                codePoint = tempCodePoint;
                                            }
                                        }
                                }
                            }

                            if (codePoint === null) {
                                // we did not generate a valid codePoint so insert a
                                // replacement char (U+FFFD) and advance only 1 byte
                                codePoint = 0xfffd;
                                bytesPerSequence = 1;
                            } else if (codePoint > 0xffff) {
                                // encode to utf16 (surrogate pair dance)
                                codePoint -= 0x10000;
                                res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                                codePoint = 0xdc00 | (codePoint & 0x3ff);
                            }

                            res.push(codePoint);
                            i += bytesPerSequence;
                        }

                        return decodeCodePointsArray(res);
                    }

                    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
                    // the lowest limit is Chrome, with 0x10000 args.
                    // We go 1 magnitude less, for safety
                    var MAX_ARGUMENTS_LENGTH = 0x1000;

                    function decodeCodePointsArray(codePoints) {
                        var len = codePoints.length;
                        if (len <= MAX_ARGUMENTS_LENGTH) {
                            return String.fromCharCode.apply(
                                String,
                                codePoints,
                            ); // avoid extra slice()
                        }

                        // Decode in chunks to avoid "call stack size exceeded".
                        var res = "";
                        var i = 0;
                        while (i < len) {
                            res += String.fromCharCode.apply(
                                String,
                                codePoints.slice(
                                    i,
                                    (i += MAX_ARGUMENTS_LENGTH),
                                ),
                            );
                        }
                        return res;
                    }

                    function asciiSlice(buf, start, end) {
                        var ret = "";
                        end = Math.min(buf.length, end);

                        for (var i = start; i < end; ++i) {
                            ret += String.fromCharCode(buf[i] & 0x7f);
                        }
                        return ret;
                    }

                    function latin1Slice(buf, start, end) {
                        var ret = "";
                        end = Math.min(buf.length, end);

                        for (var i = start; i < end; ++i) {
                            ret += String.fromCharCode(buf[i]);
                        }
                        return ret;
                    }

                    function hexSlice(buf, start, end) {
                        var len = buf.length;

                        if (!start || start < 0) start = 0;
                        if (!end || end < 0 || end > len) end = len;

                        var out = "";
                        for (var i = start; i < end; ++i) {
                            out += hexSliceLookupTable[buf[i]];
                        }
                        return out;
                    }

                    function utf16leSlice(buf, start, end) {
                        var bytes = buf.slice(start, end);
                        var res = "";
                        for (var i = 0; i < bytes.length; i += 2) {
                            res += String.fromCharCode(
                                bytes[i] + bytes[i + 1] * 256,
                            );
                        }
                        return res;
                    }

                    Buffer.prototype.slice = function slice(start, end) {
                        var len = this.length;
                        start = ~~start;
                        end = end === undefined ? len : ~~end;

                        if (start < 0) {
                            start += len;
                            if (start < 0) start = 0;
                        } else if (start > len) {
                            start = len;
                        }

                        if (end < 0) {
                            end += len;
                            if (end < 0) end = 0;
                        } else if (end > len) {
                            end = len;
                        }

                        if (end < start) end = start;

                        var newBuf = this.subarray(start, end);
                        // Return an augmented `Uint8Array` instance
                        Object.setPrototypeOf(newBuf, Buffer.prototype);

                        return newBuf;
                    };

                    /*
                     * Need to make sure that buffer isn't trying to write out of bounds.
                     */
                    function checkOffset(offset, ext, length) {
                        if (offset % 1 !== 0 || offset < 0)
                            throw new RangeError("offset is not uint");
                        if (offset + ext > length)
                            throw new RangeError(
                                "Trying to access beyond buffer length",
                            );
                    }

                    Buffer.prototype.readUIntLE = function readUIntLE(
                        offset,
                        byteLength,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        byteLength = byteLength >>> 0;
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length);

                        var val = this[offset];
                        var mul = 1;
                        var i = 0;
                        while (++i < byteLength && (mul *= 0x100)) {
                            val += this[offset + i] * mul;
                        }

                        return val;
                    };

                    Buffer.prototype.readUIntBE = function readUIntBE(
                        offset,
                        byteLength,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        byteLength = byteLength >>> 0;
                        if (!noAssert) {
                            checkOffset(offset, byteLength, this.length);
                        }

                        var val = this[offset + --byteLength];
                        var mul = 1;
                        while (byteLength > 0 && (mul *= 0x100)) {
                            val += this[offset + --byteLength] * mul;
                        }

                        return val;
                    };

                    Buffer.prototype.readUInt8 = function readUInt8(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 1, this.length);
                        return this[offset];
                    };

                    Buffer.prototype.readUInt16LE = function readUInt16LE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 2, this.length);
                        return this[offset] | (this[offset + 1] << 8);
                    };

                    Buffer.prototype.readUInt16BE = function readUInt16BE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 2, this.length);
                        return (this[offset] << 8) | this[offset + 1];
                    };

                    Buffer.prototype.readUInt32LE = function readUInt32LE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 4, this.length);

                        return (
                            (this[offset] |
                                (this[offset + 1] << 8) |
                                (this[offset + 2] << 16)) +
                            this[offset + 3] * 0x1000000
                        );
                    };

                    Buffer.prototype.readUInt32BE = function readUInt32BE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 4, this.length);

                        return (
                            this[offset] * 0x1000000 +
                            ((this[offset + 1] << 16) |
                                (this[offset + 2] << 8) |
                                this[offset + 3])
                        );
                    };

                    Buffer.prototype.readIntLE = function readIntLE(
                        offset,
                        byteLength,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        byteLength = byteLength >>> 0;
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length);

                        var val = this[offset];
                        var mul = 1;
                        var i = 0;
                        while (++i < byteLength && (mul *= 0x100)) {
                            val += this[offset + i] * mul;
                        }
                        mul *= 0x80;

                        if (val >= mul) val -= Math.pow(2, 8 * byteLength);

                        return val;
                    };

                    Buffer.prototype.readIntBE = function readIntBE(
                        offset,
                        byteLength,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        byteLength = byteLength >>> 0;
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length);

                        var i = byteLength;
                        var mul = 1;
                        var val = this[offset + --i];
                        while (i > 0 && (mul *= 0x100)) {
                            val += this[offset + --i] * mul;
                        }
                        mul *= 0x80;

                        if (val >= mul) val -= Math.pow(2, 8 * byteLength);

                        return val;
                    };

                    Buffer.prototype.readInt8 = function readInt8(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 1, this.length);
                        if (!(this[offset] & 0x80)) return this[offset];
                        return (0xff - this[offset] + 1) * -1;
                    };

                    Buffer.prototype.readInt16LE = function readInt16LE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 2, this.length);
                        var val = this[offset] | (this[offset + 1] << 8);
                        return val & 0x8000 ? val | 0xffff0000 : val;
                    };

                    Buffer.prototype.readInt16BE = function readInt16BE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 2, this.length);
                        var val = this[offset + 1] | (this[offset] << 8);
                        return val & 0x8000 ? val | 0xffff0000 : val;
                    };

                    Buffer.prototype.readInt32LE = function readInt32LE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 4, this.length);

                        return (
                            this[offset] |
                            (this[offset + 1] << 8) |
                            (this[offset + 2] << 16) |
                            (this[offset + 3] << 24)
                        );
                    };

                    Buffer.prototype.readInt32BE = function readInt32BE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 4, this.length);

                        return (
                            (this[offset] << 24) |
                            (this[offset + 1] << 16) |
                            (this[offset + 2] << 8) |
                            this[offset + 3]
                        );
                    };

                    Buffer.prototype.readFloatLE = function readFloatLE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 4, this.length);
                        return ieee754.read(this, offset, true, 23, 4);
                    };

                    Buffer.prototype.readFloatBE = function readFloatBE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 4, this.length);
                        return ieee754.read(this, offset, false, 23, 4);
                    };

                    Buffer.prototype.readDoubleLE = function readDoubleLE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 8, this.length);
                        return ieee754.read(this, offset, true, 52, 8);
                    };

                    Buffer.prototype.readDoubleBE = function readDoubleBE(
                        offset,
                        noAssert,
                    ) {
                        offset = offset >>> 0;
                        if (!noAssert) checkOffset(offset, 8, this.length);
                        return ieee754.read(this, offset, false, 52, 8);
                    };

                    function checkInt(buf, value, offset, ext, max, min) {
                        if (!Buffer.isBuffer(buf))
                            throw new TypeError(
                                '"buffer" argument must be a Buffer instance',
                            );
                        if (value > max || value < min)
                            throw new RangeError(
                                '"value" argument is out of bounds',
                            );
                        if (offset + ext > buf.length)
                            throw new RangeError("Index out of range");
                    }

                    Buffer.prototype.writeUIntLE = function writeUIntLE(
                        value,
                        offset,
                        byteLength,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        byteLength = byteLength >>> 0;
                        if (!noAssert) {
                            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                            checkInt(
                                this,
                                value,
                                offset,
                                byteLength,
                                maxBytes,
                                0,
                            );
                        }

                        var mul = 1;
                        var i = 0;
                        this[offset] = value & 0xff;
                        while (++i < byteLength && (mul *= 0x100)) {
                            this[offset + i] = (value / mul) & 0xff;
                        }

                        return offset + byteLength;
                    };

                    Buffer.prototype.writeUIntBE = function writeUIntBE(
                        value,
                        offset,
                        byteLength,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        byteLength = byteLength >>> 0;
                        if (!noAssert) {
                            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                            checkInt(
                                this,
                                value,
                                offset,
                                byteLength,
                                maxBytes,
                                0,
                            );
                        }

                        var i = byteLength - 1;
                        var mul = 1;
                        this[offset + i] = value & 0xff;
                        while (--i >= 0 && (mul *= 0x100)) {
                            this[offset + i] = (value / mul) & 0xff;
                        }

                        return offset + byteLength;
                    };

                    Buffer.prototype.writeUInt8 = function writeUInt8(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 1, 0xff, 0);
                        this[offset] = value & 0xff;
                        return offset + 1;
                    };

                    Buffer.prototype.writeUInt16LE = function writeUInt16LE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 0xffff, 0);
                        this[offset] = value & 0xff;
                        this[offset + 1] = value >>> 8;
                        return offset + 2;
                    };

                    Buffer.prototype.writeUInt16BE = function writeUInt16BE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 0xffff, 0);
                        this[offset] = value >>> 8;
                        this[offset + 1] = value & 0xff;
                        return offset + 2;
                    };

                    Buffer.prototype.writeUInt32LE = function writeUInt32LE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 0xffffffff, 0);
                        this[offset + 3] = value >>> 24;
                        this[offset + 2] = value >>> 16;
                        this[offset + 1] = value >>> 8;
                        this[offset] = value & 0xff;
                        return offset + 4;
                    };

                    Buffer.prototype.writeUInt32BE = function writeUInt32BE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 0xffffffff, 0);
                        this[offset] = value >>> 24;
                        this[offset + 1] = value >>> 16;
                        this[offset + 2] = value >>> 8;
                        this[offset + 3] = value & 0xff;
                        return offset + 4;
                    };

                    Buffer.prototype.writeIntLE = function writeIntLE(
                        value,
                        offset,
                        byteLength,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert) {
                            var limit = Math.pow(2, 8 * byteLength - 1);

                            checkInt(
                                this,
                                value,
                                offset,
                                byteLength,
                                limit - 1,
                                -limit,
                            );
                        }

                        var i = 0;
                        var mul = 1;
                        var sub = 0;
                        this[offset] = value & 0xff;
                        while (++i < byteLength && (mul *= 0x100)) {
                            if (
                                value < 0 &&
                                sub === 0 &&
                                this[offset + i - 1] !== 0
                            ) {
                                sub = 1;
                            }
                            this[offset + i] =
                                (((value / mul) >> 0) - sub) & 0xff;
                        }

                        return offset + byteLength;
                    };

                    Buffer.prototype.writeIntBE = function writeIntBE(
                        value,
                        offset,
                        byteLength,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert) {
                            var limit = Math.pow(2, 8 * byteLength - 1);

                            checkInt(
                                this,
                                value,
                                offset,
                                byteLength,
                                limit - 1,
                                -limit,
                            );
                        }

                        var i = byteLength - 1;
                        var mul = 1;
                        var sub = 0;
                        this[offset + i] = value & 0xff;
                        while (--i >= 0 && (mul *= 0x100)) {
                            if (
                                value < 0 &&
                                sub === 0 &&
                                this[offset + i + 1] !== 0
                            ) {
                                sub = 1;
                            }
                            this[offset + i] =
                                (((value / mul) >> 0) - sub) & 0xff;
                        }

                        return offset + byteLength;
                    };

                    Buffer.prototype.writeInt8 = function writeInt8(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 1, 0x7f, -0x80);
                        if (value < 0) value = 0xff + value + 1;
                        this[offset] = value & 0xff;
                        return offset + 1;
                    };

                    Buffer.prototype.writeInt16LE = function writeInt16LE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                        this[offset] = value & 0xff;
                        this[offset + 1] = value >>> 8;
                        return offset + 2;
                    };

                    Buffer.prototype.writeInt16BE = function writeInt16BE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                        this[offset] = value >>> 8;
                        this[offset + 1] = value & 0xff;
                        return offset + 2;
                    };

                    Buffer.prototype.writeInt32LE = function writeInt32LE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(
                                this,
                                value,
                                offset,
                                4,
                                0x7fffffff,
                                -0x80000000,
                            );
                        this[offset] = value & 0xff;
                        this[offset + 1] = value >>> 8;
                        this[offset + 2] = value >>> 16;
                        this[offset + 3] = value >>> 24;
                        return offset + 4;
                    };

                    Buffer.prototype.writeInt32BE = function writeInt32BE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert)
                            checkInt(
                                this,
                                value,
                                offset,
                                4,
                                0x7fffffff,
                                -0x80000000,
                            );
                        if (value < 0) value = 0xffffffff + value + 1;
                        this[offset] = value >>> 24;
                        this[offset + 1] = value >>> 16;
                        this[offset + 2] = value >>> 8;
                        this[offset + 3] = value & 0xff;
                        return offset + 4;
                    };

                    function checkIEEE754(buf, value, offset, ext, max, min) {
                        if (offset + ext > buf.length)
                            throw new RangeError("Index out of range");
                        if (offset < 0)
                            throw new RangeError("Index out of range");
                    }

                    function writeFloat(
                        buf,
                        value,
                        offset,
                        littleEndian,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert) {
                            checkIEEE754(
                                buf,
                                value,
                                offset,
                                4,
                                3.4028234663852886e38,
                                -3.4028234663852886e38,
                            );
                        }
                        ieee754.write(buf, value, offset, littleEndian, 23, 4);
                        return offset + 4;
                    }

                    Buffer.prototype.writeFloatLE = function writeFloatLE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        return writeFloat(this, value, offset, true, noAssert);
                    };

                    Buffer.prototype.writeFloatBE = function writeFloatBE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        return writeFloat(this, value, offset, false, noAssert);
                    };

                    function writeDouble(
                        buf,
                        value,
                        offset,
                        littleEndian,
                        noAssert,
                    ) {
                        value = +value;
                        offset = offset >>> 0;
                        if (!noAssert) {
                            checkIEEE754(
                                buf,
                                value,
                                offset,
                                8,
                                1.7976931348623157e308,
                                -1.7976931348623157e308,
                            );
                        }
                        ieee754.write(buf, value, offset, littleEndian, 52, 8);
                        return offset + 8;
                    }

                    Buffer.prototype.writeDoubleLE = function writeDoubleLE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        return writeDouble(this, value, offset, true, noAssert);
                    };

                    Buffer.prototype.writeDoubleBE = function writeDoubleBE(
                        value,
                        offset,
                        noAssert,
                    ) {
                        return writeDouble(
                            this,
                            value,
                            offset,
                            false,
                            noAssert,
                        );
                    };

                    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                    Buffer.prototype.copy = function copy(
                        target,
                        targetStart,
                        start,
                        end,
                    ) {
                        if (!Buffer.isBuffer(target))
                            throw new TypeError("argument should be a Buffer");
                        if (!start) start = 0;
                        if (!end && end !== 0) end = this.length;
                        if (targetStart >= target.length)
                            targetStart = target.length;
                        if (!targetStart) targetStart = 0;
                        if (end > 0 && end < start) end = start;

                        // Copy 0 bytes; we're done
                        if (end === start) return 0;
                        if (target.length === 0 || this.length === 0) return 0;

                        // Fatal error conditions
                        if (targetStart < 0) {
                            throw new RangeError("targetStart out of bounds");
                        }
                        if (start < 0 || start >= this.length)
                            throw new RangeError("Index out of range");
                        if (end < 0)
                            throw new RangeError("sourceEnd out of bounds");

                        // Are we oob?
                        if (end > this.length) end = this.length;
                        if (target.length - targetStart < end - start) {
                            end = target.length - targetStart + start;
                        }

                        var len = end - start;

                        if (
                            this === target &&
                            typeof Uint8Array.prototype.copyWithin ===
                                "function"
                        ) {
                            // Use built-in when available, missing from IE11
                            this.copyWithin(targetStart, start, end);
                        } else if (
                            this === target &&
                            start < targetStart &&
                            targetStart < end
                        ) {
                            // descending copy from end
                            for (var i = len - 1; i >= 0; --i) {
                                target[i + targetStart] = this[i + start];
                            }
                        } else {
                            Uint8Array.prototype.set.call(
                                target,
                                this.subarray(start, end),
                                targetStart,
                            );
                        }

                        return len;
                    };

                    // Usage:
                    //    buffer.fill(number[, offset[, end]])
                    //    buffer.fill(buffer[, offset[, end]])
                    //    buffer.fill(string[, offset[, end]][, encoding])
                    Buffer.prototype.fill = function fill(
                        val,
                        start,
                        end,
                        encoding,
                    ) {
                        // Handle string cases:
                        if (typeof val === "string") {
                            if (typeof start === "string") {
                                encoding = start;
                                start = 0;
                                end = this.length;
                            } else if (typeof end === "string") {
                                encoding = end;
                                end = this.length;
                            }
                            if (
                                encoding !== undefined &&
                                typeof encoding !== "string"
                            ) {
                                throw new TypeError(
                                    "encoding must be a string",
                                );
                            }
                            if (
                                typeof encoding === "string" &&
                                !Buffer.isEncoding(encoding)
                            ) {
                                throw new TypeError(
                                    "Unknown encoding: " + encoding,
                                );
                            }
                            if (val.length === 1) {
                                var code = val.charCodeAt(0);
                                if (
                                    (encoding === "utf8" && code < 128) ||
                                    encoding === "latin1"
                                ) {
                                    // Fast path: If `val` fits into a single byte, use that numeric value.
                                    val = code;
                                }
                            }
                        } else if (typeof val === "number") {
                            val = val & 255;
                        } else if (typeof val === "boolean") {
                            val = Number(val);
                        }

                        // Invalid ranges are not set to a default, so can range check early.
                        if (
                            start < 0 ||
                            this.length < start ||
                            this.length < end
                        ) {
                            throw new RangeError("Out of range index");
                        }

                        if (end <= start) {
                            return this;
                        }

                        start = start >>> 0;
                        end = end === undefined ? this.length : end >>> 0;

                        if (!val) val = 0;

                        var i;
                        if (typeof val === "number") {
                            for (i = start; i < end; ++i) {
                                this[i] = val;
                            }
                        } else {
                            var bytes = Buffer.isBuffer(val)
                                ? val
                                : Buffer.from(val, encoding);
                            var len = bytes.length;
                            if (len === 0) {
                                throw new TypeError(
                                    'The value "' +
                                        val +
                                        '" is invalid for argument "value"',
                                );
                            }
                            for (i = 0; i < end - start; ++i) {
                                this[i + start] = bytes[i % len];
                            }
                        }

                        return this;
                    };

                    // HELPER FUNCTIONS
                    // ================

                    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

                    function base64clean(str) {
                        // Node takes equal signs as end of the Base64 encoding
                        str = str.split("=")[0];
                        // Node strips out invalid characters like \n and \t from the string, base64-js does not
                        str = str.trim().replace(INVALID_BASE64_RE, "");
                        // Node converts strings with length < 2 to ''
                        if (str.length < 2) return "";
                        // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                        while (str.length % 4 !== 0) {
                            str = str + "=";
                        }
                        return str;
                    }

                    function utf8ToBytes(string, units) {
                        units = units || Infinity;
                        var codePoint;
                        var length = string.length;
                        var leadSurrogate = null;
                        var bytes = [];

                        for (var i = 0; i < length; ++i) {
                            codePoint = string.charCodeAt(i);

                            // is surrogate component
                            if (codePoint > 0xd7ff && codePoint < 0xe000) {
                                // last char was a lead
                                if (!leadSurrogate) {
                                    // no lead yet
                                    if (codePoint > 0xdbff) {
                                        // unexpected trail
                                        if ((units -= 3) > -1)
                                            bytes.push(0xef, 0xbf, 0xbd);
                                        continue;
                                    } else if (i + 1 === length) {
                                        // unpaired lead
                                        if ((units -= 3) > -1)
                                            bytes.push(0xef, 0xbf, 0xbd);
                                        continue;
                                    }

                                    // valid lead
                                    leadSurrogate = codePoint;

                                    continue;
                                }

                                // 2 leads in a row
                                if (codePoint < 0xdc00) {
                                    if ((units -= 3) > -1)
                                        bytes.push(0xef, 0xbf, 0xbd);
                                    leadSurrogate = codePoint;
                                    continue;
                                }

                                // valid surrogate pair
                                codePoint =
                                    (((leadSurrogate - 0xd800) << 10) |
                                        (codePoint - 0xdc00)) +
                                    0x10000;
                            } else if (leadSurrogate) {
                                // valid bmp char, but last char was a lead
                                if ((units -= 3) > -1)
                                    bytes.push(0xef, 0xbf, 0xbd);
                            }

                            leadSurrogate = null;

                            // encode utf8
                            if (codePoint < 0x80) {
                                if ((units -= 1) < 0) break;
                                bytes.push(codePoint);
                            } else if (codePoint < 0x800) {
                                if ((units -= 2) < 0) break;
                                bytes.push(
                                    (codePoint >> 0x6) | 0xc0,
                                    (codePoint & 0x3f) | 0x80,
                                );
                            } else if (codePoint < 0x10000) {
                                if ((units -= 3) < 0) break;
                                bytes.push(
                                    (codePoint >> 0xc) | 0xe0,
                                    ((codePoint >> 0x6) & 0x3f) | 0x80,
                                    (codePoint & 0x3f) | 0x80,
                                );
                            } else if (codePoint < 0x110000) {
                                if ((units -= 4) < 0) break;
                                bytes.push(
                                    (codePoint >> 0x12) | 0xf0,
                                    ((codePoint >> 0xc) & 0x3f) | 0x80,
                                    ((codePoint >> 0x6) & 0x3f) | 0x80,
                                    (codePoint & 0x3f) | 0x80,
                                );
                            } else {
                                throw new Error("Invalid code point");
                            }
                        }

                        return bytes;
                    }

                    function asciiToBytes(str) {
                        var byteArray = [];
                        for (var i = 0; i < str.length; ++i) {
                            // Node's code seems to be doing this and not & 0x7F..
                            byteArray.push(str.charCodeAt(i) & 0xff);
                        }
                        return byteArray;
                    }

                    function utf16leToBytes(str, units) {
                        var c, hi, lo;
                        var byteArray = [];
                        for (var i = 0; i < str.length; ++i) {
                            if ((units -= 2) < 0) break;

                            c = str.charCodeAt(i);
                            hi = c >> 8;
                            lo = c % 256;
                            byteArray.push(lo);
                            byteArray.push(hi);
                        }

                        return byteArray;
                    }

                    function base64ToBytes(str) {
                        return base64.toByteArray(base64clean(str));
                    }

                    function blitBuffer(src, dst, offset, length) {
                        for (var i = 0; i < length; ++i) {
                            if (i + offset >= dst.length || i >= src.length)
                                break;
                            dst[i + offset] = src[i];
                        }
                        return i;
                    }

                    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
                    // the `instanceof` check but they should be treated as of that type.
                    // See: https://github.com/feross/buffer/issues/166
                    function isInstance(obj, type) {
                        return (
                            obj instanceof type ||
                            (obj != null &&
                                obj.constructor != null &&
                                obj.constructor.name != null &&
                                obj.constructor.name === type.name)
                        );
                    }
                    function numberIsNaN(obj) {
                        // For IE11 support
                        return obj !== obj; // eslint-disable-line no-self-compare
                    }

                    // Create lookup table for `toString('hex')`
                    // See: https://github.com/feross/buffer/issues/219
                    var hexSliceLookupTable = (function() {
                        var alphabet = "0123456789abcdef";
                        var table = new Array(256);
                        for (var i = 0; i < 16; ++i) {
                            var i16 = i * 16;
                            for (var j = 0; j < 16; ++j) {
                                table[i16 + j] = alphabet[i] + alphabet[j];
                            }
                        }
                        return table;
                    })();
                }.call(this, require("buffer").Buffer));
            },
            { "base64-js": 34, buffer: 35, ieee754: 401 },
        ],
        36: [
            function(require, module, exports) {
                require("../modules/es.symbol");
                require("../modules/es.symbol.async-iterator");
                require("../modules/es.symbol.description");
                require("../modules/es.symbol.has-instance");
                require("../modules/es.symbol.is-concat-spreadable");
                require("../modules/es.symbol.iterator");
                require("../modules/es.symbol.match");
                require("../modules/es.symbol.match-all");
                require("../modules/es.symbol.replace");
                require("../modules/es.symbol.search");
                require("../modules/es.symbol.species");
                require("../modules/es.symbol.split");
                require("../modules/es.symbol.to-primitive");
                require("../modules/es.symbol.to-string-tag");
                require("../modules/es.symbol.unscopables");
                require("../modules/es.object.assign");
                require("../modules/es.object.create");
                require("../modules/es.object.define-property");
                require("../modules/es.object.define-properties");
                require("../modules/es.object.entries");
                require("../modules/es.object.freeze");
                require("../modules/es.object.from-entries");
                require("../modules/es.object.get-own-property-descriptor");
                require("../modules/es.object.get-own-property-descriptors");
                require("../modules/es.object.get-own-property-names");
                require("../modules/es.object.get-prototype-of");
                require("../modules/es.object.is");
                require("../modules/es.object.is-extensible");
                require("../modules/es.object.is-frozen");
                require("../modules/es.object.is-sealed");
                require("../modules/es.object.keys");
                require("../modules/es.object.prevent-extensions");
                require("../modules/es.object.seal");
                require("../modules/es.object.set-prototype-of");
                require("../modules/es.object.values");
                require("../modules/es.object.to-string");
                require("../modules/es.object.define-getter");
                require("../modules/es.object.define-setter");
                require("../modules/es.object.lookup-getter");
                require("../modules/es.object.lookup-setter");
                require("../modules/es.function.bind");
                require("../modules/es.function.name");
                require("../modules/es.function.has-instance");
                require("../modules/es.global-this");
                require("../modules/es.array.from");
                require("../modules/es.array.is-array");
                require("../modules/es.array.of");
                require("../modules/es.array.concat");
                require("../modules/es.array.copy-within");
                require("../modules/es.array.every");
                require("../modules/es.array.fill");
                require("../modules/es.array.filter");
                require("../modules/es.array.find");
                require("../modules/es.array.find-index");
                require("../modules/es.array.flat");
                require("../modules/es.array.flat-map");
                require("../modules/es.array.for-each");
                require("../modules/es.array.includes");
                require("../modules/es.array.index-of");
                require("../modules/es.array.join");
                require("../modules/es.array.last-index-of");
                require("../modules/es.array.map");
                require("../modules/es.array.reduce");
                require("../modules/es.array.reduce-right");
                require("../modules/es.array.reverse");
                require("../modules/es.array.slice");
                require("../modules/es.array.some");
                require("../modules/es.array.sort");
                require("../modules/es.array.splice");
                require("../modules/es.array.species");
                require("../modules/es.array.unscopables.flat");
                require("../modules/es.array.unscopables.flat-map");
                require("../modules/es.array.iterator");
                require("../modules/es.string.from-code-point");
                require("../modules/es.string.raw");
                require("../modules/es.string.code-point-at");
                require("../modules/es.string.ends-with");
                require("../modules/es.string.includes");
                require("../modules/es.string.match");
                require("../modules/es.string.match-all");
                require("../modules/es.string.pad-end");
                require("../modules/es.string.pad-start");
                require("../modules/es.string.repeat");
                require("../modules/es.string.replace");
                require("../modules/es.string.search");
                require("../modules/es.string.split");
                require("../modules/es.string.starts-with");
                require("../modules/es.string.trim");
                require("../modules/es.string.trim-start");
                require("../modules/es.string.trim-end");
                require("../modules/es.string.iterator");
                require("../modules/es.string.anchor");
                require("../modules/es.string.big");
                require("../modules/es.string.blink");
                require("../modules/es.string.bold");
                require("../modules/es.string.fixed");
                require("../modules/es.string.fontcolor");
                require("../modules/es.string.fontsize");
                require("../modules/es.string.italics");
                require("../modules/es.string.link");
                require("../modules/es.string.small");
                require("../modules/es.string.strike");
                require("../modules/es.string.sub");
                require("../modules/es.string.sup");
                require("../modules/es.regexp.constructor");
                require("../modules/es.regexp.exec");
                require("../modules/es.regexp.flags");
                require("../modules/es.regexp.to-string");
                require("../modules/es.parse-int");
                require("../modules/es.parse-float");
                require("../modules/es.number.constructor");
                require("../modules/es.number.epsilon");
                require("../modules/es.number.is-finite");
                require("../modules/es.number.is-integer");
                require("../modules/es.number.is-nan");
                require("../modules/es.number.is-safe-integer");
                require("../modules/es.number.max-safe-integer");
                require("../modules/es.number.min-safe-integer");
                require("../modules/es.number.parse-float");
                require("../modules/es.number.parse-int");
                require("../modules/es.number.to-fixed");
                require("../modules/es.number.to-precision");
                require("../modules/es.math.acosh");
                require("../modules/es.math.asinh");
                require("../modules/es.math.atanh");
                require("../modules/es.math.cbrt");
                require("../modules/es.math.clz32");
                require("../modules/es.math.cosh");
                require("../modules/es.math.expm1");
                require("../modules/es.math.fround");
                require("../modules/es.math.hypot");
                require("../modules/es.math.imul");
                require("../modules/es.math.log10");
                require("../modules/es.math.log1p");
                require("../modules/es.math.log2");
                require("../modules/es.math.sign");
                require("../modules/es.math.sinh");
                require("../modules/es.math.tanh");
                require("../modules/es.math.to-string-tag");
                require("../modules/es.math.trunc");
                require("../modules/es.date.now");
                require("../modules/es.date.to-json");
                require("../modules/es.date.to-iso-string");
                require("../modules/es.date.to-string");
                require("../modules/es.date.to-primitive");
                require("../modules/es.json.to-string-tag");
                require("../modules/es.promise");
                require("../modules/es.promise.all-settled");
                require("../modules/es.promise.finally");
                require("../modules/es.map");
                require("../modules/es.set");
                require("../modules/es.weak-map");
                require("../modules/es.weak-set");
                require("../modules/es.array-buffer.constructor");
                require("../modules/es.array-buffer.is-view");
                require("../modules/es.array-buffer.slice");
                require("../modules/es.data-view");
                require("../modules/es.typed-array.int8-array");
                require("../modules/es.typed-array.uint8-array");
                require("../modules/es.typed-array.uint8-clamped-array");
                require("../modules/es.typed-array.int16-array");
                require("../modules/es.typed-array.uint16-array");
                require("../modules/es.typed-array.int32-array");
                require("../modules/es.typed-array.uint32-array");
                require("../modules/es.typed-array.float32-array");
                require("../modules/es.typed-array.float64-array");
                require("../modules/es.typed-array.from");
                require("../modules/es.typed-array.of");
                require("../modules/es.typed-array.copy-within");
                require("../modules/es.typed-array.every");
                require("../modules/es.typed-array.fill");
                require("../modules/es.typed-array.filter");
                require("../modules/es.typed-array.find");
                require("../modules/es.typed-array.find-index");
                require("../modules/es.typed-array.for-each");
                require("../modules/es.typed-array.includes");
                require("../modules/es.typed-array.index-of");
                require("../modules/es.typed-array.iterator");
                require("../modules/es.typed-array.join");
                require("../modules/es.typed-array.last-index-of");
                require("../modules/es.typed-array.map");
                require("../modules/es.typed-array.reduce");
                require("../modules/es.typed-array.reduce-right");
                require("../modules/es.typed-array.reverse");
                require("../modules/es.typed-array.set");
                require("../modules/es.typed-array.slice");
                require("../modules/es.typed-array.some");
                require("../modules/es.typed-array.sort");
                require("../modules/es.typed-array.subarray");
                require("../modules/es.typed-array.to-locale-string");
                require("../modules/es.typed-array.to-string");
                require("../modules/es.reflect.apply");
                require("../modules/es.reflect.construct");
                require("../modules/es.reflect.define-property");
                require("../modules/es.reflect.delete-property");
                require("../modules/es.reflect.get");
                require("../modules/es.reflect.get-own-property-descriptor");
                require("../modules/es.reflect.get-prototype-of");
                require("../modules/es.reflect.has");
                require("../modules/es.reflect.is-extensible");
                require("../modules/es.reflect.own-keys");
                require("../modules/es.reflect.prevent-extensions");
                require("../modules/es.reflect.set");
                require("../modules/es.reflect.set-prototype-of");

                module.exports = require("../internals/path");
            },
            {
                "../internals/path": 143,
                "../modules/es.array-buffer.constructor": 187,
                "../modules/es.array-buffer.is-view": 188,
                "../modules/es.array-buffer.slice": 189,
                "../modules/es.array.concat": 190,
                "../modules/es.array.copy-within": 191,
                "../modules/es.array.every": 192,
                "../modules/es.array.fill": 193,
                "../modules/es.array.filter": 194,
                "../modules/es.array.find": 196,
                "../modules/es.array.find-index": 195,
                "../modules/es.array.flat": 198,
                "../modules/es.array.flat-map": 197,
                "../modules/es.array.for-each": 199,
                "../modules/es.array.from": 200,
                "../modules/es.array.includes": 201,
                "../modules/es.array.index-of": 202,
                "../modules/es.array.is-array": 203,
                "../modules/es.array.iterator": 204,
                "../modules/es.array.join": 205,
                "../modules/es.array.last-index-of": 206,
                "../modules/es.array.map": 207,
                "../modules/es.array.of": 208,
                "../modules/es.array.reduce": 210,
                "../modules/es.array.reduce-right": 209,
                "../modules/es.array.reverse": 211,
                "../modules/es.array.slice": 212,
                "../modules/es.array.some": 213,
                "../modules/es.array.sort": 214,
                "../modules/es.array.species": 215,
                "../modules/es.array.splice": 216,
                "../modules/es.array.unscopables.flat": 218,
                "../modules/es.array.unscopables.flat-map": 217,
                "../modules/es.data-view": 219,
                "../modules/es.date.now": 220,
                "../modules/es.date.to-iso-string": 221,
                "../modules/es.date.to-json": 222,
                "../modules/es.date.to-primitive": 223,
                "../modules/es.date.to-string": 224,
                "../modules/es.function.bind": 225,
                "../modules/es.function.has-instance": 226,
                "../modules/es.function.name": 227,
                "../modules/es.global-this": 228,
                "../modules/es.json.to-string-tag": 229,
                "../modules/es.map": 230,
                "../modules/es.math.acosh": 231,
                "../modules/es.math.asinh": 232,
                "../modules/es.math.atanh": 233,
                "../modules/es.math.cbrt": 234,
                "../modules/es.math.clz32": 235,
                "../modules/es.math.cosh": 236,
                "../modules/es.math.expm1": 237,
                "../modules/es.math.fround": 238,
                "../modules/es.math.hypot": 239,
                "../modules/es.math.imul": 240,
                "../modules/es.math.log10": 241,
                "../modules/es.math.log1p": 242,
                "../modules/es.math.log2": 243,
                "../modules/es.math.sign": 244,
                "../modules/es.math.sinh": 245,
                "../modules/es.math.tanh": 246,
                "../modules/es.math.to-string-tag": 247,
                "../modules/es.math.trunc": 248,
                "../modules/es.number.constructor": 249,
                "../modules/es.number.epsilon": 250,
                "../modules/es.number.is-finite": 251,
                "../modules/es.number.is-integer": 252,
                "../modules/es.number.is-nan": 253,
                "../modules/es.number.is-safe-integer": 254,
                "../modules/es.number.max-safe-integer": 255,
                "../modules/es.number.min-safe-integer": 256,
                "../modules/es.number.parse-float": 257,
                "../modules/es.number.parse-int": 258,
                "../modules/es.number.to-fixed": 259,
                "../modules/es.number.to-precision": 260,
                "../modules/es.object.assign": 261,
                "../modules/es.object.create": 262,
                "../modules/es.object.define-getter": 263,
                "../modules/es.object.define-properties": 264,
                "../modules/es.object.define-property": 265,
                "../modules/es.object.define-setter": 266,
                "../modules/es.object.entries": 267,
                "../modules/es.object.freeze": 268,
                "../modules/es.object.from-entries": 269,
                "../modules/es.object.get-own-property-descriptor": 270,
                "../modules/es.object.get-own-property-descriptors": 271,
                "../modules/es.object.get-own-property-names": 272,
                "../modules/es.object.get-prototype-of": 273,
                "../modules/es.object.is": 277,
                "../modules/es.object.is-extensible": 274,
                "../modules/es.object.is-frozen": 275,
                "../modules/es.object.is-sealed": 276,
                "../modules/es.object.keys": 278,
                "../modules/es.object.lookup-getter": 279,
                "../modules/es.object.lookup-setter": 280,
                "../modules/es.object.prevent-extensions": 281,
                "../modules/es.object.seal": 282,
                "../modules/es.object.set-prototype-of": 283,
                "../modules/es.object.to-string": 284,
                "../modules/es.object.values": 285,
                "../modules/es.parse-float": 286,
                "../modules/es.parse-int": 287,
                "../modules/es.promise": 290,
                "../modules/es.promise.all-settled": 288,
                "../modules/es.promise.finally": 289,
                "../modules/es.reflect.apply": 291,
                "../modules/es.reflect.construct": 292,
                "../modules/es.reflect.define-property": 293,
                "../modules/es.reflect.delete-property": 294,
                "../modules/es.reflect.get": 297,
                "../modules/es.reflect.get-own-property-descriptor": 295,
                "../modules/es.reflect.get-prototype-of": 296,
                "../modules/es.reflect.has": 298,
                "../modules/es.reflect.is-extensible": 299,
                "../modules/es.reflect.own-keys": 300,
                "../modules/es.reflect.prevent-extensions": 301,
                "../modules/es.reflect.set": 303,
                "../modules/es.reflect.set-prototype-of": 302,
                "../modules/es.regexp.constructor": 304,
                "../modules/es.regexp.exec": 305,
                "../modules/es.regexp.flags": 306,
                "../modules/es.regexp.to-string": 307,
                "../modules/es.set": 308,
                "../modules/es.string.anchor": 309,
                "../modules/es.string.big": 310,
                "../modules/es.string.blink": 311,
                "../modules/es.string.bold": 312,
                "../modules/es.string.code-point-at": 313,
                "../modules/es.string.ends-with": 314,
                "../modules/es.string.fixed": 315,
                "../modules/es.string.fontcolor": 316,
                "../modules/es.string.fontsize": 317,
                "../modules/es.string.from-code-point": 318,
                "../modules/es.string.includes": 319,
                "../modules/es.string.italics": 320,
                "../modules/es.string.iterator": 321,
                "../modules/es.string.link": 322,
                "../modules/es.string.match": 324,
                "../modules/es.string.match-all": 323,
                "../modules/es.string.pad-end": 325,
                "../modules/es.string.pad-start": 326,
                "../modules/es.string.raw": 327,
                "../modules/es.string.repeat": 328,
                "../modules/es.string.replace": 329,
                "../modules/es.string.search": 330,
                "../modules/es.string.small": 331,
                "../modules/es.string.split": 332,
                "../modules/es.string.starts-with": 333,
                "../modules/es.string.strike": 334,
                "../modules/es.string.sub": 335,
                "../modules/es.string.sup": 336,
                "../modules/es.string.trim": 339,
                "../modules/es.string.trim-end": 337,
                "../modules/es.string.trim-start": 338,
                "../modules/es.symbol": 345,
                "../modules/es.symbol.async-iterator": 340,
                "../modules/es.symbol.description": 341,
                "../modules/es.symbol.has-instance": 342,
                "../modules/es.symbol.is-concat-spreadable": 343,
                "../modules/es.symbol.iterator": 344,
                "../modules/es.symbol.match": 347,
                "../modules/es.symbol.match-all": 346,
                "../modules/es.symbol.replace": 348,
                "../modules/es.symbol.search": 349,
                "../modules/es.symbol.species": 350,
                "../modules/es.symbol.split": 351,
                "../modules/es.symbol.to-primitive": 352,
                "../modules/es.symbol.to-string-tag": 353,
                "../modules/es.symbol.unscopables": 354,
                "../modules/es.typed-array.copy-within": 355,
                "../modules/es.typed-array.every": 356,
                "../modules/es.typed-array.fill": 357,
                "../modules/es.typed-array.filter": 358,
                "../modules/es.typed-array.find": 360,
                "../modules/es.typed-array.find-index": 359,
                "../modules/es.typed-array.float32-array": 361,
                "../modules/es.typed-array.float64-array": 362,
                "../modules/es.typed-array.for-each": 363,
                "../modules/es.typed-array.from": 364,
                "../modules/es.typed-array.includes": 365,
                "../modules/es.typed-array.index-of": 366,
                "../modules/es.typed-array.int16-array": 367,
                "../modules/es.typed-array.int32-array": 368,
                "../modules/es.typed-array.int8-array": 369,
                "../modules/es.typed-array.iterator": 370,
                "../modules/es.typed-array.join": 371,
                "../modules/es.typed-array.last-index-of": 372,
                "../modules/es.typed-array.map": 373,
                "../modules/es.typed-array.of": 374,
                "../modules/es.typed-array.reduce": 376,
                "../modules/es.typed-array.reduce-right": 375,
                "../modules/es.typed-array.reverse": 377,
                "../modules/es.typed-array.set": 378,
                "../modules/es.typed-array.slice": 379,
                "../modules/es.typed-array.some": 380,
                "../modules/es.typed-array.sort": 381,
                "../modules/es.typed-array.subarray": 382,
                "../modules/es.typed-array.to-locale-string": 383,
                "../modules/es.typed-array.to-string": 384,
                "../modules/es.typed-array.uint16-array": 385,
                "../modules/es.typed-array.uint32-array": 386,
                "../modules/es.typed-array.uint8-array": 387,
                "../modules/es.typed-array.uint8-clamped-array": 388,
                "../modules/es.weak-map": 389,
                "../modules/es.weak-set": 390,
            },
        ],
        37: [
            function(require, module, exports) {
                module.exports = function(it) {
                    if (typeof it != "function") {
                        throw TypeError(String(it) + " is not a function");
                    }
                    return it;
                };
            },
            {},
        ],
        38: [
            function(require, module, exports) {
                var isObject = require("../internals/is-object");

                module.exports = function(it) {
                    if (!isObject(it) && it !== null) {
                        throw TypeError(
                            "Can't set " + String(it) + " as a prototype",
                        );
                    }
                    return it;
                };
            },
            { "../internals/is-object": 107 },
        ],
        39: [
            function(require, module, exports) {
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var create = require("../internals/object-create");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");

                var UNSCOPABLES = wellKnownSymbol("unscopables");
                var ArrayPrototype = Array.prototype;

                // Array.prototype[@@unscopables]
                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                if (ArrayPrototype[UNSCOPABLES] == undefined) {
                    createNonEnumerableProperty(
                        ArrayPrototype,
                        UNSCOPABLES,
                        create(null),
                    );
                }

                // add a key to Array.prototype[@@unscopables]
                module.exports = function(key) {
                    ArrayPrototype[UNSCOPABLES][key] = true;
                };
            },
            {
                "../internals/create-non-enumerable-property": 68,
                "../internals/object-create": 126,
                "../internals/well-known-symbol": 184,
            },
        ],
        40: [
            function(require, module, exports) {
                "use strict";
                var charAt = require("../internals/string-multibyte").charAt;

                // `AdvanceStringIndex` abstract operation
                // https://tc39.github.io/ecma262/#sec-advancestringindex
                module.exports = function(S, index, unicode) {
                    return index + (unicode ? charAt(S, index).length : 1);
                };
            },
            { "../internals/string-multibyte": 162 },
        ],
        41: [
            function(require, module, exports) {
                module.exports = function(it, Constructor, name) {
                    if (!(it instanceof Constructor)) {
                        throw TypeError(
                            "Incorrect " +
                                (name ? name + " " : "") +
                                "invocation",
                        );
                    }
                    return it;
                };
            },
            {},
        ],
        42: [
            function(require, module, exports) {
                var isObject = require("../internals/is-object");

                module.exports = function(it) {
                    if (!isObject(it)) {
                        throw TypeError(String(it) + " is not an object");
                    }
                    return it;
                };
            },
            { "../internals/is-object": 107 },
        ],
        43: [
            function(require, module, exports) {
                "use strict";
                var DESCRIPTORS = require("../internals/descriptors");
                var global = require("../internals/global");
                var isObject = require("../internals/is-object");
                var has = require("../internals/has");
                var classof = require("../internals/classof");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var redefine = require("../internals/redefine");
                var defineProperty = require("../internals/object-define-property")
                    .f;
                var getPrototypeOf = require("../internals/object-get-prototype-of");
                var setPrototypeOf = require("../internals/object-set-prototype-of");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var uid = require("../internals/uid");

                var DataView = global.DataView;
                var DataViewPrototype = DataView && DataView.prototype;
                var Int8Array = global.Int8Array;
                var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
                var Uint8ClampedArray = global.Uint8ClampedArray;
                var Uint8ClampedArrayPrototype =
                    Uint8ClampedArray && Uint8ClampedArray.prototype;
                var TypedArray = Int8Array && getPrototypeOf(Int8Array);
                var TypedArrayPrototype =
                    Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
                var ObjectPrototype = Object.prototype;
                var isPrototypeOf = ObjectPrototype.isPrototypeOf;

                var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                var TYPED_ARRAY_TAG = uid("TYPED_ARRAY_TAG");
                var NATIVE_ARRAY_BUFFER = !!(global.ArrayBuffer && DataView);
                // Fixing native typed arrays in Opera Presto crashes the browser, see #595
                var NATIVE_ARRAY_BUFFER_VIEWS =
                    NATIVE_ARRAY_BUFFER &&
                    !!setPrototypeOf &&
                    classof(global.opera) !== "Opera";
                var TYPED_ARRAY_TAG_REQIRED = false;
                var NAME;

                var TypedArrayConstructorsList = {
                    Int8Array: 1,
                    Uint8Array: 1,
                    Uint8ClampedArray: 1,
                    Int16Array: 2,
                    Uint16Array: 2,
                    Int32Array: 4,
                    Uint32Array: 4,
                    Float32Array: 4,
                    Float64Array: 8,
                };

                var isView = function isView(it) {
                    var klass = classof(it);
                    return (
                        klass === "DataView" ||
                        has(TypedArrayConstructorsList, klass)
                    );
                };

                var isTypedArray = function(it) {
                    return (
                        isObject(it) &&
                        has(TypedArrayConstructorsList, classof(it))
                    );
                };

                var aTypedArray = function(it) {
                    if (isTypedArray(it)) return it;
                    throw TypeError("Target is not a typed array");
                };

                var aTypedArrayConstructor = function(C) {
                    if (setPrototypeOf) {
                        if (isPrototypeOf.call(TypedArray, C)) return C;
                    } else
                        for (var ARRAY in TypedArrayConstructorsList)
                            if (has(TypedArrayConstructorsList, NAME)) {
                                var TypedArrayConstructor = global[ARRAY];
                                if (
                                    TypedArrayConstructor &&
                                    (C === TypedArrayConstructor ||
                                        isPrototypeOf.call(
                                            TypedArrayConstructor,
                                            C,
                                        ))
                                ) {
                                    return C;
                                }
                            }
                    throw TypeError("Target is not a typed array constructor");
                };

                var exportProto = function(KEY, property, forced) {
                    if (!DESCRIPTORS) return;
                    if (forced)
                        for (var ARRAY in TypedArrayConstructorsList) {
                            var TypedArrayConstructor = global[ARRAY];
                            if (
                                TypedArrayConstructor &&
                                has(TypedArrayConstructor.prototype, KEY)
                            ) {
                                delete TypedArrayConstructor.prototype[KEY];
                            }
                        }
                    if (!TypedArrayPrototype[KEY] || forced) {
                        redefine(
                            TypedArrayPrototype,
                            KEY,
                            forced
                                ? property
                                : (NATIVE_ARRAY_BUFFER_VIEWS &&
                                      Int8ArrayPrototype[KEY]) ||
                                      property,
                        );
                    }
                };

                var exportStatic = function(KEY, property, forced) {
                    var ARRAY, TypedArrayConstructor;
                    if (!DESCRIPTORS) return;
                    if (setPrototypeOf) {
                        if (forced)
                            for (ARRAY in TypedArrayConstructorsList) {
                                TypedArrayConstructor = global[ARRAY];
                                if (
                                    TypedArrayConstructor &&
                                    has(TypedArrayConstructor, KEY)
                                ) {
                                    delete TypedArrayConstructor[KEY];
                                }
                            }
                        if (!TypedArray[KEY] || forced) {
                            // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
                            try {
                                return redefine(
                                    TypedArray,
                                    KEY,
                                    forced
                                        ? property
                                        : (NATIVE_ARRAY_BUFFER_VIEWS &&
                                              Int8Array[KEY]) ||
                                              property,
                                );
                            } catch (error) {
                                /* empty */
                            }
                        } else return;
                    }
                    for (ARRAY in TypedArrayConstructorsList) {
                        TypedArrayConstructor = global[ARRAY];
                        if (
                            TypedArrayConstructor &&
                            (!TypedArrayConstructor[KEY] || forced)
                        ) {
                            redefine(TypedArrayConstructor, KEY, property);
                        }
                    }
                };

                for (NAME in TypedArrayConstructorsList) {
                    if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
                }

                // WebKit bug - typed arrays constructors prototype is Object.prototype
                if (
                    !NATIVE_ARRAY_BUFFER_VIEWS ||
                    typeof TypedArray != "function" ||
                    TypedArray === Function.prototype
                ) {
                    // eslint-disable-next-line no-shadow
                    TypedArray = function TypedArray() {
                        throw TypeError("Incorrect invocation");
                    };
                    if (NATIVE_ARRAY_BUFFER_VIEWS)
                        for (NAME in TypedArrayConstructorsList) {
                            if (global[NAME])
                                setPrototypeOf(global[NAME], TypedArray);
                        }
                }

                if (
                    !NATIVE_ARRAY_BUFFER_VIEWS ||
                    !TypedArrayPrototype ||
                    TypedArrayPrototype === ObjectPrototype
                ) {
                    TypedArrayPrototype = TypedArray.prototype;
                    if (NATIVE_ARRAY_BUFFER_VIEWS)
                        for (NAME in TypedArrayConstructorsList) {
                            if (global[NAME])
                                setPrototypeOf(
                                    global[NAME].prototype,
                                    TypedArrayPrototype,
                                );
                        }
                }

                // WebKit bug - one more object in Uint8ClampedArray prototype chain
                if (
                    NATIVE_ARRAY_BUFFER_VIEWS &&
                    getPrototypeOf(Uint8ClampedArrayPrototype) !==
                        TypedArrayPrototype
                ) {
                    setPrototypeOf(
                        Uint8ClampedArrayPrototype,
                        TypedArrayPrototype,
                    );
                }

                if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
                    TYPED_ARRAY_TAG_REQIRED = true;
                    defineProperty(TypedArrayPrototype, TO_STRING_TAG, {
                        get: function() {
                            return isObject(this)
                                ? this[TYPED_ARRAY_TAG]
                                : undefined;
                        },
                    });
                    for (NAME in TypedArrayConstructorsList)
                        if (global[NAME]) {
                            createNonEnumerableProperty(
                                global[NAME],
                                TYPED_ARRAY_TAG,
                                NAME,
                            );
                        }
                }

                // WebKit bug - the same parent prototype for typed arrays and data view
                if (
                    NATIVE_ARRAY_BUFFER &&
                    setPrototypeOf &&
                    getPrototypeOf(DataViewPrototype) !== ObjectPrototype
                ) {
                    setPrototypeOf(DataViewPrototype, ObjectPrototype);
                }

                module.exports = {
                    NATIVE_ARRAY_BUFFER: NATIVE_ARRAY_BUFFER,
                    NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
                    TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
                    aTypedArray: aTypedArray,
                    aTypedArrayConstructor: aTypedArrayConstructor,
                    exportProto: exportProto,
                    exportStatic: exportStatic,
                    isView: isView,
                    isTypedArray: isTypedArray,
                    TypedArray: TypedArray,
                    TypedArrayPrototype: TypedArrayPrototype,
                };
            },
            {
                "../internals/classof": 59,
                "../internals/create-non-enumerable-property": 68,
                "../internals/descriptors": 75,
                "../internals/global": 92,
                "../internals/has": 93,
                "../internals/is-object": 107,
                "../internals/object-define-property": 128,
                "../internals/object-get-prototype-of": 133,
                "../internals/object-set-prototype-of": 137,
                "../internals/redefine": 148,
                "../internals/uid": 180,
                "../internals/well-known-symbol": 184,
            },
        ],
        44: [
            function(require, module, exports) {
                "use strict";
                var global = require("../internals/global");
                var DESCRIPTORS = require("../internals/descriptors");
                var NATIVE_ARRAY_BUFFER = require("../internals/array-buffer-view-core")
                    .NATIVE_ARRAY_BUFFER;
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var redefineAll = require("../internals/redefine-all");
                var fails = require("../internals/fails");
                var anInstance = require("../internals/an-instance");
                var toInteger = require("../internals/to-integer");
                var toLength = require("../internals/to-length");
                var toIndex = require("../internals/to-index");
                var getOwnPropertyNames = require("../internals/object-get-own-property-names")
                    .f;
                var defineProperty = require("../internals/object-define-property")
                    .f;
                var arrayFill = require("../internals/array-fill");
                var setToStringTag = require("../internals/set-to-string-tag");
                var InternalStateModule = require("../internals/internal-state");

                var getInternalState = InternalStateModule.get;
                var setInternalState = InternalStateModule.set;
                var ARRAY_BUFFER = "ArrayBuffer";
                var DATA_VIEW = "DataView";
                var PROTOTYPE = "prototype";
                var WRONG_LENGTH = "Wrong length";
                var WRONG_INDEX = "Wrong index";
                var NativeArrayBuffer = global[ARRAY_BUFFER];
                var $ArrayBuffer = NativeArrayBuffer;
                var $DataView = global[DATA_VIEW];
                var Math = global.Math;
                var RangeError = global.RangeError;
                // eslint-disable-next-line no-shadow-restricted-names
                var Infinity = 1 / 0;
                var abs = Math.abs;
                var pow = Math.pow;
                var floor = Math.floor;
                var log = Math.log;
                var LN2 = Math.LN2;

                // IEEE754 conversions based on https://github.com/feross/ieee754
                var packIEEE754 = function(number, mantissaLength, bytes) {
                    var buffer = new Array(bytes);
                    var exponentLength = bytes * 8 - mantissaLength - 1;
                    var eMax = (1 << exponentLength) - 1;
                    var eBias = eMax >> 1;
                    var rt =
                        mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
                    var sign =
                        number < 0 || (number === 0 && 1 / number < 0) ? 1 : 0;
                    var index = 0;
                    var exponent, mantissa, c;
                    number = abs(number);
                    // eslint-disable-next-line no-self-compare
                    if (number != number || number === Infinity) {
                        // eslint-disable-next-line no-self-compare
                        mantissa = number != number ? 1 : 0;
                        exponent = eMax;
                    } else {
                        exponent = floor(log(number) / LN2);
                        if (number * (c = pow(2, -exponent)) < 1) {
                            exponent--;
                            c *= 2;
                        }
                        if (exponent + eBias >= 1) {
                            number += rt / c;
                        } else {
                            number += rt * pow(2, 1 - eBias);
                        }
                        if (number * c >= 2) {
                            exponent++;
                            c /= 2;
                        }
                        if (exponent + eBias >= eMax) {
                            mantissa = 0;
                            exponent = eMax;
                        } else if (exponent + eBias >= 1) {
                            mantissa =
                                (number * c - 1) * pow(2, mantissaLength);
                            exponent = exponent + eBias;
                        } else {
                            mantissa =
                                number *
                                pow(2, eBias - 1) *
                                pow(2, mantissaLength);
                            exponent = 0;
                        }
                    }
                    for (
                        ;
                        mantissaLength >= 8;
                        buffer[index++] = mantissa & 255,
                            mantissa /= 256,
                            mantissaLength -= 8
                    );
                    exponent = (exponent << mantissaLength) | mantissa;
                    exponentLength += mantissaLength;
                    for (
                        ;
                        exponentLength > 0;
                        buffer[index++] = exponent & 255,
                            exponent /= 256,
                            exponentLength -= 8
                    );
                    buffer[--index] |= sign * 128;
                    return buffer;
                };

                var unpackIEEE754 = function(buffer, mantissaLength) {
                    var bytes = buffer.length;
                    var exponentLength = bytes * 8 - mantissaLength - 1;
                    var eMax = (1 << exponentLength) - 1;
                    var eBias = eMax >> 1;
                    var nBits = exponentLength - 7;
                    var index = bytes - 1;
                    var sign = buffer[index--];
                    var exponent = sign & 127;
                    var mantissa;
                    sign >>= 7;
                    for (
                        ;
                        nBits > 0;
                        exponent = exponent * 256 + buffer[index],
                            index--,
                            nBits -= 8
                    );
                    mantissa = exponent & ((1 << -nBits) - 1);
                    exponent >>= -nBits;
                    nBits += mantissaLength;
                    for (
                        ;
                        nBits > 0;
                        mantissa = mantissa * 256 + buffer[index],
                            index--,
                            nBits -= 8
                    );
                    if (exponent === 0) {
                        exponent = 1 - eBias;
                    } else if (exponent === eMax) {
                        return mantissa ? NaN : sign ? -Infinity : Infinity;
                    } else {
                        mantissa = mantissa + pow(2, mantissaLength);
                        exponent = exponent - eBias;
                    }
                    return (
                        (sign ? -1 : 1) *
                        mantissa *
                        pow(2, exponent - mantissaLength)
                    );
                };

                var unpackInt32 = function(buffer) {
                    return (
                        (buffer[3] << 24) |
                        (buffer[2] << 16) |
                        (buffer[1] << 8) |
                        buffer[0]
                    );
                };

                var packInt8 = function(number) {
                    return [number & 0xff];
                };

                var packInt16 = function(number) {
                    return [number & 0xff, (number >> 8) & 0xff];
                };

                var packInt32 = function(number) {
                    return [
                        number & 0xff,
                        (number >> 8) & 0xff,
                        (number >> 16) & 0xff,
                        (number >> 24) & 0xff,
                    ];
                };

                var packFloat32 = function(number) {
                    return packIEEE754(number, 23, 4);
                };

                var packFloat64 = function(number) {
                    return packIEEE754(number, 52, 8);
                };

                var addGetter = function(Constructor, key) {
                    defineProperty(Constructor[PROTOTYPE], key, {
                        get: function() {
                            return getInternalState(this)[key];
                        },
                    });
                };

                var get = function(view, count, index, isLittleEndian) {
                    var numIndex = +index;
                    var intIndex = toIndex(numIndex);
                    var store = getInternalState(view);
                    if (intIndex + count > store.byteLength)
                        throw RangeError(WRONG_INDEX);
                    var bytes = getInternalState(store.buffer).bytes;
                    var start = intIndex + store.byteOffset;
                    var pack = bytes.slice(start, start + count);
                    return isLittleEndian ? pack : pack.reverse();
                };

                var set = function(
                    view,
                    count,
                    index,
                    conversion,
                    value,
                    isLittleEndian,
                ) {
                    var numIndex = +index;
                    var intIndex = toIndex(numIndex);
                    var store = getInternalState(view);
                    if (intIndex + count > store.byteLength)
                        throw RangeError(WRONG_INDEX);
                    var bytes = getInternalState(store.buffer).bytes;
                    var start = intIndex + store.byteOffset;
                    var pack = conversion(+value);
                    for (var i = 0; i < count; i++)
                        bytes[start + i] =
                            pack[isLittleEndian ? i : count - i - 1];
                };

                if (!NATIVE_ARRAY_BUFFER) {
                    $ArrayBuffer = function ArrayBuffer(length) {
                        anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
                        var byteLength = toIndex(length);
                        setInternalState(this, {
                            bytes: arrayFill.call(new Array(byteLength), 0),
                            byteLength: byteLength,
                        });
                        if (!DESCRIPTORS) this.byteLength = byteLength;
                    };

                    $DataView = function DataView(
                        buffer,
                        byteOffset,
                        byteLength,
                    ) {
                        anInstance(this, $DataView, DATA_VIEW);
                        anInstance(buffer, $ArrayBuffer, DATA_VIEW);
                        var bufferLength = getInternalState(buffer).byteLength;
                        var offset = toInteger(byteOffset);
                        if (offset < 0 || offset > bufferLength)
                            throw RangeError("Wrong offset");
                        byteLength =
                            byteLength === undefined
                                ? bufferLength - offset
                                : toLength(byteLength);
                        if (offset + byteLength > bufferLength)
                            throw RangeError(WRONG_LENGTH);
                        setInternalState(this, {
                            buffer: buffer,
                            byteLength: byteLength,
                            byteOffset: offset,
                        });
                        if (!DESCRIPTORS) {
                            this.buffer = buffer;
                            this.byteLength = byteLength;
                            this.byteOffset = offset;
                        }
                    };

                    if (DESCRIPTORS) {
                        addGetter($ArrayBuffer, "byteLength");
                        addGetter($DataView, "buffer");
                        addGetter($DataView, "byteLength");
                        addGetter($DataView, "byteOffset");
                    }

                    redefineAll($DataView[PROTOTYPE], {
                        getInt8: function getInt8(byteOffset) {
                            return (get(this, 1, byteOffset)[0] << 24) >> 24;
                        },
                        getUint8: function getUint8(byteOffset) {
                            return get(this, 1, byteOffset)[0];
                        },
                        getInt16: function getInt16(
                            byteOffset /* , littleEndian */,
                        ) {
                            var bytes = get(
                                this,
                                2,
                                byteOffset,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                            return (((bytes[1] << 8) | bytes[0]) << 16) >> 16;
                        },
                        getUint16: function getUint16(
                            byteOffset /* , littleEndian */,
                        ) {
                            var bytes = get(
                                this,
                                2,
                                byteOffset,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                            return (bytes[1] << 8) | bytes[0];
                        },
                        getInt32: function getInt32(
                            byteOffset /* , littleEndian */,
                        ) {
                            return unpackInt32(
                                get(
                                    this,
                                    4,
                                    byteOffset,
                                    arguments.length > 1
                                        ? arguments[1]
                                        : undefined,
                                ),
                            );
                        },
                        getUint32: function getUint32(
                            byteOffset /* , littleEndian */,
                        ) {
                            return (
                                unpackInt32(
                                    get(
                                        this,
                                        4,
                                        byteOffset,
                                        arguments.length > 1
                                            ? arguments[1]
                                            : undefined,
                                    ),
                                ) >>> 0
                            );
                        },
                        getFloat32: function getFloat32(
                            byteOffset /* , littleEndian */,
                        ) {
                            return unpackIEEE754(
                                get(
                                    this,
                                    4,
                                    byteOffset,
                                    arguments.length > 1
                                        ? arguments[1]
                                        : undefined,
                                ),
                                23,
                            );
                        },
                        getFloat64: function getFloat64(
                            byteOffset /* , littleEndian */,
                        ) {
                            return unpackIEEE754(
                                get(
                                    this,
                                    8,
                                    byteOffset,
                                    arguments.length > 1
                                        ? arguments[1]
                                        : undefined,
                                ),
                                52,
                            );
                        },
                        setInt8: function setInt8(byteOffset, value) {
                            set(this, 1, byteOffset, packInt8, value);
                        },
                        setUint8: function setUint8(byteOffset, value) {
                            set(this, 1, byteOffset, packInt8, value);
                        },
                        setInt16: function setInt16(
                            byteOffset,
                            value /* , littleEndian */,
                        ) {
                            set(
                                this,
                                2,
                                byteOffset,
                                packInt16,
                                value,
                                arguments.length > 2 ? arguments[2] : undefined,
                            );
                        },
                        setUint16: function setUint16(
                            byteOffset,
                            value /* , littleEndian */,
                        ) {
                            set(
                                this,
                                2,
                                byteOffset,
                                packInt16,
                                value,
                                arguments.length > 2 ? arguments[2] : undefined,
                            );
                        },
                        setInt32: function setInt32(
                            byteOffset,
                            value /* , littleEndian */,
                        ) {
                            set(
                                this,
                                4,
                                byteOffset,
                                packInt32,
                                value,
                                arguments.length > 2 ? arguments[2] : undefined,
                            );
                        },
                        setUint32: function setUint32(
                            byteOffset,
                            value /* , littleEndian */,
                        ) {
                            set(
                                this,
                                4,
                                byteOffset,
                                packInt32,
                                value,
                                arguments.length > 2 ? arguments[2] : undefined,
                            );
                        },
                        setFloat32: function setFloat32(
                            byteOffset,
                            value /* , littleEndian */,
                        ) {
                            set(
                                this,
                                4,
                                byteOffset,
                                packFloat32,
                                value,
                                arguments.length > 2 ? arguments[2] : undefined,
                            );
                        },
                        setFloat64: function setFloat64(
                            byteOffset,
                            value /* , littleEndian */,
                        ) {
                            set(
                                this,
                                8,
                                byteOffset,
                                packFloat64,
                                value,
                                arguments.length > 2 ? arguments[2] : undefined,
                            );
                        },
                    });
                } else {
                    if (
                        !fails(function() {
                            NativeArrayBuffer(1);
                        }) ||
                        !fails(function() {
                            new NativeArrayBuffer(-1); // eslint-disable-line no-new
                        }) ||
                        fails(function() {
                            new NativeArrayBuffer(); // eslint-disable-line no-new
                            new NativeArrayBuffer(1.5); // eslint-disable-line no-new
                            new NativeArrayBuffer(NaN); // eslint-disable-line no-new
                            return NativeArrayBuffer.name != ARRAY_BUFFER;
                        })
                    ) {
                        $ArrayBuffer = function ArrayBuffer(length) {
                            anInstance(this, $ArrayBuffer);
                            return new NativeArrayBuffer(toIndex(length));
                        };
                        var ArrayBufferPrototype = ($ArrayBuffer[PROTOTYPE] =
                            NativeArrayBuffer[PROTOTYPE]);
                        for (
                            var keys = getOwnPropertyNames(NativeArrayBuffer),
                                j = 0,
                                key;
                            keys.length > j;

                        ) {
                            if (!((key = keys[j++]) in $ArrayBuffer)) {
                                createNonEnumerableProperty(
                                    $ArrayBuffer,
                                    key,
                                    NativeArrayBuffer[key],
                                );
                            }
                        }
                        ArrayBufferPrototype.constructor = $ArrayBuffer;
                    }
                    // iOS Safari 7.x bug
                    var testView = new $DataView(new $ArrayBuffer(2));
                    var nativeSetInt8 = $DataView[PROTOTYPE].setInt8;
                    testView.setInt8(0, 2147483648);
                    testView.setInt8(1, 2147483649);
                    if (testView.getInt8(0) || !testView.getInt8(1))
                        redefineAll(
                            $DataView[PROTOTYPE],
                            {
                                setInt8: function setInt8(byteOffset, value) {
                                    nativeSetInt8.call(
                                        this,
                                        byteOffset,
                                        (value << 24) >> 24,
                                    );
                                },
                                setUint8: function setUint8(byteOffset, value) {
                                    nativeSetInt8.call(
                                        this,
                                        byteOffset,
                                        (value << 24) >> 24,
                                    );
                                },
                            },
                            { unsafe: true },
                        );
                }

                setToStringTag($ArrayBuffer, ARRAY_BUFFER);
                setToStringTag($DataView, DATA_VIEW);

                module.exports = {
                    ArrayBuffer: $ArrayBuffer,
                    DataView: $DataView,
                };
            },
            {
                "../internals/an-instance": 41,
                "../internals/array-buffer-view-core": 43,
                "../internals/array-fill": 46,
                "../internals/create-non-enumerable-property": 68,
                "../internals/descriptors": 75,
                "../internals/fails": 80,
                "../internals/global": 92,
                "../internals/internal-state": 101,
                "../internals/object-define-property": 128,
                "../internals/object-get-own-property-names": 131,
                "../internals/redefine-all": 147,
                "../internals/set-to-string-tag": 156,
                "../internals/to-index": 169,
                "../internals/to-integer": 171,
                "../internals/to-length": 172,
            },
        ],
        45: [
            function(require, module, exports) {
                "use strict";
                var toObject = require("../internals/to-object");
                var toAbsoluteIndex = require("../internals/to-absolute-index");
                var toLength = require("../internals/to-length");

                var min = Math.min;

                // `Array.prototype.copyWithin` method implementation
                // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
                module.exports =
                    [].copyWithin ||
                    function copyWithin(
                        target /* = 0 */,
                        start /* = 0, end = @length */,
                    ) {
                        var O = toObject(this);
                        var len = toLength(O.length);
                        var to = toAbsoluteIndex(target, len);
                        var from = toAbsoluteIndex(start, len);
                        var end =
                            arguments.length > 2 ? arguments[2] : undefined;
                        var count = min(
                            (end === undefined
                                ? len
                                : toAbsoluteIndex(end, len)) - from,
                            len - to,
                        );
                        var inc = 1;
                        if (from < to && to < from + count) {
                            inc = -1;
                            from += count - 1;
                            to += count - 1;
                        }
                        while (count-- > 0) {
                            if (from in O) O[to] = O[from];
                            else delete O[to];
                            to += inc;
                            from += inc;
                        }
                        return O;
                    };
            },
            {
                "../internals/to-absolute-index": 168,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        46: [
            function(require, module, exports) {
                "use strict";
                var toObject = require("../internals/to-object");
                var toAbsoluteIndex = require("../internals/to-absolute-index");
                var toLength = require("../internals/to-length");

                // `Array.prototype.fill` method implementation
                // https://tc39.github.io/ecma262/#sec-array.prototype.fill
                module.exports = function fill(
                    value /* , start = 0, end = @length */,
                ) {
                    var O = toObject(this);
                    var length = toLength(O.length);
                    var argumentsLength = arguments.length;
                    var index = toAbsoluteIndex(
                        argumentsLength > 1 ? arguments[1] : undefined,
                        length,
                    );
                    var end = argumentsLength > 2 ? arguments[2] : undefined;
                    var endPos =
                        end === undefined
                            ? length
                            : toAbsoluteIndex(end, length);
                    while (endPos > index) O[index++] = value;
                    return O;
                };
            },
            {
                "../internals/to-absolute-index": 168,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        47: [
            function(require, module, exports) {
                "use strict";
                var $forEach = require("../internals/array-iteration").forEach;
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                // `Array.prototype.forEach` method implementation
                // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
                module.exports = sloppyArrayMethod("forEach")
                    ? function forEach(callbackfn /* , thisArg */) {
                          return $forEach(
                              this,
                              callbackfn,
                              arguments.length > 1 ? arguments[1] : undefined,
                          );
                      }
                    : [].forEach;
            },
            {
                "../internals/array-iteration": 50,
                "../internals/sloppy-array-method": 160,
            },
        ],
        48: [
            function(require, module, exports) {
                "use strict";
                var bind = require("../internals/bind-context");
                var toObject = require("../internals/to-object");
                var callWithSafeIterationClosing = require("../internals/call-with-safe-iteration-closing");
                var isArrayIteratorMethod = require("../internals/is-array-iterator-method");
                var toLength = require("../internals/to-length");
                var createProperty = require("../internals/create-property");
                var getIteratorMethod = require("../internals/get-iterator-method");

                // `Array.from` method implementation
                // https://tc39.github.io/ecma262/#sec-array.from
                module.exports = function from(
                    arrayLike /* , mapfn = undefined, thisArg = undefined */,
                ) {
                    var O = toObject(arrayLike);
                    var C = typeof this == "function" ? this : Array;
                    var argumentsLength = arguments.length;
                    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
                    var mapping = mapfn !== undefined;
                    var index = 0;
                    var iteratorMethod = getIteratorMethod(O);
                    var length, result, step, iterator, next;
                    if (mapping)
                        mapfn = bind(
                            mapfn,
                            argumentsLength > 2 ? arguments[2] : undefined,
                            2,
                        );
                    // if the target is not iterable or it's an array with the default iterator - use a simple case
                    if (
                        iteratorMethod != undefined &&
                        !(C == Array && isArrayIteratorMethod(iteratorMethod))
                    ) {
                        iterator = iteratorMethod.call(O);
                        next = iterator.next;
                        result = new C();
                        for (; !(step = next.call(iterator)).done; index++) {
                            createProperty(
                                result,
                                index,
                                mapping
                                    ? callWithSafeIterationClosing(
                                          iterator,
                                          mapfn,
                                          [step.value, index],
                                          true,
                                      )
                                    : step.value,
                            );
                        }
                    } else {
                        length = toLength(O.length);
                        result = new C(length);
                        for (; length > index; index++) {
                            createProperty(
                                result,
                                index,
                                mapping ? mapfn(O[index], index) : O[index],
                            );
                        }
                    }
                    result.length = index;
                    return result;
                };
            },
            {
                "../internals/bind-context": 55,
                "../internals/call-with-safe-iteration-closing": 56,
                "../internals/create-property": 70,
                "../internals/get-iterator-method": 90,
                "../internals/is-array-iterator-method": 102,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        49: [
            function(require, module, exports) {
                var toIndexedObject = require("../internals/to-indexed-object");
                var toLength = require("../internals/to-length");
                var toAbsoluteIndex = require("../internals/to-absolute-index");

                // `Array.prototype.{ indexOf, includes }` methods implementation
                var createMethod = function(IS_INCLUDES) {
                    return function($this, el, fromIndex) {
                        var O = toIndexedObject($this);
                        var length = toLength(O.length);
                        var index = toAbsoluteIndex(fromIndex, length);
                        var value;
                        // Array#includes uses SameValueZero equality algorithm
                        // eslint-disable-next-line no-self-compare
                        if (IS_INCLUDES && el != el)
                            while (length > index) {
                                value = O[index++];
                                // eslint-disable-next-line no-self-compare
                                if (value != value) return true;
                                // Array#indexOf ignores holes, Array#includes - not
                            }
                        else
                            for (; length > index; index++) {
                                if (
                                    (IS_INCLUDES || index in O) &&
                                    O[index] === el
                                )
                                    return IS_INCLUDES || index || 0;
                            }
                        return !IS_INCLUDES && -1;
                    };
                };

                module.exports = {
                    // `Array.prototype.includes` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.includes
                    includes: createMethod(true),
                    // `Array.prototype.indexOf` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
                    indexOf: createMethod(false),
                };
            },
            {
                "../internals/to-absolute-index": 168,
                "../internals/to-indexed-object": 170,
                "../internals/to-length": 172,
            },
        ],
        50: [
            function(require, module, exports) {
                var bind = require("../internals/bind-context");
                var IndexedObject = require("../internals/indexed-object");
                var toObject = require("../internals/to-object");
                var toLength = require("../internals/to-length");
                var arraySpeciesCreate = require("../internals/array-species-create");

                var push = [].push;

                // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
                var createMethod = function(TYPE) {
                    var IS_MAP = TYPE == 1;
                    var IS_FILTER = TYPE == 2;
                    var IS_SOME = TYPE == 3;
                    var IS_EVERY = TYPE == 4;
                    var IS_FIND_INDEX = TYPE == 6;
                    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
                    return function($this, callbackfn, that, specificCreate) {
                        var O = toObject($this);
                        var self = IndexedObject(O);
                        var boundFunction = bind(callbackfn, that, 3);
                        var length = toLength(self.length);
                        var index = 0;
                        var create = specificCreate || arraySpeciesCreate;
                        var target = IS_MAP
                            ? create($this, length)
                            : IS_FILTER
                            ? create($this, 0)
                            : undefined;
                        var value, result;
                        for (; length > index; index++)
                            if (NO_HOLES || index in self) {
                                value = self[index];
                                result = boundFunction(value, index, O);
                                if (TYPE) {
                                    if (IS_MAP) target[index] = result;
                                    // map
                                    else if (result)
                                        switch (TYPE) {
                                            case 3:
                                                return true; // some
                                            case 5:
                                                return value; // find
                                            case 6:
                                                return index; // findIndex
                                            case 2:
                                                push.call(target, value); // filter
                                        }
                                    else if (IS_EVERY) return false; // every
                                }
                            }
                        return IS_FIND_INDEX
                            ? -1
                            : IS_SOME || IS_EVERY
                            ? IS_EVERY
                            : target;
                    };
                };

                module.exports = {
                    // `Array.prototype.forEach` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
                    forEach: createMethod(0),
                    // `Array.prototype.map` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.map
                    map: createMethod(1),
                    // `Array.prototype.filter` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.filter
                    filter: createMethod(2),
                    // `Array.prototype.some` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.some
                    some: createMethod(3),
                    // `Array.prototype.every` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.every
                    every: createMethod(4),
                    // `Array.prototype.find` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.find
                    find: createMethod(5),
                    // `Array.prototype.findIndex` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
                    findIndex: createMethod(6),
                };
            },
            {
                "../internals/array-species-create": 54,
                "../internals/bind-context": 55,
                "../internals/indexed-object": 98,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        51: [
            function(require, module, exports) {
                "use strict";
                var toIndexedObject = require("../internals/to-indexed-object");
                var toInteger = require("../internals/to-integer");
                var toLength = require("../internals/to-length");
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                var min = Math.min;
                var nativeLastIndexOf = [].lastIndexOf;
                var NEGATIVE_ZERO =
                    !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
                var SLOPPY_METHOD = sloppyArrayMethod("lastIndexOf");

                // `Array.prototype.lastIndexOf` method implementation
                // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
                module.exports =
                    NEGATIVE_ZERO || SLOPPY_METHOD
                        ? function lastIndexOf(
                              searchElement /* , fromIndex = @[*-1] */,
                          ) {
                              // convert -0 to +0
                              if (NEGATIVE_ZERO)
                                  return (
                                      nativeLastIndexOf.apply(
                                          this,
                                          arguments,
                                      ) || 0
                                  );
                              var O = toIndexedObject(this);
                              var length = toLength(O.length);
                              var index = length - 1;
                              if (arguments.length > 1)
                                  index = min(index, toInteger(arguments[1]));
                              if (index < 0) index = length + index;
                              for (; index >= 0; index--)
                                  if (index in O && O[index] === searchElement)
                                      return index || 0;
                              return -1;
                          }
                        : nativeLastIndexOf;
            },
            {
                "../internals/sloppy-array-method": 160,
                "../internals/to-indexed-object": 170,
                "../internals/to-integer": 171,
                "../internals/to-length": 172,
            },
        ],
        52: [
            function(require, module, exports) {
                var fails = require("../internals/fails");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var V8_VERSION = require("../internals/v8-version");

                var SPECIES = wellKnownSymbol("species");

                module.exports = function(METHOD_NAME) {
                    // We can't use this feature detection in V8 since it causes
                    // deoptimization and serious performance degradation
                    // https://github.com/zloirock/core-js/issues/677
                    return (
                        V8_VERSION >= 51 ||
                        !fails(function() {
                            var array = [];
                            var constructor = (array.constructor = {});
                            constructor[SPECIES] = function() {
                                return { foo: 1 };
                            };
                            return array[METHOD_NAME](Boolean).foo !== 1;
                        })
                    );
                };
            },
            {
                "../internals/fails": 80,
                "../internals/v8-version": 182,
                "../internals/well-known-symbol": 184,
            },
        ],
        53: [
            function(require, module, exports) {
                var aFunction = require("../internals/a-function");
                var toObject = require("../internals/to-object");
                var IndexedObject = require("../internals/indexed-object");
                var toLength = require("../internals/to-length");

                // `Array.prototype.{ reduce, reduceRight }` methods implementation
                var createMethod = function(IS_RIGHT) {
                    return function(that, callbackfn, argumentsLength, memo) {
                        aFunction(callbackfn);
                        var O = toObject(that);
                        var self = IndexedObject(O);
                        var length = toLength(O.length);
                        var index = IS_RIGHT ? length - 1 : 0;
                        var i = IS_RIGHT ? -1 : 1;
                        if (argumentsLength < 2)
                            while (true) {
                                if (index in self) {
                                    memo = self[index];
                                    index += i;
                                    break;
                                }
                                index += i;
                                if (IS_RIGHT ? index < 0 : length <= index) {
                                    throw TypeError(
                                        "Reduce of empty array with no initial value",
                                    );
                                }
                            }
                        for (
                            ;
                            IS_RIGHT ? index >= 0 : length > index;
                            index += i
                        )
                            if (index in self) {
                                memo = callbackfn(memo, self[index], index, O);
                            }
                        return memo;
                    };
                };

                module.exports = {
                    // `Array.prototype.reduce` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
                    left: createMethod(false),
                    // `Array.prototype.reduceRight` method
                    // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
                    right: createMethod(true),
                };
            },
            {
                "../internals/a-function": 37,
                "../internals/indexed-object": 98,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        54: [
            function(require, module, exports) {
                var isObject = require("../internals/is-object");
                var isArray = require("../internals/is-array");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var SPECIES = wellKnownSymbol("species");

                // `ArraySpeciesCreate` abstract operation
                // https://tc39.github.io/ecma262/#sec-arrayspeciescreate
                module.exports = function(originalArray, length) {
                    var C;
                    if (isArray(originalArray)) {
                        C = originalArray.constructor;
                        // cross-realm fallback
                        if (
                            typeof C == "function" &&
                            (C === Array || isArray(C.prototype))
                        )
                            C = undefined;
                        else if (isObject(C)) {
                            C = C[SPECIES];
                            if (C === null) C = undefined;
                        }
                    }
                    return new (C === undefined ? Array : C)(
                        length === 0 ? 0 : length,
                    );
                };
            },
            {
                "../internals/is-array": 103,
                "../internals/is-object": 107,
                "../internals/well-known-symbol": 184,
            },
        ],
        55: [
            function(require, module, exports) {
                var aFunction = require("../internals/a-function");

                // optional / simple context binding
                module.exports = function(fn, that, length) {
                    aFunction(fn);
                    if (that === undefined) return fn;
                    switch (length) {
                        case 0:
                            return function() {
                                return fn.call(that);
                            };
                        case 1:
                            return function(a) {
                                return fn.call(that, a);
                            };
                        case 2:
                            return function(a, b) {
                                return fn.call(that, a, b);
                            };
                        case 3:
                            return function(a, b, c) {
                                return fn.call(that, a, b, c);
                            };
                    }
                    return function(/* ...args */) {
                        return fn.apply(that, arguments);
                    };
                };
            },
            { "../internals/a-function": 37 },
        ],
        56: [
            function(require, module, exports) {
                var anObject = require("../internals/an-object");

                // call something on iterator step with safe closing on error
                module.exports = function(iterator, fn, value, ENTRIES) {
                    try {
                        return ENTRIES
                            ? fn(anObject(value)[0], value[1])
                            : fn(value);
                        // 7.4.6 IteratorClose(iterator, completion)
                    } catch (error) {
                        var returnMethod = iterator["return"];
                        if (returnMethod !== undefined)
                            anObject(returnMethod.call(iterator));
                        throw error;
                    }
                };
            },
            { "../internals/an-object": 42 },
        ],
        57: [
            function(require, module, exports) {
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var ITERATOR = wellKnownSymbol("iterator");
                var SAFE_CLOSING = false;

                try {
                    var called = 0;
                    var iteratorWithReturn = {
                        next: function() {
                            return { done: !!called++ };
                        },
                        return: function() {
                            SAFE_CLOSING = true;
                        },
                    };
                    iteratorWithReturn[ITERATOR] = function() {
                        return this;
                    };
                    // eslint-disable-next-line no-throw-literal
                    Array.from(iteratorWithReturn, function() {
                        throw 2;
                    });
                } catch (error) {
                    /* empty */
                }

                module.exports = function(exec, SKIP_CLOSING) {
                    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
                    var ITERATION_SUPPORT = false;
                    try {
                        var object = {};
                        object[ITERATOR] = function() {
                            return {
                                next: function() {
                                    return { done: (ITERATION_SUPPORT = true) };
                                },
                            };
                        };
                        exec(object);
                    } catch (error) {
                        /* empty */
                    }
                    return ITERATION_SUPPORT;
                };
            },
            { "../internals/well-known-symbol": 184 },
        ],
        58: [
            function(require, module, exports) {
                var toString = {}.toString;

                module.exports = function(it) {
                    return toString.call(it).slice(8, -1);
                };
            },
            {},
        ],
        59: [
            function(require, module, exports) {
                var classofRaw = require("../internals/classof-raw");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                // ES3 wrong here
                var CORRECT_ARGUMENTS =
                    classofRaw(
                        (function() {
                            return arguments;
                        })(),
                    ) == "Arguments";

                // fallback for IE11 Script Access Denied error
                var tryGet = function(it, key) {
                    try {
                        return it[key];
                    } catch (error) {
                        /* empty */
                    }
                };

                // getting tag from ES6+ `Object.prototype.toString`
                module.exports = function(it) {
                    var O, tag, result;
                    return it === undefined
                        ? "Undefined"
                        : it === null
                        ? "Null"
                        : // @@toStringTag case
                        typeof (tag = tryGet(
                              (O = Object(it)),
                              TO_STRING_TAG,
                          )) == "string"
                        ? tag
                        : // builtinTag case
                        CORRECT_ARGUMENTS
                        ? classofRaw(O)
                        : // ES3 arguments fallback
                        (result = classofRaw(O)) == "Object" &&
                          typeof O.callee == "function"
                        ? "Arguments"
                        : result;
                };
            },
            {
                "../internals/classof-raw": 58,
                "../internals/well-known-symbol": 184,
            },
        ],
        60: [
            function(require, module, exports) {
                "use strict";
                var defineProperty = require("../internals/object-define-property")
                    .f;
                var create = require("../internals/object-create");
                var redefineAll = require("../internals/redefine-all");
                var bind = require("../internals/bind-context");
                var anInstance = require("../internals/an-instance");
                var iterate = require("../internals/iterate");
                var defineIterator = require("../internals/define-iterator");
                var setSpecies = require("../internals/set-species");
                var DESCRIPTORS = require("../internals/descriptors");
                var fastKey = require("../internals/internal-metadata").fastKey;
                var InternalStateModule = require("../internals/internal-state");

                var setInternalState = InternalStateModule.set;
                var internalStateGetterFor = InternalStateModule.getterFor;

                module.exports = {
                    getConstructor: function(
                        wrapper,
                        CONSTRUCTOR_NAME,
                        IS_MAP,
                        ADDER,
                    ) {
                        var C = wrapper(function(that, iterable) {
                            anInstance(that, C, CONSTRUCTOR_NAME);
                            setInternalState(that, {
                                type: CONSTRUCTOR_NAME,
                                index: create(null),
                                first: undefined,
                                last: undefined,
                                size: 0,
                            });
                            if (!DESCRIPTORS) that.size = 0;
                            if (iterable != undefined)
                                iterate(iterable, that[ADDER], that, IS_MAP);
                        });

                        var getInternalState = internalStateGetterFor(
                            CONSTRUCTOR_NAME,
                        );

                        var define = function(that, key, value) {
                            var state = getInternalState(that);
                            var entry = getEntry(that, key);
                            var previous, index;
                            // change existing entry
                            if (entry) {
                                entry.value = value;
                                // create new entry
                            } else {
                                state.last = entry = {
                                    index: (index = fastKey(key, true)),
                                    key: key,
                                    value: value,
                                    previous: (previous = state.last),
                                    next: undefined,
                                    removed: false,
                                };
                                if (!state.first) state.first = entry;
                                if (previous) previous.next = entry;
                                if (DESCRIPTORS) state.size++;
                                else that.size++;
                                // add to index
                                if (index !== "F") state.index[index] = entry;
                            }
                            return that;
                        };

                        var getEntry = function(that, key) {
                            var state = getInternalState(that);
                            // fast case
                            var index = fastKey(key);
                            var entry;
                            if (index !== "F") return state.index[index];
                            // frozen object case
                            for (
                                entry = state.first;
                                entry;
                                entry = entry.next
                            ) {
                                if (entry.key == key) return entry;
                            }
                        };

                        redefineAll(C.prototype, {
                            // 23.1.3.1 Map.prototype.clear()
                            // 23.2.3.2 Set.prototype.clear()
                            clear: function clear() {
                                var that = this;
                                var state = getInternalState(that);
                                var data = state.index;
                                var entry = state.first;
                                while (entry) {
                                    entry.removed = true;
                                    if (entry.previous)
                                        entry.previous = entry.previous.next = undefined;
                                    delete data[entry.index];
                                    entry = entry.next;
                                }
                                state.first = state.last = undefined;
                                if (DESCRIPTORS) state.size = 0;
                                else that.size = 0;
                            },
                            // 23.1.3.3 Map.prototype.delete(key)
                            // 23.2.3.4 Set.prototype.delete(value)
                            delete: function(key) {
                                var that = this;
                                var state = getInternalState(that);
                                var entry = getEntry(that, key);
                                if (entry) {
                                    var next = entry.next;
                                    var prev = entry.previous;
                                    delete state.index[entry.index];
                                    entry.removed = true;
                                    if (prev) prev.next = next;
                                    if (next) next.previous = prev;
                                    if (state.first == entry)
                                        state.first = next;
                                    if (state.last == entry) state.last = prev;
                                    if (DESCRIPTORS) state.size--;
                                    else that.size--;
                                }
                                return !!entry;
                            },
                            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
                            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
                            forEach: function forEach(
                                callbackfn /* , that = undefined */,
                            ) {
                                var state = getInternalState(this);
                                var boundFunction = bind(
                                    callbackfn,
                                    arguments.length > 1
                                        ? arguments[1]
                                        : undefined,
                                    3,
                                );
                                var entry;
                                while (
                                    (entry = entry ? entry.next : state.first)
                                ) {
                                    boundFunction(entry.value, entry.key, this);
                                    // revert to the last existing entry
                                    while (entry && entry.removed)
                                        entry = entry.previous;
                                }
                            },
                            // 23.1.3.7 Map.prototype.has(key)
                            // 23.2.3.7 Set.prototype.has(value)
                            has: function has(key) {
                                return !!getEntry(this, key);
                            },
                        });

                        redefineAll(
                            C.prototype,
                            IS_MAP
                                ? {
                                      // 23.1.3.6 Map.prototype.get(key)
                                      get: function get(key) {
                                          var entry = getEntry(this, key);
                                          return entry && entry.value;
                                      },
                                      // 23.1.3.9 Map.prototype.set(key, value)
                                      set: function set(key, value) {
                                          return define(this, key === 0
                                              ? 0
                                              : key, value);
                                      },
                                  }
                                : {
                                      // 23.2.3.1 Set.prototype.add(value)
                                      add: function add(value) {
                                          return define(this, (value =
                                              value === 0 ? 0 : value), value);
                                      },
                                  },
                        );
                        if (DESCRIPTORS)
                            defineProperty(C.prototype, "size", {
                                get: function() {
                                    return getInternalState(this).size;
                                },
                            });
                        return C;
                    },
                    setStrong: function(C, CONSTRUCTOR_NAME, IS_MAP) {
                        var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
                        var getInternalCollectionState = internalStateGetterFor(
                            CONSTRUCTOR_NAME,
                        );
                        var getInternalIteratorState = internalStateGetterFor(
                            ITERATOR_NAME,
                        );
                        // add .keys, .values, .entries, [@@iterator]
                        // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
                        defineIterator(
                            C,
                            CONSTRUCTOR_NAME,
                            function(iterated, kind) {
                                setInternalState(this, {
                                    type: ITERATOR_NAME,
                                    target: iterated,
                                    state: getInternalCollectionState(iterated),
                                    kind: kind,
                                    last: undefined,
                                });
                            },
                            function() {
                                var state = getInternalIteratorState(this);
                                var kind = state.kind;
                                var entry = state.last;
                                // revert to the last existing entry
                                while (entry && entry.removed)
                                    entry = entry.previous;
                                // get next entry
                                if (
                                    !state.target ||
                                    !(state.last = entry = entry
                                        ? entry.next
                                        : state.state.first)
                                ) {
                                    // or finish the iteration
                                    state.target = undefined;
                                    return { value: undefined, done: true };
                                }
                                // return step by kind
                                if (kind == "keys")
                                    return { value: entry.key, done: false };
                                if (kind == "values")
                                    return { value: entry.value, done: false };
                                return {
                                    value: [entry.key, entry.value],
                                    done: false,
                                };
                            },
                            IS_MAP ? "entries" : "values",
                            !IS_MAP,
                            true,
                        );

                        // add [@@species], 23.1.2.2, 23.2.2.2
                        setSpecies(CONSTRUCTOR_NAME);
                    },
                };
            },
            {
                "../internals/an-instance": 41,
                "../internals/bind-context": 55,
                "../internals/define-iterator": 73,
                "../internals/descriptors": 75,
                "../internals/internal-metadata": 100,
                "../internals/internal-state": 101,
                "../internals/iterate": 110,
                "../internals/object-create": 126,
                "../internals/object-define-property": 128,
                "../internals/redefine-all": 147,
                "../internals/set-species": 155,
            },
        ],
        61: [
            function(require, module, exports) {
                "use strict";
                var redefineAll = require("../internals/redefine-all");
                var getWeakData = require("../internals/internal-metadata")
                    .getWeakData;
                var anObject = require("../internals/an-object");
                var isObject = require("../internals/is-object");
                var anInstance = require("../internals/an-instance");
                var iterate = require("../internals/iterate");
                var ArrayIterationModule = require("../internals/array-iteration");
                var $has = require("../internals/has");
                var InternalStateModule = require("../internals/internal-state");

                var setInternalState = InternalStateModule.set;
                var internalStateGetterFor = InternalStateModule.getterFor;
                var find = ArrayIterationModule.find;
                var findIndex = ArrayIterationModule.findIndex;
                var id = 0;

                // fallback for uncaught frozen keys
                var uncaughtFrozenStore = function(store) {
                    return (
                        store.frozen ||
                        (store.frozen = new UncaughtFrozenStore())
                    );
                };

                var UncaughtFrozenStore = function() {
                    this.entries = [];
                };

                var findUncaughtFrozen = function(store, key) {
                    return find(store.entries, function(it) {
                        return it[0] === key;
                    });
                };

                UncaughtFrozenStore.prototype = {
                    get: function(key) {
                        var entry = findUncaughtFrozen(this, key);
                        if (entry) return entry[1];
                    },
                    has: function(key) {
                        return !!findUncaughtFrozen(this, key);
                    },
                    set: function(key, value) {
                        var entry = findUncaughtFrozen(this, key);
                        if (entry) entry[1] = value;
                        else this.entries.push([key, value]);
                    },
                    delete: function(key) {
                        var index = findIndex(this.entries, function(it) {
                            return it[0] === key;
                        });
                        if (~index) this.entries.splice(index, 1);
                        return !!~index;
                    },
                };

                module.exports = {
                    getConstructor: function(
                        wrapper,
                        CONSTRUCTOR_NAME,
                        IS_MAP,
                        ADDER,
                    ) {
                        var C = wrapper(function(that, iterable) {
                            anInstance(that, C, CONSTRUCTOR_NAME);
                            setInternalState(that, {
                                type: CONSTRUCTOR_NAME,
                                id: id++,
                                frozen: undefined,
                            });
                            if (iterable != undefined)
                                iterate(iterable, that[ADDER], that, IS_MAP);
                        });

                        var getInternalState = internalStateGetterFor(
                            CONSTRUCTOR_NAME,
                        );

                        var define = function(that, key, value) {
                            var state = getInternalState(that);
                            var data = getWeakData(anObject(key), true);
                            if (data === true)
                                uncaughtFrozenStore(state).set(key, value);
                            else data[state.id] = value;
                            return that;
                        };

                        redefineAll(C.prototype, {
                            // 23.3.3.2 WeakMap.prototype.delete(key)
                            // 23.4.3.3 WeakSet.prototype.delete(value)
                            delete: function(key) {
                                var state = getInternalState(this);
                                if (!isObject(key)) return false;
                                var data = getWeakData(key);
                                if (data === true)
                                    return uncaughtFrozenStore(state)["delete"](
                                        key,
                                    );
                                return (
                                    data &&
                                    $has(data, state.id) &&
                                    delete data[state.id]
                                );
                            },
                            // 23.3.3.4 WeakMap.prototype.has(key)
                            // 23.4.3.4 WeakSet.prototype.has(value)
                            has: function has(key) {
                                var state = getInternalState(this);
                                if (!isObject(key)) return false;
                                var data = getWeakData(key);
                                if (data === true)
                                    return uncaughtFrozenStore(state).has(key);
                                return data && $has(data, state.id);
                            },
                        });

                        redefineAll(
                            C.prototype,
                            IS_MAP
                                ? {
                                      // 23.3.3.3 WeakMap.prototype.get(key)
                                      get: function get(key) {
                                          var state = getInternalState(this);
                                          if (isObject(key)) {
                                              var data = getWeakData(key);
                                              if (data === true)
                                                  return uncaughtFrozenStore(
                                                      state,
                                                  ).get(key);
                                              return data
                                                  ? data[state.id]
                                                  : undefined;
                                          }
                                      },
                                      // 23.3.3.5 WeakMap.prototype.set(key, value)
                                      set: function set(key, value) {
                                          return define(this, key, value);
                                      },
                                  }
                                : {
                                      // 23.4.3.1 WeakSet.prototype.add(value)
                                      add: function add(value) {
                                          return define(this, value, true);
                                      },
                                  },
                        );

                        return C;
                    },
                };
            },
            {
                "../internals/an-instance": 41,
                "../internals/an-object": 42,
                "../internals/array-iteration": 50,
                "../internals/has": 93,
                "../internals/internal-metadata": 100,
                "../internals/internal-state": 101,
                "../internals/is-object": 107,
                "../internals/iterate": 110,
                "../internals/redefine-all": 147,
            },
        ],
        62: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var global = require("../internals/global");
                var isForced = require("../internals/is-forced");
                var redefine = require("../internals/redefine");
                var InternalMetadataModule = require("../internals/internal-metadata");
                var iterate = require("../internals/iterate");
                var anInstance = require("../internals/an-instance");
                var isObject = require("../internals/is-object");
                var fails = require("../internals/fails");
                var checkCorrectnessOfIteration = require("../internals/check-correctness-of-iteration");
                var setToStringTag = require("../internals/set-to-string-tag");
                var inheritIfRequired = require("../internals/inherit-if-required");

                module.exports = function(
                    CONSTRUCTOR_NAME,
                    wrapper,
                    common,
                    IS_MAP,
                    IS_WEAK,
                ) {
                    var NativeConstructor = global[CONSTRUCTOR_NAME];
                    var NativePrototype =
                        NativeConstructor && NativeConstructor.prototype;
                    var Constructor = NativeConstructor;
                    var ADDER = IS_MAP ? "set" : "add";
                    var exported = {};

                    var fixMethod = function(KEY) {
                        var nativeMethod = NativePrototype[KEY];
                        redefine(
                            NativePrototype,
                            KEY,
                            KEY == "add"
                                ? function add(value) {
                                      nativeMethod.call(
                                          this,
                                          value === 0 ? 0 : value,
                                      );
                                      return this;
                                  }
                                : KEY == "delete"
                                ? function(key) {
                                      return IS_WEAK && !isObject(key)
                                          ? false
                                          : nativeMethod.call(
                                                this,
                                                key === 0 ? 0 : key,
                                            );
                                  }
                                : KEY == "get"
                                ? function get(key) {
                                      return IS_WEAK && !isObject(key)
                                          ? undefined
                                          : nativeMethod.call(
                                                this,
                                                key === 0 ? 0 : key,
                                            );
                                  }
                                : KEY == "has"
                                ? function has(key) {
                                      return IS_WEAK && !isObject(key)
                                          ? false
                                          : nativeMethod.call(
                                                this,
                                                key === 0 ? 0 : key,
                                            );
                                  }
                                : function set(key, value) {
                                      nativeMethod.call(
                                          this,
                                          key === 0 ? 0 : key,
                                          value,
                                      );
                                      return this;
                                  },
                        );
                    };

                    // eslint-disable-next-line max-len
                    if (
                        isForced(
                            CONSTRUCTOR_NAME,
                            typeof NativeConstructor != "function" ||
                                !(
                                    IS_WEAK ||
                                    (NativePrototype.forEach &&
                                        !fails(function() {
                                            new NativeConstructor()
                                                .entries()
                                                .next();
                                        }))
                                ),
                        )
                    ) {
                        // create collection constructor
                        Constructor = common.getConstructor(
                            wrapper,
                            CONSTRUCTOR_NAME,
                            IS_MAP,
                            ADDER,
                        );
                        InternalMetadataModule.REQUIRED = true;
                    } else if (isForced(CONSTRUCTOR_NAME, true)) {
                        var instance = new Constructor();
                        // early implementations not supports chaining
                        var HASNT_CHAINING =
                            instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
                        // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
                        var THROWS_ON_PRIMITIVES = fails(function() {
                            instance.has(1);
                        });
                        // most early implementations doesn't supports iterables, most modern - not close it correctly
                        // eslint-disable-next-line no-new
                        var ACCEPT_ITERABLES = checkCorrectnessOfIteration(
                            function(iterable) {
                                new NativeConstructor(iterable);
                            },
                        );
                        // for early implementations -0 and +0 not the same
                        var BUGGY_ZERO =
                            !IS_WEAK &&
                            fails(function() {
                                // V8 ~ Chromium 42- fails only with 5+ elements
                                var $instance = new NativeConstructor();
                                var index = 5;
                                while (index--) $instance[ADDER](index, index);
                                return !$instance.has(-0);
                            });

                        if (!ACCEPT_ITERABLES) {
                            Constructor = wrapper(function(dummy, iterable) {
                                anInstance(
                                    dummy,
                                    Constructor,
                                    CONSTRUCTOR_NAME,
                                );
                                var that = inheritIfRequired(
                                    new NativeConstructor(),
                                    dummy,
                                    Constructor,
                                );
                                if (iterable != undefined)
                                    iterate(
                                        iterable,
                                        that[ADDER],
                                        that,
                                        IS_MAP,
                                    );
                                return that;
                            });
                            Constructor.prototype = NativePrototype;
                            NativePrototype.constructor = Constructor;
                        }

                        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                            fixMethod("delete");
                            fixMethod("has");
                            IS_MAP && fixMethod("get");
                        }

                        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

                        // weak collections should not contains .clear method
                        if (IS_WEAK && NativePrototype.clear)
                            delete NativePrototype.clear;
                    }

                    exported[CONSTRUCTOR_NAME] = Constructor;
                    $(
                        {
                            global: true,
                            forced: Constructor != NativeConstructor,
                        },
                        exported,
                    );

                    setToStringTag(Constructor, CONSTRUCTOR_NAME);

                    if (!IS_WEAK)
                        common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

                    return Constructor;
                };
            },
            {
                "../internals/an-instance": 41,
                "../internals/check-correctness-of-iteration": 57,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/global": 92,
                "../internals/inherit-if-required": 99,
                "../internals/internal-metadata": 100,
                "../internals/is-forced": 104,
                "../internals/is-object": 107,
                "../internals/iterate": 110,
                "../internals/redefine": 148,
                "../internals/set-to-string-tag": 156,
            },
        ],
        63: [
            function(require, module, exports) {
                var has = require("../internals/has");
                var ownKeys = require("../internals/own-keys");
                var getOwnPropertyDescriptorModule = require("../internals/object-get-own-property-descriptor");
                var definePropertyModule = require("../internals/object-define-property");

                module.exports = function(target, source) {
                    var keys = ownKeys(source);
                    var defineProperty = definePropertyModule.f;
                    var getOwnPropertyDescriptor =
                        getOwnPropertyDescriptorModule.f;
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        if (!has(target, key))
                            defineProperty(
                                target,
                                key,
                                getOwnPropertyDescriptor(source, key),
                            );
                    }
                };
            },
            {
                "../internals/has": 93,
                "../internals/object-define-property": 128,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/own-keys": 140,
            },
        ],
        64: [
            function(require, module, exports) {
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var MATCH = wellKnownSymbol("match");

                module.exports = function(METHOD_NAME) {
                    var regexp = /./;
                    try {
                        "/./"[METHOD_NAME](regexp);
                    } catch (e) {
                        try {
                            regexp[MATCH] = false;
                            return "/./"[METHOD_NAME](regexp);
                        } catch (f) {
                            /* empty */
                        }
                    }
                    return false;
                };
            },
            { "../internals/well-known-symbol": 184 },
        ],
        65: [
            function(require, module, exports) {
                var fails = require("../internals/fails");

                module.exports = !fails(function() {
                    function F() {
                        /* empty */
                    }
                    F.prototype.constructor = null;
                    return Object.getPrototypeOf(new F()) !== F.prototype;
                });
            },
            { "../internals/fails": 80 },
        ],
        66: [
            function(require, module, exports) {
                var requireObjectCoercible = require("../internals/require-object-coercible");

                var quot = /"/g;

                // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
                // https://tc39.github.io/ecma262/#sec-createhtml
                module.exports = function(string, tag, attribute, value) {
                    var S = String(requireObjectCoercible(string));
                    var p1 = "<" + tag;
                    if (attribute !== "")
                        p1 +=
                            " " +
                            attribute +
                            '="' +
                            String(value).replace(quot, "&quot;") +
                            '"';
                    return p1 + ">" + S + "</" + tag + ">";
                };
            },
            { "../internals/require-object-coercible": 152 },
        ],
        67: [
            function(require, module, exports) {
                "use strict";
                var IteratorPrototype = require("../internals/iterators-core")
                    .IteratorPrototype;
                var create = require("../internals/object-create");
                var createPropertyDescriptor = require("../internals/create-property-descriptor");
                var setToStringTag = require("../internals/set-to-string-tag");
                var Iterators = require("../internals/iterators");

                var returnThis = function() {
                    return this;
                };

                module.exports = function(IteratorConstructor, NAME, next) {
                    var TO_STRING_TAG = NAME + " Iterator";
                    IteratorConstructor.prototype = create(IteratorPrototype, {
                        next: createPropertyDescriptor(1, next),
                    });
                    setToStringTag(
                        IteratorConstructor,
                        TO_STRING_TAG,
                        false,
                        true,
                    );
                    Iterators[TO_STRING_TAG] = returnThis;
                    return IteratorConstructor;
                };
            },
            {
                "../internals/create-property-descriptor": 69,
                "../internals/iterators": 112,
                "../internals/iterators-core": 111,
                "../internals/object-create": 126,
                "../internals/set-to-string-tag": 156,
            },
        ],
        68: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var definePropertyModule = require("../internals/object-define-property");
                var createPropertyDescriptor = require("../internals/create-property-descriptor");

                module.exports = DESCRIPTORS
                    ? function(object, key, value) {
                          return definePropertyModule.f(
                              object,
                              key,
                              createPropertyDescriptor(1, value),
                          );
                      }
                    : function(object, key, value) {
                          object[key] = value;
                          return object;
                      };
            },
            {
                "../internals/create-property-descriptor": 69,
                "../internals/descriptors": 75,
                "../internals/object-define-property": 128,
            },
        ],
        69: [
            function(require, module, exports) {
                module.exports = function(bitmap, value) {
                    return {
                        enumerable: !(bitmap & 1),
                        configurable: !(bitmap & 2),
                        writable: !(bitmap & 4),
                        value: value,
                    };
                };
            },
            {},
        ],
        70: [
            function(require, module, exports) {
                "use strict";
                var toPrimitive = require("../internals/to-primitive");
                var definePropertyModule = require("../internals/object-define-property");
                var createPropertyDescriptor = require("../internals/create-property-descriptor");

                module.exports = function(object, key, value) {
                    var propertyKey = toPrimitive(key);
                    if (propertyKey in object)
                        definePropertyModule.f(
                            object,
                            propertyKey,
                            createPropertyDescriptor(0, value),
                        );
                    else object[propertyKey] = value;
                };
            },
            {
                "../internals/create-property-descriptor": 69,
                "../internals/object-define-property": 128,
                "../internals/to-primitive": 176,
            },
        ],
        71: [
            function(require, module, exports) {
                "use strict";
                var fails = require("../internals/fails");
                var padStart = require("../internals/string-pad").start;

                var abs = Math.abs;
                var DatePrototype = Date.prototype;
                var getTime = DatePrototype.getTime;
                var nativeDateToISOString = DatePrototype.toISOString;

                // `Date.prototype.toISOString` method implementation
                // https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
                // PhantomJS / old WebKit fails here:
                module.exports =
                    fails(function() {
                        return (
                            nativeDateToISOString.call(new Date(-5e13 - 1)) !=
                            "0385-07-25T07:06:39.999Z"
                        );
                    }) ||
                    !fails(function() {
                        nativeDateToISOString.call(new Date(NaN));
                    })
                        ? function toISOString() {
                              if (!isFinite(getTime.call(this)))
                                  throw RangeError("Invalid time value");
                              var date = this;
                              var year = date.getUTCFullYear();
                              var milliseconds = date.getUTCMilliseconds();
                              var sign =
                                  year < 0 ? "-" : year > 9999 ? "+" : "";
                              return (
                                  sign +
                                  padStart(abs(year), sign ? 6 : 4, 0) +
                                  "-" +
                                  padStart(date.getUTCMonth() + 1, 2, 0) +
                                  "-" +
                                  padStart(date.getUTCDate(), 2, 0) +
                                  "T" +
                                  padStart(date.getUTCHours(), 2, 0) +
                                  ":" +
                                  padStart(date.getUTCMinutes(), 2, 0) +
                                  ":" +
                                  padStart(date.getUTCSeconds(), 2, 0) +
                                  "." +
                                  padStart(milliseconds, 3, 0) +
                                  "Z"
                              );
                          }
                        : nativeDateToISOString;
            },
            { "../internals/fails": 80, "../internals/string-pad": 163 },
        ],
        72: [
            function(require, module, exports) {
                "use strict";
                var anObject = require("../internals/an-object");
                var toPrimitive = require("../internals/to-primitive");

                module.exports = function(hint) {
                    if (
                        hint !== "string" &&
                        hint !== "number" &&
                        hint !== "default"
                    ) {
                        throw TypeError("Incorrect hint");
                    }
                    return toPrimitive(anObject(this), hint !== "number");
                };
            },
            { "../internals/an-object": 42, "../internals/to-primitive": 176 },
        ],
        73: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createIteratorConstructor = require("../internals/create-iterator-constructor");
                var getPrototypeOf = require("../internals/object-get-prototype-of");
                var setPrototypeOf = require("../internals/object-set-prototype-of");
                var setToStringTag = require("../internals/set-to-string-tag");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var redefine = require("../internals/redefine");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var IS_PURE = require("../internals/is-pure");
                var Iterators = require("../internals/iterators");
                var IteratorsCore = require("../internals/iterators-core");

                var IteratorPrototype = IteratorsCore.IteratorPrototype;
                var BUGGY_SAFARI_ITERATORS =
                    IteratorsCore.BUGGY_SAFARI_ITERATORS;
                var ITERATOR = wellKnownSymbol("iterator");
                var KEYS = "keys";
                var VALUES = "values";
                var ENTRIES = "entries";

                var returnThis = function() {
                    return this;
                };

                module.exports = function(
                    Iterable,
                    NAME,
                    IteratorConstructor,
                    next,
                    DEFAULT,
                    IS_SET,
                    FORCED,
                ) {
                    createIteratorConstructor(IteratorConstructor, NAME, next);

                    var getIterationMethod = function(KIND) {
                        if (KIND === DEFAULT && defaultIterator)
                            return defaultIterator;
                        if (
                            !BUGGY_SAFARI_ITERATORS &&
                            KIND in IterablePrototype
                        )
                            return IterablePrototype[KIND];
                        switch (KIND) {
                            case KEYS:
                                return function keys() {
                                    return new IteratorConstructor(this, KIND);
                                };
                            case VALUES:
                                return function values() {
                                    return new IteratorConstructor(this, KIND);
                                };
                            case ENTRIES:
                                return function entries() {
                                    return new IteratorConstructor(this, KIND);
                                };
                        }
                        return function() {
                            return new IteratorConstructor(this);
                        };
                    };

                    var TO_STRING_TAG = NAME + " Iterator";
                    var INCORRECT_VALUES_NAME = false;
                    var IterablePrototype = Iterable.prototype;
                    var nativeIterator =
                        IterablePrototype[ITERATOR] ||
                        IterablePrototype["@@iterator"] ||
                        (DEFAULT && IterablePrototype[DEFAULT]);
                    var defaultIterator =
                        (!BUGGY_SAFARI_ITERATORS && nativeIterator) ||
                        getIterationMethod(DEFAULT);
                    var anyNativeIterator =
                        NAME == "Array"
                            ? IterablePrototype.entries || nativeIterator
                            : nativeIterator;
                    var CurrentIteratorPrototype, methods, KEY;

                    // fix native
                    if (anyNativeIterator) {
                        CurrentIteratorPrototype = getPrototypeOf(
                            anyNativeIterator.call(new Iterable()),
                        );
                        if (
                            IteratorPrototype !== Object.prototype &&
                            CurrentIteratorPrototype.next
                        ) {
                            if (
                                !IS_PURE &&
                                getPrototypeOf(CurrentIteratorPrototype) !==
                                    IteratorPrototype
                            ) {
                                if (setPrototypeOf) {
                                    setPrototypeOf(
                                        CurrentIteratorPrototype,
                                        IteratorPrototype,
                                    );
                                } else if (
                                    typeof CurrentIteratorPrototype[ITERATOR] !=
                                    "function"
                                ) {
                                    createNonEnumerableProperty(
                                        CurrentIteratorPrototype,
                                        ITERATOR,
                                        returnThis,
                                    );
                                }
                            }
                            // Set @@toStringTag to native iterators
                            setToStringTag(
                                CurrentIteratorPrototype,
                                TO_STRING_TAG,
                                true,
                                true,
                            );
                            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
                        }
                    }

                    // fix Array#{values, @@iterator}.name in V8 / FF
                    if (
                        DEFAULT == VALUES &&
                        nativeIterator &&
                        nativeIterator.name !== VALUES
                    ) {
                        INCORRECT_VALUES_NAME = true;
                        defaultIterator = function values() {
                            return nativeIterator.call(this);
                        };
                    }

                    // define iterator
                    if (
                        (!IS_PURE || FORCED) &&
                        IterablePrototype[ITERATOR] !== defaultIterator
                    ) {
                        createNonEnumerableProperty(
                            IterablePrototype,
                            ITERATOR,
                            defaultIterator,
                        );
                    }
                    Iterators[NAME] = defaultIterator;

                    // export additional methods
                    if (DEFAULT) {
                        methods = {
                            values: getIterationMethod(VALUES),
                            keys: IS_SET
                                ? defaultIterator
                                : getIterationMethod(KEYS),
                            entries: getIterationMethod(ENTRIES),
                        };
                        if (FORCED)
                            for (KEY in methods) {
                                if (
                                    BUGGY_SAFARI_ITERATORS ||
                                    INCORRECT_VALUES_NAME ||
                                    !(KEY in IterablePrototype)
                                ) {
                                    redefine(
                                        IterablePrototype,
                                        KEY,
                                        methods[KEY],
                                    );
                                }
                            }
                        else
                            $(
                                {
                                    target: NAME,
                                    proto: true,
                                    forced:
                                        BUGGY_SAFARI_ITERATORS ||
                                        INCORRECT_VALUES_NAME,
                                },
                                methods,
                            );
                    }

                    return methods;
                };
            },
            {
                "../internals/create-iterator-constructor": 67,
                "../internals/create-non-enumerable-property": 68,
                "../internals/export": 79,
                "../internals/is-pure": 108,
                "../internals/iterators": 112,
                "../internals/iterators-core": 111,
                "../internals/object-get-prototype-of": 133,
                "../internals/object-set-prototype-of": 137,
                "../internals/redefine": 148,
                "../internals/set-to-string-tag": 156,
                "../internals/well-known-symbol": 184,
            },
        ],
        74: [
            function(require, module, exports) {
                var path = require("../internals/path");
                var has = require("../internals/has");
                var wrappedWellKnownSymbolModule = require("../internals/wrapped-well-known-symbol");
                var defineProperty = require("../internals/object-define-property")
                    .f;

                module.exports = function(NAME) {
                    var Symbol = path.Symbol || (path.Symbol = {});
                    if (!has(Symbol, NAME))
                        defineProperty(Symbol, NAME, {
                            value: wrappedWellKnownSymbolModule.f(NAME),
                        });
                };
            },
            {
                "../internals/has": 93,
                "../internals/object-define-property": 128,
                "../internals/path": 143,
                "../internals/wrapped-well-known-symbol": 186,
            },
        ],
        75: [
            function(require, module, exports) {
                var fails = require("../internals/fails");

                // Thank's IE8 for his funny defineProperty
                module.exports = !fails(function() {
                    return (
                        Object.defineProperty({}, "a", {
                            get: function() {
                                return 7;
                            },
                        }).a != 7
                    );
                });
            },
            { "../internals/fails": 80 },
        ],
        76: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var isObject = require("../internals/is-object");

                var document = global.document;
                // typeof document.createElement is 'object' in old IE
                var EXISTS =
                    isObject(document) && isObject(document.createElement);

                module.exports = function(it) {
                    return EXISTS ? document.createElement(it) : {};
                };
            },
            { "../internals/global": 92, "../internals/is-object": 107 },
        ],
        77: [
            function(require, module, exports) {
                // iterable DOM collections
                // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
                module.exports = {
                    CSSRuleList: 0,
                    CSSStyleDeclaration: 0,
                    CSSValueList: 0,
                    ClientRectList: 0,
                    DOMRectList: 0,
                    DOMStringList: 0,
                    DOMTokenList: 1,
                    DataTransferItemList: 0,
                    FileList: 0,
                    HTMLAllCollection: 0,
                    HTMLCollection: 0,
                    HTMLFormElement: 0,
                    HTMLSelectElement: 0,
                    MediaList: 0,
                    MimeTypeArray: 0,
                    NamedNodeMap: 0,
                    NodeList: 1,
                    PaintRequestList: 0,
                    Plugin: 0,
                    PluginArray: 0,
                    SVGLengthList: 0,
                    SVGNumberList: 0,
                    SVGPathSegList: 0,
                    SVGPointList: 0,
                    SVGStringList: 0,
                    SVGTransformList: 0,
                    SourceBufferList: 0,
                    StyleSheetList: 0,
                    TextTrackCueList: 0,
                    TextTrackList: 0,
                    TouchList: 0,
                };
            },
            {},
        ],
        78: [
            function(require, module, exports) {
                // IE8- don't enum bug keys
                module.exports = [
                    "constructor",
                    "hasOwnProperty",
                    "isPrototypeOf",
                    "propertyIsEnumerable",
                    "toLocaleString",
                    "toString",
                    "valueOf",
                ];
            },
            {},
        ],
        79: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var getOwnPropertyDescriptor = require("../internals/object-get-own-property-descriptor")
                    .f;
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var redefine = require("../internals/redefine");
                var setGlobal = require("../internals/set-global");
                var copyConstructorProperties = require("../internals/copy-constructor-properties");
                var isForced = require("../internals/is-forced");

                /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
                module.exports = function(options, source) {
                    var TARGET = options.target;
                    var GLOBAL = options.global;
                    var STATIC = options.stat;
                    var FORCED,
                        target,
                        key,
                        targetProperty,
                        sourceProperty,
                        descriptor;
                    if (GLOBAL) {
                        target = global;
                    } else if (STATIC) {
                        target = global[TARGET] || setGlobal(TARGET, {});
                    } else {
                        target = (global[TARGET] || {}).prototype;
                    }
                    if (target)
                        for (key in source) {
                            sourceProperty = source[key];
                            if (options.noTargetGet) {
                                descriptor = getOwnPropertyDescriptor(
                                    target,
                                    key,
                                );
                                targetProperty = descriptor && descriptor.value;
                            } else targetProperty = target[key];
                            FORCED = isForced(
                                GLOBAL
                                    ? key
                                    : TARGET + (STATIC ? "." : "#") + key,
                                options.forced,
                            );
                            // contained in target
                            if (!FORCED && targetProperty !== undefined) {
                                if (
                                    typeof sourceProperty ===
                                    typeof targetProperty
                                )
                                    continue;
                                copyConstructorProperties(
                                    sourceProperty,
                                    targetProperty,
                                );
                            }
                            // add a flag to not completely full polyfills
                            if (
                                options.sham ||
                                (targetProperty && targetProperty.sham)
                            ) {
                                createNonEnumerableProperty(
                                    sourceProperty,
                                    "sham",
                                    true,
                                );
                            }
                            // extend global
                            redefine(target, key, sourceProperty, options);
                        }
                };
            },
            {
                "../internals/copy-constructor-properties": 63,
                "../internals/create-non-enumerable-property": 68,
                "../internals/global": 92,
                "../internals/is-forced": 104,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/redefine": 148,
                "../internals/set-global": 154,
            },
        ],
        80: [
            function(require, module, exports) {
                module.exports = function(exec) {
                    try {
                        return !!exec();
                    } catch (error) {
                        return true;
                    }
                };
            },
            {},
        ],
        81: [
            function(require, module, exports) {
                "use strict";
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var redefine = require("../internals/redefine");
                var fails = require("../internals/fails");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var regexpExec = require("../internals/regexp-exec");

                var SPECIES = wellKnownSymbol("species");

                var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
                    // #replace needs built-in support for named groups.
                    // #match works fine because it just return the exec results, even if it has
                    // a "grops" property.
                    var re = /./;
                    re.exec = function() {
                        var result = [];
                        result.groups = { a: "7" };
                        return result;
                    };
                    return "".replace(re, "$<a>") !== "7";
                });

                // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
                // Weex JS has frozen built-in prototypes, so use try / catch wrapper
                var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
                    var re = /(?:)/;
                    var originalExec = re.exec;
                    re.exec = function() {
                        return originalExec.apply(this, arguments);
                    };
                    var result = "ab".split(re);
                    return (
                        result.length !== 2 ||
                        result[0] !== "a" ||
                        result[1] !== "b"
                    );
                });

                module.exports = function(KEY, length, exec, sham) {
                    var SYMBOL = wellKnownSymbol(KEY);

                    var DELEGATES_TO_SYMBOL = !fails(function() {
                        // String methods call symbol-named RegEp methods
                        var O = {};
                        O[SYMBOL] = function() {
                            return 7;
                        };
                        return ""[KEY](O) != 7;
                    });

                    var DELEGATES_TO_EXEC =
                        DELEGATES_TO_SYMBOL &&
                        !fails(function() {
                            // Symbol-named RegExp methods call .exec
                            var execCalled = false;
                            var re = /a/;

                            if (KEY === "split") {
                                // We can't use real regex here since it causes deoptimization
                                // and serious performance degradation in V8
                                // https://github.com/zloirock/core-js/issues/306
                                re = {};
                                // RegExp[@@split] doesn't call the regex's exec method, but first creates
                                // a new one. We need to return the patched regex when creating the new one.
                                re.constructor = {};
                                re.constructor[SPECIES] = function() {
                                    return re;
                                };
                                re.flags = "";
                                re[SYMBOL] = /./[SYMBOL];
                            }

                            re.exec = function() {
                                execCalled = true;
                                return null;
                            };

                            re[SYMBOL]("");
                            return !execCalled;
                        });

                    if (
                        !DELEGATES_TO_SYMBOL ||
                        !DELEGATES_TO_EXEC ||
                        (KEY === "replace" && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
                        (KEY === "split" && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
                    ) {
                        var nativeRegExpMethod = /./[SYMBOL];
                        var methods = exec(SYMBOL, ""[KEY], function(
                            nativeMethod,
                            regexp,
                            str,
                            arg2,
                            forceStringMethod,
                        ) {
                            if (regexp.exec === regexpExec) {
                                if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                                    // The native String method already delegates to @@method (this
                                    // polyfilled function), leasing to infinite recursion.
                                    // We avoid it by directly calling the native @@method method.
                                    return {
                                        done: true,
                                        value: nativeRegExpMethod.call(
                                            regexp,
                                            str,
                                            arg2,
                                        ),
                                    };
                                }
                                return {
                                    done: true,
                                    value: nativeMethod.call(str, regexp, arg2),
                                };
                            }
                            return { done: false };
                        });
                        var stringMethod = methods[0];
                        var regexMethod = methods[1];

                        redefine(String.prototype, KEY, stringMethod);
                        redefine(
                            RegExp.prototype,
                            SYMBOL,
                            length == 2
                                ? // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
                                  // 21.2.5.11 RegExp.prototype[@@split](string, limit)
                                  function(string, arg) {
                                      return regexMethod.call(
                                          string,
                                          this,
                                          arg,
                                      );
                                  }
                                : // 21.2.5.6 RegExp.prototype[@@match](string)
                                  // 21.2.5.9 RegExp.prototype[@@search](string)
                                  function(string) {
                                      return regexMethod.call(string, this);
                                  },
                        );
                        if (sham)
                            createNonEnumerableProperty(
                                RegExp.prototype[SYMBOL],
                                "sham",
                                true,
                            );
                    }
                };
            },
            {
                "../internals/create-non-enumerable-property": 68,
                "../internals/fails": 80,
                "../internals/redefine": 148,
                "../internals/regexp-exec": 150,
                "../internals/well-known-symbol": 184,
            },
        ],
        82: [
            function(require, module, exports) {
                "use strict";
                var isArray = require("../internals/is-array");
                var toLength = require("../internals/to-length");
                var bind = require("../internals/bind-context");

                // `FlattenIntoArray` abstract operation
                // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
                var flattenIntoArray = function(
                    target,
                    original,
                    source,
                    sourceLen,
                    start,
                    depth,
                    mapper,
                    thisArg,
                ) {
                    var targetIndex = start;
                    var sourceIndex = 0;
                    var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
                    var element;

                    while (sourceIndex < sourceLen) {
                        if (sourceIndex in source) {
                            element = mapFn
                                ? mapFn(
                                      source[sourceIndex],
                                      sourceIndex,
                                      original,
                                  )
                                : source[sourceIndex];

                            if (depth > 0 && isArray(element)) {
                                targetIndex =
                                    flattenIntoArray(
                                        target,
                                        original,
                                        element,
                                        toLength(element.length),
                                        targetIndex,
                                        depth - 1,
                                    ) - 1;
                            } else {
                                if (targetIndex >= 0x1fffffffffffff)
                                    throw TypeError(
                                        "Exceed the acceptable array length",
                                    );
                                target[targetIndex] = element;
                            }

                            targetIndex++;
                        }
                        sourceIndex++;
                    }
                    return targetIndex;
                };

                module.exports = flattenIntoArray;
            },
            {
                "../internals/bind-context": 55,
                "../internals/is-array": 103,
                "../internals/to-length": 172,
            },
        ],
        83: [
            function(require, module, exports) {
                "use strict";
                var IS_PURE = require("../internals/is-pure");
                var global = require("../internals/global");
                var fails = require("../internals/fails");

                // Forced replacement object prototype accessors methods
                module.exports =
                    IS_PURE ||
                    !fails(function() {
                        var key = Math.random();
                        // In FF throws only define methods
                        // eslint-disable-next-line no-undef, no-useless-call
                        __defineSetter__.call(null, key, function() {
                            /* empty */
                        });
                        delete global[key];
                    });
            },
            {
                "../internals/fails": 80,
                "../internals/global": 92,
                "../internals/is-pure": 108,
            },
        ],
        84: [
            function(require, module, exports) {
                var fails = require("../internals/fails");

                // check the existence of a method, lowercase
                // of a tag and escaping quotes in arguments
                module.exports = function(METHOD_NAME) {
                    return fails(function() {
                        var test = ""[METHOD_NAME]('"');
                        return (
                            test !== test.toLowerCase() ||
                            test.split('"').length > 3
                        );
                    });
                };
            },
            { "../internals/fails": 80 },
        ],
        85: [
            function(require, module, exports) {
                var fails = require("../internals/fails");
                var whitespaces = require("../internals/whitespaces");

                var non = "\u200B\u0085\u180E";

                // check that a method works with the correct list
                // of whitespaces and has a correct name
                module.exports = function(METHOD_NAME) {
                    return fails(function() {
                        return (
                            !!whitespaces[METHOD_NAME]() ||
                            non[METHOD_NAME]() != non ||
                            whitespaces[METHOD_NAME].name !== METHOD_NAME
                        );
                    });
                };
            },
            { "../internals/fails": 80, "../internals/whitespaces": 185 },
        ],
        86: [
            function(require, module, exports) {
                var fails = require("../internals/fails");

                module.exports = !fails(function() {
                    return Object.isExtensible(Object.preventExtensions({}));
                });
            },
            { "../internals/fails": 80 },
        ],
        87: [
            function(require, module, exports) {
                "use strict";
                var aFunction = require("../internals/a-function");
                var isObject = require("../internals/is-object");

                var slice = [].slice;
                var factories = {};

                var construct = function(C, argsLength, args) {
                    if (!(argsLength in factories)) {
                        for (var list = [], i = 0; i < argsLength; i++)
                            list[i] = "a[" + i + "]";
                        // eslint-disable-next-line no-new-func
                        factories[argsLength] = Function(
                            "C,a",
                            "return new C(" + list.join(",") + ")",
                        );
                    }
                    return factories[argsLength](C, args);
                };

                // `Function.prototype.bind` method implementation
                // https://tc39.github.io/ecma262/#sec-function.prototype.bind
                module.exports =
                    Function.bind ||
                    function bind(that /* , ...args */) {
                        var fn = aFunction(this);
                        var partArgs = slice.call(arguments, 1);
                        var boundFunction = function bound(/* args... */) {
                            var args = partArgs.concat(slice.call(arguments));
                            return this instanceof boundFunction
                                ? construct(fn, args.length, args)
                                : fn.apply(that, args);
                        };
                        if (isObject(fn.prototype))
                            boundFunction.prototype = fn.prototype;
                        return boundFunction;
                    };
            },
            { "../internals/a-function": 37, "../internals/is-object": 107 },
        ],
        88: [
            function(require, module, exports) {
                var shared = require("../internals/shared");

                module.exports = shared(
                    "native-function-to-string",
                    Function.toString,
                );
            },
            { "../internals/shared": 159 },
        ],
        89: [
            function(require, module, exports) {
                var path = require("../internals/path");
                var global = require("../internals/global");

                var aFunction = function(variable) {
                    return typeof variable == "function" ? variable : undefined;
                };

                module.exports = function(namespace, method) {
                    return arguments.length < 2
                        ? aFunction(path[namespace]) ||
                              aFunction(global[namespace])
                        : (path[namespace] && path[namespace][method]) ||
                              (global[namespace] && global[namespace][method]);
                };
            },
            { "../internals/global": 92, "../internals/path": 143 },
        ],
        90: [
            function(require, module, exports) {
                var classof = require("../internals/classof");
                var Iterators = require("../internals/iterators");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var ITERATOR = wellKnownSymbol("iterator");

                module.exports = function(it) {
                    if (it != undefined)
                        return (
                            it[ITERATOR] ||
                            it["@@iterator"] ||
                            Iterators[classof(it)]
                        );
                };
            },
            {
                "../internals/classof": 59,
                "../internals/iterators": 112,
                "../internals/well-known-symbol": 184,
            },
        ],
        91: [
            function(require, module, exports) {
                var anObject = require("../internals/an-object");
                var getIteratorMethod = require("../internals/get-iterator-method");

                module.exports = function(it) {
                    var iteratorMethod = getIteratorMethod(it);
                    if (typeof iteratorMethod != "function") {
                        throw TypeError(String(it) + " is not iterable");
                    }
                    return anObject(iteratorMethod.call(it));
                };
            },
            {
                "../internals/an-object": 42,
                "../internals/get-iterator-method": 90,
            },
        ],
        92: [
            function(require, module, exports) {
                (function(global) {
                    var check = function(it) {
                        return it && it.Math == Math && it;
                    };

                    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                    module.exports =
                        // eslint-disable-next-line no-undef
                        check(typeof globalThis == "object" && globalThis) ||
                        check(typeof window == "object" && window) ||
                        check(typeof self == "object" && self) ||
                        check(typeof global == "object" && global) ||
                        // eslint-disable-next-line no-new-func
                        Function("return this")();
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {},
                ));
            },
            {},
        ],
        93: [
            function(require, module, exports) {
                var hasOwnProperty = {}.hasOwnProperty;

                module.exports = function(it, key) {
                    return hasOwnProperty.call(it, key);
                };
            },
            {},
        ],
        94: [
            function(require, module, exports) {
                module.exports = {};
            },
            {},
        ],
        95: [
            function(require, module, exports) {
                var global = require("../internals/global");

                module.exports = function(a, b) {
                    var console = global.console;
                    if (console && console.error) {
                        arguments.length === 1
                            ? console.error(a)
                            : console.error(a, b);
                    }
                };
            },
            { "../internals/global": 92 },
        ],
        96: [
            function(require, module, exports) {
                var getBuiltIn = require("../internals/get-built-in");

                module.exports = getBuiltIn("document", "documentElement");
            },
            { "../internals/get-built-in": 89 },
        ],
        97: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var fails = require("../internals/fails");
                var createElement = require("../internals/document-create-element");

                // Thank's IE8 for his funny defineProperty
                module.exports =
                    !DESCRIPTORS &&
                    !fails(function() {
                        return (
                            Object.defineProperty(createElement("div"), "a", {
                                get: function() {
                                    return 7;
                                },
                            }).a != 7
                        );
                    });
            },
            {
                "../internals/descriptors": 75,
                "../internals/document-create-element": 76,
                "../internals/fails": 80,
            },
        ],
        98: [
            function(require, module, exports) {
                var fails = require("../internals/fails");
                var classof = require("../internals/classof-raw");

                var split = "".split;

                // fallback for non-array-like ES3 and non-enumerable old V8 strings
                module.exports = fails(function() {
                    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
                    // eslint-disable-next-line no-prototype-builtins
                    return !Object("z").propertyIsEnumerable(0);
                })
                    ? function(it) {
                          return classof(it) == "String"
                              ? split.call(it, "")
                              : Object(it);
                      }
                    : Object;
            },
            { "../internals/classof-raw": 58, "../internals/fails": 80 },
        ],
        99: [
            function(require, module, exports) {
                var isObject = require("../internals/is-object");
                var setPrototypeOf = require("../internals/object-set-prototype-of");

                // makes subclassing work correct for wrapped built-ins
                module.exports = function($this, dummy, Wrapper) {
                    var NewTarget, NewTargetPrototype;
                    if (
                        // it can work only with native `setPrototypeOf`
                        setPrototypeOf &&
                        // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
                        typeof (NewTarget = dummy.constructor) == "function" &&
                        NewTarget !== Wrapper &&
                        isObject((NewTargetPrototype = NewTarget.prototype)) &&
                        NewTargetPrototype !== Wrapper.prototype
                    )
                        setPrototypeOf($this, NewTargetPrototype);
                    return $this;
                };
            },
            {
                "../internals/is-object": 107,
                "../internals/object-set-prototype-of": 137,
            },
        ],
        100: [
            function(require, module, exports) {
                var hiddenKeys = require("../internals/hidden-keys");
                var isObject = require("../internals/is-object");
                var has = require("../internals/has");
                var defineProperty = require("../internals/object-define-property")
                    .f;
                var uid = require("../internals/uid");
                var FREEZING = require("../internals/freezing");

                var METADATA = uid("meta");
                var id = 0;

                var isExtensible =
                    Object.isExtensible ||
                    function() {
                        return true;
                    };

                var setMetadata = function(it) {
                    defineProperty(it, METADATA, {
                        value: {
                            objectID: "O" + ++id, // object ID
                            weakData: {}, // weak collections IDs
                        },
                    });
                };

                var fastKey = function(it, create) {
                    // return a primitive with prefix
                    if (!isObject(it))
                        return typeof it == "symbol"
                            ? it
                            : (typeof it == "string" ? "S" : "P") + it;
                    if (!has(it, METADATA)) {
                        // can't set metadata to uncaught frozen object
                        if (!isExtensible(it)) return "F";
                        // not necessary to add metadata
                        if (!create) return "E";
                        // add missing metadata
                        setMetadata(it);
                        // return object ID
                    }
                    return it[METADATA].objectID;
                };

                var getWeakData = function(it, create) {
                    if (!has(it, METADATA)) {
                        // can't set metadata to uncaught frozen object
                        if (!isExtensible(it)) return true;
                        // not necessary to add metadata
                        if (!create) return false;
                        // add missing metadata
                        setMetadata(it);
                        // return the store of weak collections IDs
                    }
                    return it[METADATA].weakData;
                };

                // add metadata on freeze-family methods calling
                var onFreeze = function(it) {
                    if (
                        FREEZING &&
                        meta.REQUIRED &&
                        isExtensible(it) &&
                        !has(it, METADATA)
                    )
                        setMetadata(it);
                    return it;
                };

                var meta = (module.exports = {
                    REQUIRED: false,
                    fastKey: fastKey,
                    getWeakData: getWeakData,
                    onFreeze: onFreeze,
                });

                hiddenKeys[METADATA] = true;
            },
            {
                "../internals/freezing": 86,
                "../internals/has": 93,
                "../internals/hidden-keys": 94,
                "../internals/is-object": 107,
                "../internals/object-define-property": 128,
                "../internals/uid": 180,
            },
        ],
        101: [
            function(require, module, exports) {
                var NATIVE_WEAK_MAP = require("../internals/native-weak-map");
                var global = require("../internals/global");
                var isObject = require("../internals/is-object");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var objectHas = require("../internals/has");
                var sharedKey = require("../internals/shared-key");
                var hiddenKeys = require("../internals/hidden-keys");

                var WeakMap = global.WeakMap;
                var set, get, has;

                var enforce = function(it) {
                    return has(it) ? get(it) : set(it, {});
                };

                var getterFor = function(TYPE) {
                    return function(it) {
                        var state;
                        if (!isObject(it) || (state = get(it)).type !== TYPE) {
                            throw TypeError(
                                "Incompatible receiver, " + TYPE + " required",
                            );
                        }
                        return state;
                    };
                };

                if (NATIVE_WEAK_MAP) {
                    var store = new WeakMap();
                    var wmget = store.get;
                    var wmhas = store.has;
                    var wmset = store.set;
                    set = function(it, metadata) {
                        wmset.call(store, it, metadata);
                        return metadata;
                    };
                    get = function(it) {
                        return wmget.call(store, it) || {};
                    };
                    has = function(it) {
                        return wmhas.call(store, it);
                    };
                } else {
                    var STATE = sharedKey("state");
                    hiddenKeys[STATE] = true;
                    set = function(it, metadata) {
                        createNonEnumerableProperty(it, STATE, metadata);
                        return metadata;
                    };
                    get = function(it) {
                        return objectHas(it, STATE) ? it[STATE] : {};
                    };
                    has = function(it) {
                        return objectHas(it, STATE);
                    };
                }

                module.exports = {
                    set: set,
                    get: get,
                    has: has,
                    enforce: enforce,
                    getterFor: getterFor,
                };
            },
            {
                "../internals/create-non-enumerable-property": 68,
                "../internals/global": 92,
                "../internals/has": 93,
                "../internals/hidden-keys": 94,
                "../internals/is-object": 107,
                "../internals/native-weak-map": 121,
                "../internals/shared-key": 157,
            },
        ],
        102: [
            function(require, module, exports) {
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var Iterators = require("../internals/iterators");

                var ITERATOR = wellKnownSymbol("iterator");
                var ArrayPrototype = Array.prototype;

                // check on default Array iterator
                module.exports = function(it) {
                    return (
                        it !== undefined &&
                        (Iterators.Array === it ||
                            ArrayPrototype[ITERATOR] === it)
                    );
                };
            },
            {
                "../internals/iterators": 112,
                "../internals/well-known-symbol": 184,
            },
        ],
        103: [
            function(require, module, exports) {
                var classof = require("../internals/classof-raw");

                // `IsArray` abstract operation
                // https://tc39.github.io/ecma262/#sec-isarray
                module.exports =
                    Array.isArray ||
                    function isArray(arg) {
                        return classof(arg) == "Array";
                    };
            },
            { "../internals/classof-raw": 58 },
        ],
        104: [
            function(require, module, exports) {
                var fails = require("../internals/fails");

                var replacement = /#|\.prototype\./;

                var isForced = function(feature, detection) {
                    var value = data[normalize(feature)];
                    return value == POLYFILL
                        ? true
                        : value == NATIVE
                        ? false
                        : typeof detection == "function"
                        ? fails(detection)
                        : !!detection;
                };

                var normalize = (isForced.normalize = function(string) {
                    return String(string)
                        .replace(replacement, ".")
                        .toLowerCase();
                });

                var data = (isForced.data = {});
                var NATIVE = (isForced.NATIVE = "N");
                var POLYFILL = (isForced.POLYFILL = "P");

                module.exports = isForced;
            },
            { "../internals/fails": 80 },
        ],
        105: [
            function(require, module, exports) {
                var isObject = require("../internals/is-object");

                var floor = Math.floor;

                // `Number.isInteger` method implementation
                // https://tc39.github.io/ecma262/#sec-number.isinteger
                module.exports = function isInteger(it) {
                    return !isObject(it) && isFinite(it) && floor(it) === it;
                };
            },
            { "../internals/is-object": 107 },
        ],
        106: [
            function(require, module, exports) {
                var userAgent = require("../internals/user-agent");

                module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(
                    userAgent,
                );
            },
            { "../internals/user-agent": 181 },
        ],
        107: [
            function(require, module, exports) {
                module.exports = function(it) {
                    return typeof it === "object"
                        ? it !== null
                        : typeof it === "function";
                };
            },
            {},
        ],
        108: [
            function(require, module, exports) {
                module.exports = false;
            },
            {},
        ],
        109: [
            function(require, module, exports) {
                var isObject = require("../internals/is-object");
                var classof = require("../internals/classof-raw");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var MATCH = wellKnownSymbol("match");

                // `IsRegExp` abstract operation
                // https://tc39.github.io/ecma262/#sec-isregexp
                module.exports = function(it) {
                    var isRegExp;
                    return (
                        isObject(it) &&
                        ((isRegExp = it[MATCH]) !== undefined
                            ? !!isRegExp
                            : classof(it) == "RegExp")
                    );
                };
            },
            {
                "../internals/classof-raw": 58,
                "../internals/is-object": 107,
                "../internals/well-known-symbol": 184,
            },
        ],
        110: [
            function(require, module, exports) {
                var anObject = require("../internals/an-object");
                var isArrayIteratorMethod = require("../internals/is-array-iterator-method");
                var toLength = require("../internals/to-length");
                var bind = require("../internals/bind-context");
                var getIteratorMethod = require("../internals/get-iterator-method");
                var callWithSafeIterationClosing = require("../internals/call-with-safe-iteration-closing");

                var Result = function(stopped, result) {
                    this.stopped = stopped;
                    this.result = result;
                };

                var iterate = (module.exports = function(
                    iterable,
                    fn,
                    that,
                    AS_ENTRIES,
                    IS_ITERATOR,
                ) {
                    var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
                    var iterator, iterFn, index, length, result, next, step;

                    if (IS_ITERATOR) {
                        iterator = iterable;
                    } else {
                        iterFn = getIteratorMethod(iterable);
                        if (typeof iterFn != "function")
                            throw TypeError("Target is not iterable");
                        // optimisation for array iterators
                        if (isArrayIteratorMethod(iterFn)) {
                            for (
                                index = 0, length = toLength(iterable.length);
                                length > index;
                                index++
                            ) {
                                result = AS_ENTRIES
                                    ? boundFunction(
                                          anObject((step = iterable[index]))[0],
                                          step[1],
                                      )
                                    : boundFunction(iterable[index]);
                                if (result && result instanceof Result)
                                    return result;
                            }
                            return new Result(false);
                        }
                        iterator = iterFn.call(iterable);
                    }

                    next = iterator.next;
                    while (!(step = next.call(iterator)).done) {
                        result = callWithSafeIterationClosing(
                            iterator,
                            boundFunction,
                            step.value,
                            AS_ENTRIES,
                        );
                        if (
                            typeof result == "object" &&
                            result &&
                            result instanceof Result
                        )
                            return result;
                    }
                    return new Result(false);
                });

                iterate.stop = function(result) {
                    return new Result(true, result);
                };
            },
            {
                "../internals/an-object": 42,
                "../internals/bind-context": 55,
                "../internals/call-with-safe-iteration-closing": 56,
                "../internals/get-iterator-method": 90,
                "../internals/is-array-iterator-method": 102,
                "../internals/to-length": 172,
            },
        ],
        111: [
            function(require, module, exports) {
                "use strict";
                var getPrototypeOf = require("../internals/object-get-prototype-of");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var has = require("../internals/has");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var IS_PURE = require("../internals/is-pure");

                var ITERATOR = wellKnownSymbol("iterator");
                var BUGGY_SAFARI_ITERATORS = false;

                var returnThis = function() {
                    return this;
                };

                // `%IteratorPrototype%` object
                // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
                var IteratorPrototype,
                    PrototypeOfArrayIteratorPrototype,
                    arrayIterator;

                if ([].keys) {
                    arrayIterator = [].keys();
                    // Safari 8 has buggy iterators w/o `next`
                    if (!("next" in arrayIterator))
                        BUGGY_SAFARI_ITERATORS = true;
                    else {
                        PrototypeOfArrayIteratorPrototype = getPrototypeOf(
                            getPrototypeOf(arrayIterator),
                        );
                        if (
                            PrototypeOfArrayIteratorPrototype !==
                            Object.prototype
                        )
                            IteratorPrototype = PrototypeOfArrayIteratorPrototype;
                    }
                }

                if (IteratorPrototype == undefined) IteratorPrototype = {};

                // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
                if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
                    createNonEnumerableProperty(
                        IteratorPrototype,
                        ITERATOR,
                        returnThis,
                    );
                }

                module.exports = {
                    IteratorPrototype: IteratorPrototype,
                    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS,
                };
            },
            {
                "../internals/create-non-enumerable-property": 68,
                "../internals/has": 93,
                "../internals/is-pure": 108,
                "../internals/object-get-prototype-of": 133,
                "../internals/well-known-symbol": 184,
            },
        ],
        112: [
            function(require, module, exports) {
                arguments[4][94][0].apply(exports, arguments);
            },
            { dup: 94 },
        ],
        113: [
            function(require, module, exports) {
                var nativeExpm1 = Math.expm1;
                var exp = Math.exp;

                // `Math.expm1` method implementation
                // https://tc39.github.io/ecma262/#sec-math.expm1
                module.exports =
                    !nativeExpm1 ||
                    // Old FF bug
                    nativeExpm1(10) > 22025.465794806719 ||
                    nativeExpm1(10) < 22025.4657948067165168 ||
                    // Tor Browser bug
                    nativeExpm1(-2e-17) != -2e-17
                        ? function expm1(x) {
                              return (x = +x) == 0
                                  ? x
                                  : x > -1e-6 && x < 1e-6
                                  ? x + (x * x) / 2
                                  : exp(x) - 1;
                          }
                        : nativeExpm1;
            },
            {},
        ],
        114: [
            function(require, module, exports) {
                var sign = require("../internals/math-sign");

                var abs = Math.abs;
                var pow = Math.pow;
                var EPSILON = pow(2, -52);
                var EPSILON32 = pow(2, -23);
                var MAX32 = pow(2, 127) * (2 - EPSILON32);
                var MIN32 = pow(2, -126);

                var roundTiesToEven = function(n) {
                    return n + 1 / EPSILON - 1 / EPSILON;
                };

                // `Math.fround` method implementation
                // https://tc39.github.io/ecma262/#sec-math.fround
                module.exports =
                    Math.fround ||
                    function fround(x) {
                        var $abs = abs(x);
                        var $sign = sign(x);
                        var a, result;
                        if ($abs < MIN32)
                            return (
                                $sign *
                                roundTiesToEven($abs / MIN32 / EPSILON32) *
                                MIN32 *
                                EPSILON32
                            );
                        a = (1 + EPSILON32 / EPSILON) * $abs;
                        result = a - (a - $abs);
                        // eslint-disable-next-line no-self-compare
                        if (result > MAX32 || result != result)
                            return $sign * Infinity;
                        return $sign * result;
                    };
            },
            { "../internals/math-sign": 116 },
        ],
        115: [
            function(require, module, exports) {
                var log = Math.log;

                // `Math.log1p` method implementation
                // https://tc39.github.io/ecma262/#sec-math.log1p
                module.exports =
                    Math.log1p ||
                    function log1p(x) {
                        return (x = +x) > -1e-8 && x < 1e-8
                            ? x - (x * x) / 2
                            : log(1 + x);
                    };
            },
            {},
        ],
        116: [
            function(require, module, exports) {
                // `Math.sign` method implementation
                // https://tc39.github.io/ecma262/#sec-math.sign
                module.exports =
                    Math.sign ||
                    function sign(x) {
                        // eslint-disable-next-line no-self-compare
                        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
                    };
            },
            {},
        ],
        117: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var getOwnPropertyDescriptor = require("../internals/object-get-own-property-descriptor")
                    .f;
                var classof = require("../internals/classof-raw");
                var macrotask = require("../internals/task").set;
                var IS_IOS = require("../internals/is-ios");

                var MutationObserver =
                    global.MutationObserver || global.WebKitMutationObserver;
                var process = global.process;
                var Promise = global.Promise;
                var IS_NODE = classof(process) == "process";
                // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
                var queueMicrotaskDescriptor = getOwnPropertyDescriptor(
                    global,
                    "queueMicrotask",
                );
                var queueMicrotask =
                    queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

                var flush, head, last, notify, toggle, node, promise, then;

                // modern engines have queueMicrotask method
                if (!queueMicrotask) {
                    flush = function() {
                        var parent, fn;
                        if (IS_NODE && (parent = process.domain)) parent.exit();
                        while (head) {
                            fn = head.fn;
                            head = head.next;
                            try {
                                fn();
                            } catch (error) {
                                if (head) notify();
                                else last = undefined;
                                throw error;
                            }
                        }
                        last = undefined;
                        if (parent) parent.enter();
                    };

                    // Node.js
                    if (IS_NODE) {
                        notify = function() {
                            process.nextTick(flush);
                        };
                        // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
                    } else if (MutationObserver && !IS_IOS) {
                        toggle = true;
                        node = document.createTextNode("");
                        new MutationObserver(flush).observe(node, {
                            characterData: true,
                        });
                        notify = function() {
                            node.data = toggle = !toggle;
                        };
                        // environments with maybe non-completely correct, but existent Promise
                    } else if (Promise && Promise.resolve) {
                        // Promise.resolve without an argument throws an error in LG WebOS 2
                        promise = Promise.resolve(undefined);
                        then = promise.then;
                        notify = function() {
                            then.call(promise, flush);
                        };
                        // for other environments - macrotask based on:
                        // - setImmediate
                        // - MessageChannel
                        // - window.postMessag
                        // - onreadystatechange
                        // - setTimeout
                    } else {
                        notify = function() {
                            // strange IE + webpack dev server bug - use .call(global)
                            macrotask.call(global, flush);
                        };
                    }
                }

                module.exports =
                    queueMicrotask ||
                    function(fn) {
                        var task = { fn: fn, next: undefined };
                        if (last) last.next = task;
                        if (!head) {
                            head = task;
                            notify();
                        }
                        last = task;
                    };
            },
            {
                "../internals/classof-raw": 58,
                "../internals/global": 92,
                "../internals/is-ios": 106,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/task": 166,
            },
        ],
        118: [
            function(require, module, exports) {
                var global = require("../internals/global");

                module.exports = global.Promise;
            },
            { "../internals/global": 92 },
        ],
        119: [
            function(require, module, exports) {
                var fails = require("../internals/fails");

                module.exports =
                    !!Object.getOwnPropertySymbols &&
                    !fails(function() {
                        // Chrome 38 Symbol has incorrect toString conversion
                        // eslint-disable-next-line no-undef
                        return !String(Symbol());
                    });
            },
            { "../internals/fails": 80 },
        ],
        120: [
            function(require, module, exports) {
                var fails = require("../internals/fails");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var IS_PURE = require("../internals/is-pure");

                var ITERATOR = wellKnownSymbol("iterator");

                module.exports = !fails(function() {
                    var url = new URL("b?a=1&b=2&c=3", "http://a");
                    var searchParams = url.searchParams;
                    var result = "";
                    url.pathname = "c%20d";
                    searchParams.forEach(function(value, key) {
                        searchParams["delete"]("b");
                        result += key + value;
                    });
                    return (
                        (IS_PURE && !url.toJSON) ||
                        !searchParams.sort ||
                        url.href !== "http://a/c%20d?a=1&c=3" ||
                        searchParams.get("c") !== "3" ||
                        String(new URLSearchParams("?a=1")) !== "a=1" ||
                        !searchParams[ITERATOR] ||
                        // throws in Edge
                        new URL("https://a@b").username !== "a" ||
                        new URLSearchParams(new URLSearchParams("a=b")).get(
                            "a",
                        ) !== "b" ||
                        // not punycoded in Edge
                        new URL("http://тест").host !== "xn--e1aybc" ||
                        // not escaped in Chrome 62-
                        new URL("http://a#б").hash !== "#%D0%B1" ||
                        // fails in Chrome 66-
                        result !== "a1c3" ||
                        // throws in Safari
                        new URL("http://x", undefined).host !== "x"
                    );
                });
            },
            {
                "../internals/fails": 80,
                "../internals/is-pure": 108,
                "../internals/well-known-symbol": 184,
            },
        ],
        121: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var nativeFunctionToString = require("../internals/function-to-string");

                var WeakMap = global.WeakMap;

                module.exports =
                    typeof WeakMap === "function" &&
                    /native code/.test(nativeFunctionToString.call(WeakMap));
            },
            {
                "../internals/function-to-string": 88,
                "../internals/global": 92,
            },
        ],
        122: [
            function(require, module, exports) {
                "use strict";
                var aFunction = require("../internals/a-function");

                var PromiseCapability = function(C) {
                    var resolve, reject;
                    this.promise = new C(function($$resolve, $$reject) {
                        if (resolve !== undefined || reject !== undefined)
                            throw TypeError("Bad Promise constructor");
                        resolve = $$resolve;
                        reject = $$reject;
                    });
                    this.resolve = aFunction(resolve);
                    this.reject = aFunction(reject);
                };

                // 25.4.1.5 NewPromiseCapability(C)
                module.exports.f = function(C) {
                    return new PromiseCapability(C);
                };
            },
            { "../internals/a-function": 37 },
        ],
        123: [
            function(require, module, exports) {
                var isRegExp = require("../internals/is-regexp");

                module.exports = function(it) {
                    if (isRegExp(it)) {
                        throw TypeError(
                            "The method doesn't accept regular expressions",
                        );
                    }
                    return it;
                };
            },
            { "../internals/is-regexp": 109 },
        ],
        124: [
            function(require, module, exports) {
                var global = require("../internals/global");

                var globalIsFinite = global.isFinite;

                // `Number.isFinite` method
                // https://tc39.github.io/ecma262/#sec-number.isfinite
                module.exports =
                    Number.isFinite ||
                    function isFinite(it) {
                        return typeof it == "number" && globalIsFinite(it);
                    };
            },
            { "../internals/global": 92 },
        ],
        125: [
            function(require, module, exports) {
                "use strict";
                var DESCRIPTORS = require("../internals/descriptors");
                var fails = require("../internals/fails");
                var objectKeys = require("../internals/object-keys");
                var getOwnPropertySymbolsModule = require("../internals/object-get-own-property-symbols");
                var propertyIsEnumerableModule = require("../internals/object-property-is-enumerable");
                var toObject = require("../internals/to-object");
                var IndexedObject = require("../internals/indexed-object");

                var nativeAssign = Object.assign;

                // `Object.assign` method
                // https://tc39.github.io/ecma262/#sec-object.assign
                // should work with symbols and should have deterministic property order (V8 bug)
                module.exports =
                    !nativeAssign ||
                    fails(function() {
                        var A = {};
                        var B = {};
                        // eslint-disable-next-line no-undef
                        var symbol = Symbol();
                        var alphabet = "abcdefghijklmnopqrst";
                        A[symbol] = 7;
                        alphabet.split("").forEach(function(chr) {
                            B[chr] = chr;
                        });
                        return (
                            nativeAssign({}, A)[symbol] != 7 ||
                            objectKeys(nativeAssign({}, B)).join("") != alphabet
                        );
                    })
                        ? function assign(target, source) {
                              // eslint-disable-line no-unused-vars
                              var T = toObject(target);
                              var argumentsLength = arguments.length;
                              var index = 1;
                              var getOwnPropertySymbols =
                                  getOwnPropertySymbolsModule.f;
                              var propertyIsEnumerable =
                                  propertyIsEnumerableModule.f;
                              while (argumentsLength > index) {
                                  var S = IndexedObject(arguments[index++]);
                                  var keys = getOwnPropertySymbols
                                      ? objectKeys(S).concat(
                                            getOwnPropertySymbols(S),
                                        )
                                      : objectKeys(S);
                                  var length = keys.length;
                                  var j = 0;
                                  var key;
                                  while (length > j) {
                                      key = keys[j++];
                                      if (
                                          !DESCRIPTORS ||
                                          propertyIsEnumerable.call(S, key)
                                      )
                                          T[key] = S[key];
                                  }
                              }
                              return T;
                          }
                        : nativeAssign;
            },
            {
                "../internals/descriptors": 75,
                "../internals/fails": 80,
                "../internals/indexed-object": 98,
                "../internals/object-get-own-property-symbols": 132,
                "../internals/object-keys": 135,
                "../internals/object-property-is-enumerable": 136,
                "../internals/to-object": 173,
            },
        ],
        126: [
            function(require, module, exports) {
                var anObject = require("../internals/an-object");
                var defineProperties = require("../internals/object-define-properties");
                var enumBugKeys = require("../internals/enum-bug-keys");
                var hiddenKeys = require("../internals/hidden-keys");
                var html = require("../internals/html");
                var documentCreateElement = require("../internals/document-create-element");
                var sharedKey = require("../internals/shared-key");
                var IE_PROTO = sharedKey("IE_PROTO");

                var PROTOTYPE = "prototype";
                var Empty = function() {
                    /* empty */
                };

                // Create object with fake `null` prototype: use iframe Object with cleared prototype
                var createDict = function() {
                    // Thrash, waste and sodomy: IE GC bug
                    var iframe = documentCreateElement("iframe");
                    var length = enumBugKeys.length;
                    var lt = "<";
                    var script = "script";
                    var gt = ">";
                    var js = "java" + script + ":";
                    var iframeDocument;
                    iframe.style.display = "none";
                    html.appendChild(iframe);
                    iframe.src = String(js);
                    iframeDocument = iframe.contentWindow.document;
                    iframeDocument.open();
                    iframeDocument.write(
                        lt +
                            script +
                            gt +
                            "document.F=Object" +
                            lt +
                            "/" +
                            script +
                            gt,
                    );
                    iframeDocument.close();
                    createDict = iframeDocument.F;
                    while (length--)
                        delete createDict[PROTOTYPE][enumBugKeys[length]];
                    return createDict();
                };

                // `Object.create` method
                // https://tc39.github.io/ecma262/#sec-object.create
                module.exports =
                    Object.create ||
                    function create(O, Properties) {
                        var result;
                        if (O !== null) {
                            Empty[PROTOTYPE] = anObject(O);
                            result = new Empty();
                            Empty[PROTOTYPE] = null;
                            // add "__proto__" for Object.getPrototypeOf polyfill
                            result[IE_PROTO] = O;
                        } else result = createDict();
                        return Properties === undefined
                            ? result
                            : defineProperties(result, Properties);
                    };

                hiddenKeys[IE_PROTO] = true;
            },
            {
                "../internals/an-object": 42,
                "../internals/document-create-element": 76,
                "../internals/enum-bug-keys": 78,
                "../internals/hidden-keys": 94,
                "../internals/html": 96,
                "../internals/object-define-properties": 127,
                "../internals/shared-key": 157,
            },
        ],
        127: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var definePropertyModule = require("../internals/object-define-property");
                var anObject = require("../internals/an-object");
                var objectKeys = require("../internals/object-keys");

                // `Object.defineProperties` method
                // https://tc39.github.io/ecma262/#sec-object.defineproperties
                module.exports = DESCRIPTORS
                    ? Object.defineProperties
                    : function defineProperties(O, Properties) {
                          anObject(O);
                          var keys = objectKeys(Properties);
                          var length = keys.length;
                          var index = 0;
                          var key;
                          while (length > index)
                              definePropertyModule.f(
                                  O,
                                  (key = keys[index++]),
                                  Properties[key],
                              );
                          return O;
                      };
            },
            {
                "../internals/an-object": 42,
                "../internals/descriptors": 75,
                "../internals/object-define-property": 128,
                "../internals/object-keys": 135,
            },
        ],
        128: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var IE8_DOM_DEFINE = require("../internals/ie8-dom-define");
                var anObject = require("../internals/an-object");
                var toPrimitive = require("../internals/to-primitive");

                var nativeDefineProperty = Object.defineProperty;

                // `Object.defineProperty` method
                // https://tc39.github.io/ecma262/#sec-object.defineproperty
                exports.f = DESCRIPTORS
                    ? nativeDefineProperty
                    : function defineProperty(O, P, Attributes) {
                          anObject(O);
                          P = toPrimitive(P, true);
                          anObject(Attributes);
                          if (IE8_DOM_DEFINE)
                              try {
                                  return nativeDefineProperty(O, P, Attributes);
                              } catch (error) {
                                  /* empty */
                              }
                          if ("get" in Attributes || "set" in Attributes)
                              throw TypeError("Accessors not supported");
                          if ("value" in Attributes) O[P] = Attributes.value;
                          return O;
                      };
            },
            {
                "../internals/an-object": 42,
                "../internals/descriptors": 75,
                "../internals/ie8-dom-define": 97,
                "../internals/to-primitive": 176,
            },
        ],
        129: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var propertyIsEnumerableModule = require("../internals/object-property-is-enumerable");
                var createPropertyDescriptor = require("../internals/create-property-descriptor");
                var toIndexedObject = require("../internals/to-indexed-object");
                var toPrimitive = require("../internals/to-primitive");
                var has = require("../internals/has");
                var IE8_DOM_DEFINE = require("../internals/ie8-dom-define");

                var nativeGetOwnPropertyDescriptor =
                    Object.getOwnPropertyDescriptor;

                // `Object.getOwnPropertyDescriptor` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
                exports.f = DESCRIPTORS
                    ? nativeGetOwnPropertyDescriptor
                    : function getOwnPropertyDescriptor(O, P) {
                          O = toIndexedObject(O);
                          P = toPrimitive(P, true);
                          if (IE8_DOM_DEFINE)
                              try {
                                  return nativeGetOwnPropertyDescriptor(O, P);
                              } catch (error) {
                                  /* empty */
                              }
                          if (has(O, P))
                              return createPropertyDescriptor(
                                  !propertyIsEnumerableModule.f.call(O, P),
                                  O[P],
                              );
                      };
            },
            {
                "../internals/create-property-descriptor": 69,
                "../internals/descriptors": 75,
                "../internals/has": 93,
                "../internals/ie8-dom-define": 97,
                "../internals/object-property-is-enumerable": 136,
                "../internals/to-indexed-object": 170,
                "../internals/to-primitive": 176,
            },
        ],
        130: [
            function(require, module, exports) {
                var toIndexedObject = require("../internals/to-indexed-object");
                var nativeGetOwnPropertyNames = require("../internals/object-get-own-property-names")
                    .f;

                var toString = {}.toString;

                var windowNames =
                    typeof window == "object" &&
                    window &&
                    Object.getOwnPropertyNames
                        ? Object.getOwnPropertyNames(window)
                        : [];

                var getWindowNames = function(it) {
                    try {
                        return nativeGetOwnPropertyNames(it);
                    } catch (error) {
                        return windowNames.slice();
                    }
                };

                // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
                module.exports.f = function getOwnPropertyNames(it) {
                    return windowNames && toString.call(it) == "[object Window]"
                        ? getWindowNames(it)
                        : nativeGetOwnPropertyNames(toIndexedObject(it));
                };
            },
            {
                "../internals/object-get-own-property-names": 131,
                "../internals/to-indexed-object": 170,
            },
        ],
        131: [
            function(require, module, exports) {
                var internalObjectKeys = require("../internals/object-keys-internal");
                var enumBugKeys = require("../internals/enum-bug-keys");

                var hiddenKeys = enumBugKeys.concat("length", "prototype");

                // `Object.getOwnPropertyNames` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
                exports.f =
                    Object.getOwnPropertyNames ||
                    function getOwnPropertyNames(O) {
                        return internalObjectKeys(O, hiddenKeys);
                    };
            },
            {
                "../internals/enum-bug-keys": 78,
                "../internals/object-keys-internal": 134,
            },
        ],
        132: [
            function(require, module, exports) {
                exports.f = Object.getOwnPropertySymbols;
            },
            {},
        ],
        133: [
            function(require, module, exports) {
                var has = require("../internals/has");
                var toObject = require("../internals/to-object");
                var sharedKey = require("../internals/shared-key");
                var CORRECT_PROTOTYPE_GETTER = require("../internals/correct-prototype-getter");

                var IE_PROTO = sharedKey("IE_PROTO");
                var ObjectPrototype = Object.prototype;

                // `Object.getPrototypeOf` method
                // https://tc39.github.io/ecma262/#sec-object.getprototypeof
                module.exports = CORRECT_PROTOTYPE_GETTER
                    ? Object.getPrototypeOf
                    : function(O) {
                          O = toObject(O);
                          if (has(O, IE_PROTO)) return O[IE_PROTO];
                          if (
                              typeof O.constructor == "function" &&
                              O instanceof O.constructor
                          ) {
                              return O.constructor.prototype;
                          }
                          return O instanceof Object ? ObjectPrototype : null;
                      };
            },
            {
                "../internals/correct-prototype-getter": 65,
                "../internals/has": 93,
                "../internals/shared-key": 157,
                "../internals/to-object": 173,
            },
        ],
        134: [
            function(require, module, exports) {
                var has = require("../internals/has");
                var toIndexedObject = require("../internals/to-indexed-object");
                var indexOf = require("../internals/array-includes").indexOf;
                var hiddenKeys = require("../internals/hidden-keys");

                module.exports = function(object, names) {
                    var O = toIndexedObject(object);
                    var i = 0;
                    var result = [];
                    var key;
                    for (key in O)
                        !has(hiddenKeys, key) &&
                            has(O, key) &&
                            result.push(key);
                    // Don't enum bug & hidden keys
                    while (names.length > i)
                        if (has(O, (key = names[i++]))) {
                            ~indexOf(result, key) || result.push(key);
                        }
                    return result;
                };
            },
            {
                "../internals/array-includes": 49,
                "../internals/has": 93,
                "../internals/hidden-keys": 94,
                "../internals/to-indexed-object": 170,
            },
        ],
        135: [
            function(require, module, exports) {
                var internalObjectKeys = require("../internals/object-keys-internal");
                var enumBugKeys = require("../internals/enum-bug-keys");

                // `Object.keys` method
                // https://tc39.github.io/ecma262/#sec-object.keys
                module.exports =
                    Object.keys ||
                    function keys(O) {
                        return internalObjectKeys(O, enumBugKeys);
                    };
            },
            {
                "../internals/enum-bug-keys": 78,
                "../internals/object-keys-internal": 134,
            },
        ],
        136: [
            function(require, module, exports) {
                "use strict";
                var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
                var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

                // Nashorn ~ JDK8 bug
                var NASHORN_BUG =
                    getOwnPropertyDescriptor &&
                    !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

                // `Object.prototype.propertyIsEnumerable` method implementation
                // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
                exports.f = NASHORN_BUG
                    ? function propertyIsEnumerable(V) {
                          var descriptor = getOwnPropertyDescriptor(this, V);
                          return !!descriptor && descriptor.enumerable;
                      }
                    : nativePropertyIsEnumerable;
            },
            {},
        ],
        137: [
            function(require, module, exports) {
                var anObject = require("../internals/an-object");
                var aPossiblePrototype = require("../internals/a-possible-prototype");

                // `Object.setPrototypeOf` method
                // https://tc39.github.io/ecma262/#sec-object.setprototypeof
                // Works with __proto__ only. Old v8 can't work with null proto objects.
                /* eslint-disable no-proto */
                module.exports =
                    Object.setPrototypeOf ||
                    ("__proto__" in {}
                        ? (function() {
                              var CORRECT_SETTER = false;
                              var test = {};
                              var setter;
                              try {
                                  setter = Object.getOwnPropertyDescriptor(
                                      Object.prototype,
                                      "__proto__",
                                  ).set;
                                  setter.call(test, []);
                                  CORRECT_SETTER = test instanceof Array;
                              } catch (error) {
                                  /* empty */
                              }
                              return function setPrototypeOf(O, proto) {
                                  anObject(O);
                                  aPossiblePrototype(proto);
                                  if (CORRECT_SETTER) setter.call(O, proto);
                                  else O.__proto__ = proto;
                                  return O;
                              };
                          })()
                        : undefined);
            },
            {
                "../internals/a-possible-prototype": 38,
                "../internals/an-object": 42,
            },
        ],
        138: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var objectKeys = require("../internals/object-keys");
                var toIndexedObject = require("../internals/to-indexed-object");
                var propertyIsEnumerable = require("../internals/object-property-is-enumerable")
                    .f;

                // `Object.{ entries, values }` methods implementation
                var createMethod = function(TO_ENTRIES) {
                    return function(it) {
                        var O = toIndexedObject(it);
                        var keys = objectKeys(O);
                        var length = keys.length;
                        var i = 0;
                        var result = [];
                        var key;
                        while (length > i) {
                            key = keys[i++];
                            if (
                                !DESCRIPTORS ||
                                propertyIsEnumerable.call(O, key)
                            ) {
                                result.push(
                                    TO_ENTRIES ? [key, O[key]] : O[key],
                                );
                            }
                        }
                        return result;
                    };
                };

                module.exports = {
                    // `Object.entries` method
                    // https://tc39.github.io/ecma262/#sec-object.entries
                    entries: createMethod(true),
                    // `Object.values` method
                    // https://tc39.github.io/ecma262/#sec-object.values
                    values: createMethod(false),
                };
            },
            {
                "../internals/descriptors": 75,
                "../internals/object-keys": 135,
                "../internals/object-property-is-enumerable": 136,
                "../internals/to-indexed-object": 170,
            },
        ],
        139: [
            function(require, module, exports) {
                "use strict";
                var classof = require("../internals/classof");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                var test = {};

                test[TO_STRING_TAG] = "z";

                // `Object.prototype.toString` method implementation
                // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
                module.exports =
                    String(test) !== "[object z]"
                        ? function toString() {
                              return "[object " + classof(this) + "]";
                          }
                        : test.toString;
            },
            {
                "../internals/classof": 59,
                "../internals/well-known-symbol": 184,
            },
        ],
        140: [
            function(require, module, exports) {
                var getBuiltIn = require("../internals/get-built-in");
                var getOwnPropertyNamesModule = require("../internals/object-get-own-property-names");
                var getOwnPropertySymbolsModule = require("../internals/object-get-own-property-symbols");
                var anObject = require("../internals/an-object");

                // all object keys, includes non-enumerable and symbols
                module.exports =
                    getBuiltIn("Reflect", "ownKeys") ||
                    function ownKeys(it) {
                        var keys = getOwnPropertyNamesModule.f(anObject(it));
                        var getOwnPropertySymbols =
                            getOwnPropertySymbolsModule.f;
                        return getOwnPropertySymbols
                            ? keys.concat(getOwnPropertySymbols(it))
                            : keys;
                    };
            },
            {
                "../internals/an-object": 42,
                "../internals/get-built-in": 89,
                "../internals/object-get-own-property-names": 131,
                "../internals/object-get-own-property-symbols": 132,
            },
        ],
        141: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var trim = require("../internals/string-trim").trim;
                var whitespaces = require("../internals/whitespaces");

                var nativeParseFloat = global.parseFloat;
                var FORCED =
                    1 / nativeParseFloat(whitespaces + "-0") !== -Infinity;

                // `parseFloat` method
                // https://tc39.github.io/ecma262/#sec-parsefloat-string
                module.exports = FORCED
                    ? function parseFloat(string) {
                          var trimmedString = trim(String(string));
                          var result = nativeParseFloat(trimmedString);
                          return result === 0 && trimmedString.charAt(0) == "-"
                              ? -0
                              : result;
                      }
                    : nativeParseFloat;
            },
            {
                "../internals/global": 92,
                "../internals/string-trim": 165,
                "../internals/whitespaces": 185,
            },
        ],
        142: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var trim = require("../internals/string-trim").trim;
                var whitespaces = require("../internals/whitespaces");

                var nativeParseInt = global.parseInt;
                var hex = /^[+-]?0[Xx]/;
                var FORCED =
                    nativeParseInt(whitespaces + "08") !== 8 ||
                    nativeParseInt(whitespaces + "0x16") !== 22;

                // `parseInt` method
                // https://tc39.github.io/ecma262/#sec-parseint-string-radix
                module.exports = FORCED
                    ? function parseInt(string, radix) {
                          var S = trim(String(string));
                          return nativeParseInt(
                              S,
                              radix >>> 0 || (hex.test(S) ? 16 : 10),
                          );
                      }
                    : nativeParseInt;
            },
            {
                "../internals/global": 92,
                "../internals/string-trim": 165,
                "../internals/whitespaces": 185,
            },
        ],
        143: [
            function(require, module, exports) {
                module.exports = require("../internals/global");
            },
            { "../internals/global": 92 },
        ],
        144: [
            function(require, module, exports) {
                module.exports = function(exec) {
                    try {
                        return { error: false, value: exec() };
                    } catch (error) {
                        return { error: true, value: error };
                    }
                };
            },
            {},
        ],
        145: [
            function(require, module, exports) {
                var anObject = require("../internals/an-object");
                var isObject = require("../internals/is-object");
                var newPromiseCapability = require("../internals/new-promise-capability");

                module.exports = function(C, x) {
                    anObject(C);
                    if (isObject(x) && x.constructor === C) return x;
                    var promiseCapability = newPromiseCapability.f(C);
                    var resolve = promiseCapability.resolve;
                    resolve(x);
                    return promiseCapability.promise;
                };
            },
            {
                "../internals/an-object": 42,
                "../internals/is-object": 107,
                "../internals/new-promise-capability": 122,
            },
        ],
        146: [
            function(require, module, exports) {
                "use strict";
                // based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
                var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
                var base = 36;
                var tMin = 1;
                var tMax = 26;
                var skew = 38;
                var damp = 700;
                var initialBias = 72;
                var initialN = 128; // 0x80
                var delimiter = "-"; // '\x2D'
                var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
                var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
                var OVERFLOW_ERROR =
                    "Overflow: input needs wider integers to process";
                var baseMinusTMin = base - tMin;
                var floor = Math.floor;
                var stringFromCharCode = String.fromCharCode;

                /**
                 * Creates an array containing the numeric code points of each Unicode
                 * character in the string. While JavaScript uses UCS-2 internally,
                 * this function will convert a pair of surrogate halves (each of which
                 * UCS-2 exposes as separate characters) into a single code point,
                 * matching UTF-16.
                 */
                var ucs2decode = function(string) {
                    var output = [];
                    var counter = 0;
                    var length = string.length;
                    while (counter < length) {
                        var value = string.charCodeAt(counter++);
                        if (
                            value >= 0xd800 &&
                            value <= 0xdbff &&
                            counter < length
                        ) {
                            // It's a high surrogate, and there is a next character.
                            var extra = string.charCodeAt(counter++);
                            if ((extra & 0xfc00) == 0xdc00) {
                                // Low surrogate.
                                output.push(
                                    ((value & 0x3ff) << 10) +
                                        (extra & 0x3ff) +
                                        0x10000,
                                );
                            } else {
                                // It's an unmatched surrogate; only append this code unit, in case the
                                // next code unit is the high surrogate of a surrogate pair.
                                output.push(value);
                                counter--;
                            }
                        } else {
                            output.push(value);
                        }
                    }
                    return output;
                };

                /**
                 * Converts a digit/integer into a basic code point.
                 */
                var digitToBasic = function(digit) {
                    //  0..25 map to ASCII a..z or A..Z
                    // 26..35 map to ASCII 0..9
                    return digit + 22 + 75 * (digit < 26);
                };

                /**
                 * Bias adaptation function as per section 3.4 of RFC 3492.
                 * https://tools.ietf.org/html/rfc3492#section-3.4
                 */
                var adapt = function(delta, numPoints, firstTime) {
                    var k = 0;
                    delta = firstTime ? floor(delta / damp) : delta >> 1;
                    delta += floor(delta / numPoints);
                    for (; delta > (baseMinusTMin * tMax) >> 1; k += base) {
                        delta = floor(delta / baseMinusTMin);
                    }
                    return floor(
                        k + ((baseMinusTMin + 1) * delta) / (delta + skew),
                    );
                };

                /**
                 * Converts a string of Unicode symbols (e.g. a domain name label) to a
                 * Punycode string of ASCII-only symbols.
                 */
                // eslint-disable-next-line  max-statements
                var encode = function(input) {
                    var output = [];

                    // Convert the input in UCS-2 to an array of Unicode code points.
                    input = ucs2decode(input);

                    // Cache the length.
                    var inputLength = input.length;

                    // Initialize the state.
                    var n = initialN;
                    var delta = 0;
                    var bias = initialBias;
                    var i, currentValue;

                    // Handle the basic code points.
                    for (i = 0; i < input.length; i++) {
                        currentValue = input[i];
                        if (currentValue < 0x80) {
                            output.push(stringFromCharCode(currentValue));
                        }
                    }

                    var basicLength = output.length; // number of basic code points.
                    var handledCPCount = basicLength; // number of code points that have been handled;

                    // Finish the basic string with a delimiter unless it's empty.
                    if (basicLength) {
                        output.push(delimiter);
                    }

                    // Main encoding loop:
                    while (handledCPCount < inputLength) {
                        // All non-basic code points < n have been handled already. Find the next larger one:
                        var m = maxInt;
                        for (i = 0; i < input.length; i++) {
                            currentValue = input[i];
                            if (currentValue >= n && currentValue < m) {
                                m = currentValue;
                            }
                        }

                        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
                        var handledCPCountPlusOne = handledCPCount + 1;
                        if (
                            m - n >
                            floor((maxInt - delta) / handledCPCountPlusOne)
                        ) {
                            throw RangeError(OVERFLOW_ERROR);
                        }

                        delta += (m - n) * handledCPCountPlusOne;
                        n = m;

                        for (i = 0; i < input.length; i++) {
                            currentValue = input[i];
                            if (currentValue < n && ++delta > maxInt) {
                                throw RangeError(OVERFLOW_ERROR);
                            }
                            if (currentValue == n) {
                                // Represent delta as a generalized variable-length integer.
                                var q = delta;
                                for (
                                    var k = base /* no condition */;
                                    ;
                                    k += base
                                ) {
                                    var t =
                                        k <= bias
                                            ? tMin
                                            : k >= bias + tMax
                                            ? tMax
                                            : k - bias;
                                    if (q < t) break;
                                    var qMinusT = q - t;
                                    var baseMinusT = base - t;
                                    output.push(
                                        stringFromCharCode(
                                            digitToBasic(
                                                t + (qMinusT % baseMinusT),
                                            ),
                                        ),
                                    );
                                    q = floor(qMinusT / baseMinusT);
                                }

                                output.push(
                                    stringFromCharCode(digitToBasic(q)),
                                );
                                bias = adapt(
                                    delta,
                                    handledCPCountPlusOne,
                                    handledCPCount == basicLength,
                                );
                                delta = 0;
                                ++handledCPCount;
                            }
                        }

                        ++delta;
                        ++n;
                    }
                    return output.join("");
                };

                module.exports = function(input) {
                    var encoded = [];
                    var labels = input
                        .toLowerCase()
                        .replace(regexSeparators, "\u002E")
                        .split(".");
                    var i, label;
                    for (i = 0; i < labels.length; i++) {
                        label = labels[i];
                        encoded.push(
                            regexNonASCII.test(label)
                                ? "xn--" + encode(label)
                                : label,
                        );
                    }
                    return encoded.join(".");
                };
            },
            {},
        ],
        147: [
            function(require, module, exports) {
                var redefine = require("../internals/redefine");

                module.exports = function(target, src, options) {
                    for (var key in src)
                        redefine(target, key, src[key], options);
                    return target;
                };
            },
            { "../internals/redefine": 148 },
        ],
        148: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var shared = require("../internals/shared");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var has = require("../internals/has");
                var setGlobal = require("../internals/set-global");
                var nativeFunctionToString = require("../internals/function-to-string");
                var InternalStateModule = require("../internals/internal-state");

                var getInternalState = InternalStateModule.get;
                var enforceInternalState = InternalStateModule.enforce;
                var TEMPLATE = String(nativeFunctionToString).split("toString");

                shared("inspectSource", function(it) {
                    return nativeFunctionToString.call(it);
                });

                (module.exports = function(O, key, value, options) {
                    var unsafe = options ? !!options.unsafe : false;
                    var simple = options ? !!options.enumerable : false;
                    var noTargetGet = options ? !!options.noTargetGet : false;
                    if (typeof value == "function") {
                        if (typeof key == "string" && !has(value, "name"))
                            createNonEnumerableProperty(value, "name", key);
                        enforceInternalState(value).source = TEMPLATE.join(
                            typeof key == "string" ? key : "",
                        );
                    }
                    if (O === global) {
                        if (simple) O[key] = value;
                        else setGlobal(key, value);
                        return;
                    } else if (!unsafe) {
                        delete O[key];
                    } else if (!noTargetGet && O[key]) {
                        simple = true;
                    }
                    if (simple) O[key] = value;
                    else createNonEnumerableProperty(O, key, value);
                    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
                })(Function.prototype, "toString", function toString() {
                    return (
                        (typeof this == "function" &&
                            getInternalState(this).source) ||
                        nativeFunctionToString.call(this)
                    );
                });
            },
            {
                "../internals/create-non-enumerable-property": 68,
                "../internals/function-to-string": 88,
                "../internals/global": 92,
                "../internals/has": 93,
                "../internals/internal-state": 101,
                "../internals/set-global": 154,
                "../internals/shared": 159,
            },
        ],
        149: [
            function(require, module, exports) {
                var classof = require("./classof-raw");
                var regexpExec = require("./regexp-exec");

                // `RegExpExec` abstract operation
                // https://tc39.github.io/ecma262/#sec-regexpexec
                module.exports = function(R, S) {
                    var exec = R.exec;
                    if (typeof exec === "function") {
                        var result = exec.call(R, S);
                        if (typeof result !== "object") {
                            throw TypeError(
                                "RegExp exec method returned something other than an Object or null",
                            );
                        }
                        return result;
                    }

                    if (classof(R) !== "RegExp") {
                        throw TypeError(
                            "RegExp#exec called on incompatible receiver",
                        );
                    }

                    return regexpExec.call(R, S);
                };
            },
            { "./classof-raw": 58, "./regexp-exec": 150 },
        ],
        150: [
            function(require, module, exports) {
                "use strict";
                var regexpFlags = require("./regexp-flags");

                var nativeExec = RegExp.prototype.exec;
                // This always refers to the native implementation, because the
                // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
                // which loads this file before patching the method.
                var nativeReplace = String.prototype.replace;

                var patchedExec = nativeExec;

                var UPDATES_LAST_INDEX_WRONG = (function() {
                    var re1 = /a/;
                    var re2 = /b*/g;
                    nativeExec.call(re1, "a");
                    nativeExec.call(re2, "a");
                    return re1.lastIndex !== 0 || re2.lastIndex !== 0;
                })();

                // nonparticipating capturing group, copied from es5-shim's String#split patch.
                var NPCG_INCLUDED = /()??/.exec("")[1] !== undefined;

                var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

                if (PATCH) {
                    patchedExec = function exec(str) {
                        var re = this;
                        var lastIndex, reCopy, match, i;

                        if (NPCG_INCLUDED) {
                            reCopy = new RegExp(
                                "^" + re.source + "$(?!\\s)",
                                regexpFlags.call(re),
                            );
                        }
                        if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

                        match = nativeExec.call(re, str);

                        if (UPDATES_LAST_INDEX_WRONG && match) {
                            re.lastIndex = re.global
                                ? match.index + match[0].length
                                : lastIndex;
                        }
                        if (NPCG_INCLUDED && match && match.length > 1) {
                            // Fix browsers whose `exec` methods don't consistently return `undefined`
                            // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
                            nativeReplace.call(match[0], reCopy, function() {
                                for (i = 1; i < arguments.length - 2; i++) {
                                    if (arguments[i] === undefined)
                                        match[i] = undefined;
                                }
                            });
                        }

                        return match;
                    };
                }

                module.exports = patchedExec;
            },
            { "./regexp-flags": 151 },
        ],
        151: [
            function(require, module, exports) {
                "use strict";
                var anObject = require("../internals/an-object");

                // `RegExp.prototype.flags` getter implementation
                // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
                module.exports = function() {
                    var that = anObject(this);
                    var result = "";
                    if (that.global) result += "g";
                    if (that.ignoreCase) result += "i";
                    if (that.multiline) result += "m";
                    if (that.dotAll) result += "s";
                    if (that.unicode) result += "u";
                    if (that.sticky) result += "y";
                    return result;
                };
            },
            { "../internals/an-object": 42 },
        ],
        152: [
            function(require, module, exports) {
                // `RequireObjectCoercible` abstract operation
                // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
                module.exports = function(it) {
                    if (it == undefined)
                        throw TypeError("Can't call method on " + it);
                    return it;
                };
            },
            {},
        ],
        153: [
            function(require, module, exports) {
                // `SameValue` abstract operation
                // https://tc39.github.io/ecma262/#sec-samevalue
                module.exports =
                    Object.is ||
                    function is(x, y) {
                        // eslint-disable-next-line no-self-compare
                        return x === y
                            ? x !== 0 || 1 / x === 1 / y
                            : x != x && y != y;
                    };
            },
            {},
        ],
        154: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");

                module.exports = function(key, value) {
                    try {
                        createNonEnumerableProperty(global, key, value);
                    } catch (error) {
                        global[key] = value;
                    }
                    return value;
                };
            },
            {
                "../internals/create-non-enumerable-property": 68,
                "../internals/global": 92,
            },
        ],
        155: [
            function(require, module, exports) {
                "use strict";
                var getBuiltIn = require("../internals/get-built-in");
                var definePropertyModule = require("../internals/object-define-property");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var DESCRIPTORS = require("../internals/descriptors");

                var SPECIES = wellKnownSymbol("species");

                module.exports = function(CONSTRUCTOR_NAME) {
                    var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
                    var defineProperty = definePropertyModule.f;

                    if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
                        defineProperty(Constructor, SPECIES, {
                            configurable: true,
                            get: function() {
                                return this;
                            },
                        });
                    }
                };
            },
            {
                "../internals/descriptors": 75,
                "../internals/get-built-in": 89,
                "../internals/object-define-property": 128,
                "../internals/well-known-symbol": 184,
            },
        ],
        156: [
            function(require, module, exports) {
                var defineProperty = require("../internals/object-define-property")
                    .f;
                var has = require("../internals/has");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var TO_STRING_TAG = wellKnownSymbol("toStringTag");

                module.exports = function(it, TAG, STATIC) {
                    if (
                        it &&
                        !has((it = STATIC ? it : it.prototype), TO_STRING_TAG)
                    ) {
                        defineProperty(it, TO_STRING_TAG, {
                            configurable: true,
                            value: TAG,
                        });
                    }
                };
            },
            {
                "../internals/has": 93,
                "../internals/object-define-property": 128,
                "../internals/well-known-symbol": 184,
            },
        ],
        157: [
            function(require, module, exports) {
                var shared = require("../internals/shared");
                var uid = require("../internals/uid");

                var keys = shared("keys");

                module.exports = function(key) {
                    return keys[key] || (keys[key] = uid(key));
                };
            },
            { "../internals/shared": 159, "../internals/uid": 180 },
        ],
        158: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var setGlobal = require("../internals/set-global");

                var SHARED = "__core-js_shared__";
                var store = global[SHARED] || setGlobal(SHARED, {});

                module.exports = store;
            },
            { "../internals/global": 92, "../internals/set-global": 154 },
        ],
        159: [
            function(require, module, exports) {
                var IS_PURE = require("../internals/is-pure");
                var store = require("../internals/shared-store");

                (module.exports = function(key, value) {
                    return (
                        store[key] ||
                        (store[key] = value !== undefined ? value : {})
                    );
                })("versions", []).push({
                    version: "3.4.1",
                    mode: IS_PURE ? "pure" : "global",
                    copyright: "© 2019 Denis Pushkarev (zloirock.ru)",
                });
            },
            { "../internals/is-pure": 108, "../internals/shared-store": 158 },
        ],
        160: [
            function(require, module, exports) {
                "use strict";
                var fails = require("../internals/fails");

                module.exports = function(METHOD_NAME, argument) {
                    var method = [][METHOD_NAME];
                    return (
                        !method ||
                        !fails(function() {
                            // eslint-disable-next-line no-useless-call,no-throw-literal
                            method.call(
                                null,
                                argument ||
                                    function() {
                                        throw 1;
                                    },
                                1,
                            );
                        })
                    );
                };
            },
            { "../internals/fails": 80 },
        ],
        161: [
            function(require, module, exports) {
                var anObject = require("../internals/an-object");
                var aFunction = require("../internals/a-function");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var SPECIES = wellKnownSymbol("species");

                // `SpeciesConstructor` abstract operation
                // https://tc39.github.io/ecma262/#sec-speciesconstructor
                module.exports = function(O, defaultConstructor) {
                    var C = anObject(O).constructor;
                    var S;
                    return C === undefined ||
                        (S = anObject(C)[SPECIES]) == undefined
                        ? defaultConstructor
                        : aFunction(S);
                };
            },
            {
                "../internals/a-function": 37,
                "../internals/an-object": 42,
                "../internals/well-known-symbol": 184,
            },
        ],
        162: [
            function(require, module, exports) {
                var toInteger = require("../internals/to-integer");
                var requireObjectCoercible = require("../internals/require-object-coercible");

                // `String.prototype.{ codePointAt, at }` methods implementation
                var createMethod = function(CONVERT_TO_STRING) {
                    return function($this, pos) {
                        var S = String(requireObjectCoercible($this));
                        var position = toInteger(pos);
                        var size = S.length;
                        var first, second;
                        if (position < 0 || position >= size)
                            return CONVERT_TO_STRING ? "" : undefined;
                        first = S.charCodeAt(position);
                        return first < 0xd800 ||
                            first > 0xdbff ||
                            position + 1 === size ||
                            (second = S.charCodeAt(position + 1)) < 0xdc00 ||
                            second > 0xdfff
                            ? CONVERT_TO_STRING
                                ? S.charAt(position)
                                : first
                            : CONVERT_TO_STRING
                            ? S.slice(position, position + 2)
                            : ((first - 0xd800) << 10) +
                              (second - 0xdc00) +
                              0x10000;
                    };
                };

                module.exports = {
                    // `String.prototype.codePointAt` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
                    codeAt: createMethod(false),
                    // `String.prototype.at` method
                    // https://github.com/mathiasbynens/String.prototype.at
                    charAt: createMethod(true),
                };
            },
            {
                "../internals/require-object-coercible": 152,
                "../internals/to-integer": 171,
            },
        ],
        163: [
            function(require, module, exports) {
                // https://github.com/tc39/proposal-string-pad-start-end
                var toLength = require("../internals/to-length");
                var repeat = require("../internals/string-repeat");
                var requireObjectCoercible = require("../internals/require-object-coercible");

                var ceil = Math.ceil;

                // `String.prototype.{ padStart, padEnd }` methods implementation
                var createMethod = function(IS_END) {
                    return function($this, maxLength, fillString) {
                        var S = String(requireObjectCoercible($this));
                        var stringLength = S.length;
                        var fillStr =
                            fillString === undefined ? " " : String(fillString);
                        var intMaxLength = toLength(maxLength);
                        var fillLen, stringFiller;
                        if (intMaxLength <= stringLength || fillStr == "")
                            return S;
                        fillLen = intMaxLength - stringLength;
                        stringFiller = repeat.call(
                            fillStr,
                            ceil(fillLen / fillStr.length),
                        );
                        if (stringFiller.length > fillLen)
                            stringFiller = stringFiller.slice(0, fillLen);
                        return IS_END ? S + stringFiller : stringFiller + S;
                    };
                };

                module.exports = {
                    // `String.prototype.padStart` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
                    start: createMethod(false),
                    // `String.prototype.padEnd` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.padend
                    end: createMethod(true),
                };
            },
            {
                "../internals/require-object-coercible": 152,
                "../internals/string-repeat": 164,
                "../internals/to-length": 172,
            },
        ],
        164: [
            function(require, module, exports) {
                "use strict";
                var toInteger = require("../internals/to-integer");
                var requireObjectCoercible = require("../internals/require-object-coercible");

                // `String.prototype.repeat` method implementation
                // https://tc39.github.io/ecma262/#sec-string.prototype.repeat
                module.exports =
                    "".repeat ||
                    function repeat(count) {
                        var str = String(requireObjectCoercible(this));
                        var result = "";
                        var n = toInteger(count);
                        if (n < 0 || n == Infinity)
                            throw RangeError("Wrong number of repetitions");
                        for (; n > 0; (n >>>= 1) && (str += str))
                            if (n & 1) result += str;
                        return result;
                    };
            },
            {
                "../internals/require-object-coercible": 152,
                "../internals/to-integer": 171,
            },
        ],
        165: [
            function(require, module, exports) {
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var whitespaces = require("../internals/whitespaces");

                var whitespace = "[" + whitespaces + "]";
                var ltrim = RegExp("^" + whitespace + whitespace + "*");
                var rtrim = RegExp(whitespace + whitespace + "*$");

                // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
                var createMethod = function(TYPE) {
                    return function($this) {
                        var string = String(requireObjectCoercible($this));
                        if (TYPE & 1) string = string.replace(ltrim, "");
                        if (TYPE & 2) string = string.replace(rtrim, "");
                        return string;
                    };
                };

                module.exports = {
                    // `String.prototype.{ trimLeft, trimStart }` methods
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
                    start: createMethod(1),
                    // `String.prototype.{ trimRight, trimEnd }` methods
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
                    end: createMethod(2),
                    // `String.prototype.trim` method
                    // https://tc39.github.io/ecma262/#sec-string.prototype.trim
                    trim: createMethod(3),
                };
            },
            {
                "../internals/require-object-coercible": 152,
                "../internals/whitespaces": 185,
            },
        ],
        166: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var fails = require("../internals/fails");
                var classof = require("../internals/classof-raw");
                var bind = require("../internals/bind-context");
                var html = require("../internals/html");
                var createElement = require("../internals/document-create-element");
                var IS_IOS = require("../internals/is-ios");

                var location = global.location;
                var set = global.setImmediate;
                var clear = global.clearImmediate;
                var process = global.process;
                var MessageChannel = global.MessageChannel;
                var Dispatch = global.Dispatch;
                var counter = 0;
                var queue = {};
                var ONREADYSTATECHANGE = "onreadystatechange";
                var defer, channel, port;

                var run = function(id) {
                    // eslint-disable-next-line no-prototype-builtins
                    if (queue.hasOwnProperty(id)) {
                        var fn = queue[id];
                        delete queue[id];
                        fn();
                    }
                };

                var runner = function(id) {
                    return function() {
                        run(id);
                    };
                };

                var listener = function(event) {
                    run(event.data);
                };

                var post = function(id) {
                    // old engines have not location.origin
                    global.postMessage(
                        id + "",
                        location.protocol + "//" + location.host,
                    );
                };

                // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
                if (!set || !clear) {
                    set = function setImmediate(fn) {
                        var args = [];
                        var i = 1;
                        while (arguments.length > i) args.push(arguments[i++]);
                        queue[++counter] = function() {
                            // eslint-disable-next-line no-new-func
                            (typeof fn == "function" ? fn : Function(fn)).apply(
                                undefined,
                                args,
                            );
                        };
                        defer(counter);
                        return counter;
                    };
                    clear = function clearImmediate(id) {
                        delete queue[id];
                    };
                    // Node.js 0.8-
                    if (classof(process) == "process") {
                        defer = function(id) {
                            process.nextTick(runner(id));
                        };
                        // Sphere (JS game engine) Dispatch API
                    } else if (Dispatch && Dispatch.now) {
                        defer = function(id) {
                            Dispatch.now(runner(id));
                        };
                        // Browsers with MessageChannel, includes WebWorkers
                        // except iOS - https://github.com/zloirock/core-js/issues/624
                    } else if (MessageChannel && !IS_IOS) {
                        channel = new MessageChannel();
                        port = channel.port2;
                        channel.port1.onmessage = listener;
                        defer = bind(port.postMessage, port, 1);
                        // Browsers with postMessage, skip WebWorkers
                        // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
                    } else if (
                        global.addEventListener &&
                        typeof postMessage == "function" &&
                        !global.importScripts &&
                        !fails(post)
                    ) {
                        defer = post;
                        global.addEventListener("message", listener, false);
                        // IE8-
                    } else if (ONREADYSTATECHANGE in createElement("script")) {
                        defer = function(id) {
                            html.appendChild(createElement("script"))[
                                ONREADYSTATECHANGE
                            ] = function() {
                                html.removeChild(this);
                                run(id);
                            };
                        };
                        // Rest old browsers
                    } else {
                        defer = function(id) {
                            setTimeout(runner(id), 0);
                        };
                    }
                }

                module.exports = {
                    set: set,
                    clear: clear,
                };
            },
            {
                "../internals/bind-context": 55,
                "../internals/classof-raw": 58,
                "../internals/document-create-element": 76,
                "../internals/fails": 80,
                "../internals/global": 92,
                "../internals/html": 96,
                "../internals/is-ios": 106,
            },
        ],
        167: [
            function(require, module, exports) {
                var classof = require("../internals/classof-raw");

                // `thisNumberValue` abstract operation
                // https://tc39.github.io/ecma262/#sec-thisnumbervalue
                module.exports = function(value) {
                    if (
                        typeof value != "number" &&
                        classof(value) != "Number"
                    ) {
                        throw TypeError("Incorrect invocation");
                    }
                    return +value;
                };
            },
            { "../internals/classof-raw": 58 },
        ],
        168: [
            function(require, module, exports) {
                var toInteger = require("../internals/to-integer");

                var max = Math.max;
                var min = Math.min;

                // Helper for a popular repeating case of the spec:
                // Let integer be ? ToInteger(index).
                // If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
                module.exports = function(index, length) {
                    var integer = toInteger(index);
                    return integer < 0
                        ? max(integer + length, 0)
                        : min(integer, length);
                };
            },
            { "../internals/to-integer": 171 },
        ],
        169: [
            function(require, module, exports) {
                var toInteger = require("../internals/to-integer");
                var toLength = require("../internals/to-length");

                // `ToIndex` abstract operation
                // https://tc39.github.io/ecma262/#sec-toindex
                module.exports = function(it) {
                    if (it === undefined) return 0;
                    var number = toInteger(it);
                    var length = toLength(number);
                    if (number !== length)
                        throw RangeError("Wrong length or index");
                    return length;
                };
            },
            { "../internals/to-integer": 171, "../internals/to-length": 172 },
        ],
        170: [
            function(require, module, exports) {
                // toObject with fallback for non-array-like ES3 strings
                var IndexedObject = require("../internals/indexed-object");
                var requireObjectCoercible = require("../internals/require-object-coercible");

                module.exports = function(it) {
                    return IndexedObject(requireObjectCoercible(it));
                };
            },
            {
                "../internals/indexed-object": 98,
                "../internals/require-object-coercible": 152,
            },
        ],
        171: [
            function(require, module, exports) {
                var ceil = Math.ceil;
                var floor = Math.floor;

                // `ToInteger` abstract operation
                // https://tc39.github.io/ecma262/#sec-tointeger
                module.exports = function(argument) {
                    return isNaN((argument = +argument))
                        ? 0
                        : (argument > 0 ? floor : ceil)(argument);
                };
            },
            {},
        ],
        172: [
            function(require, module, exports) {
                var toInteger = require("../internals/to-integer");

                var min = Math.min;

                // `ToLength` abstract operation
                // https://tc39.github.io/ecma262/#sec-tolength
                module.exports = function(argument) {
                    return argument > 0
                        ? min(toInteger(argument), 0x1fffffffffffff)
                        : 0; // 2 ** 53 - 1 == 9007199254740991
                };
            },
            { "../internals/to-integer": 171 },
        ],
        173: [
            function(require, module, exports) {
                var requireObjectCoercible = require("../internals/require-object-coercible");

                // `ToObject` abstract operation
                // https://tc39.github.io/ecma262/#sec-toobject
                module.exports = function(argument) {
                    return Object(requireObjectCoercible(argument));
                };
            },
            { "../internals/require-object-coercible": 152 },
        ],
        174: [
            function(require, module, exports) {
                var toPositiveInteger = require("../internals/to-positive-integer");

                module.exports = function(it, BYTES) {
                    var offset = toPositiveInteger(it);
                    if (offset % BYTES) throw RangeError("Wrong offset");
                    return offset;
                };
            },
            { "../internals/to-positive-integer": 175 },
        ],
        175: [
            function(require, module, exports) {
                var toInteger = require("../internals/to-integer");

                module.exports = function(it) {
                    var result = toInteger(it);
                    if (result < 0)
                        throw RangeError("The argument can't be less than 0");
                    return result;
                };
            },
            { "../internals/to-integer": 171 },
        ],
        176: [
            function(require, module, exports) {
                var isObject = require("../internals/is-object");

                // `ToPrimitive` abstract operation
                // https://tc39.github.io/ecma262/#sec-toprimitive
                // instead of the ES6 spec version, we didn't implement @@toPrimitive case
                // and the second argument - flag - preferred type is a string
                module.exports = function(input, PREFERRED_STRING) {
                    if (!isObject(input)) return input;
                    var fn, val;
                    if (
                        PREFERRED_STRING &&
                        typeof (fn = input.toString) == "function" &&
                        !isObject((val = fn.call(input)))
                    )
                        return val;
                    if (
                        typeof (fn = input.valueOf) == "function" &&
                        !isObject((val = fn.call(input)))
                    )
                        return val;
                    if (
                        !PREFERRED_STRING &&
                        typeof (fn = input.toString) == "function" &&
                        !isObject((val = fn.call(input)))
                    )
                        return val;
                    throw TypeError("Can't convert object to primitive value");
                };
            },
            { "../internals/is-object": 107 },
        ],
        177: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var global = require("../internals/global");
                var DESCRIPTORS = require("../internals/descriptors");
                var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require("../internals/typed-arrays-constructors-requires-wrappers");
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var ArrayBufferModule = require("../internals/array-buffer");
                var anInstance = require("../internals/an-instance");
                var createPropertyDescriptor = require("../internals/create-property-descriptor");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var toLength = require("../internals/to-length");
                var toIndex = require("../internals/to-index");
                var toOffset = require("../internals/to-offset");
                var toPrimitive = require("../internals/to-primitive");
                var has = require("../internals/has");
                var classof = require("../internals/classof");
                var isObject = require("../internals/is-object");
                var create = require("../internals/object-create");
                var setPrototypeOf = require("../internals/object-set-prototype-of");
                var getOwnPropertyNames = require("../internals/object-get-own-property-names")
                    .f;
                var typedArrayFrom = require("../internals/typed-array-from");
                var forEach = require("../internals/array-iteration").forEach;
                var setSpecies = require("../internals/set-species");
                var definePropertyModule = require("../internals/object-define-property");
                var getOwnPropertyDescriptorModule = require("../internals/object-get-own-property-descriptor");
                var InternalStateModule = require("../internals/internal-state");
                var inheritIfRequired = require("../internals/inherit-if-required");

                var getInternalState = InternalStateModule.get;
                var setInternalState = InternalStateModule.set;
                var nativeDefineProperty = definePropertyModule.f;
                var nativeGetOwnPropertyDescriptor =
                    getOwnPropertyDescriptorModule.f;
                var round = Math.round;
                var RangeError = global.RangeError;
                var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
                var DataView = ArrayBufferModule.DataView;
                var NATIVE_ARRAY_BUFFER_VIEWS =
                    ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
                var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
                var TypedArray = ArrayBufferViewCore.TypedArray;
                var TypedArrayPrototype =
                    ArrayBufferViewCore.TypedArrayPrototype;
                var aTypedArrayConstructor =
                    ArrayBufferViewCore.aTypedArrayConstructor;
                var isTypedArray = ArrayBufferViewCore.isTypedArray;
                var BYTES_PER_ELEMENT = "BYTES_PER_ELEMENT";
                var WRONG_LENGTH = "Wrong length";

                var fromList = function(C, list) {
                    var index = 0;
                    var length = list.length;
                    var result = new (aTypedArrayConstructor(C))(length);
                    while (length > index) result[index] = list[index++];
                    return result;
                };

                var addGetter = function(it, key) {
                    nativeDefineProperty(it, key, {
                        get: function() {
                            return getInternalState(this)[key];
                        },
                    });
                };

                var isArrayBuffer = function(it) {
                    var klass;
                    return (
                        it instanceof ArrayBuffer ||
                        (klass = classof(it)) == "ArrayBuffer" ||
                        klass == "SharedArrayBuffer"
                    );
                };

                var isTypedArrayIndex = function(target, key) {
                    return (
                        isTypedArray(target) &&
                        typeof key != "symbol" &&
                        key in target &&
                        String(+key) == String(key)
                    );
                };

                var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(
                    target,
                    key,
                ) {
                    return isTypedArrayIndex(
                        target,
                        (key = toPrimitive(key, true)),
                    )
                        ? createPropertyDescriptor(2, target[key])
                        : nativeGetOwnPropertyDescriptor(target, key);
                };

                var wrappedDefineProperty = function defineProperty(
                    target,
                    key,
                    descriptor,
                ) {
                    if (
                        isTypedArrayIndex(
                            target,
                            (key = toPrimitive(key, true)),
                        ) &&
                        isObject(descriptor) &&
                        has(descriptor, "value") &&
                        !has(descriptor, "get") &&
                        !has(descriptor, "set") &&
                        // TODO: add validation descriptor w/o calling accessors
                        !descriptor.configurable &&
                        (!has(descriptor, "writable") || descriptor.writable) &&
                        (!has(descriptor, "enumerable") ||
                            descriptor.enumerable)
                    ) {
                        target[key] = descriptor.value;
                        return target;
                    }
                    return nativeDefineProperty(target, key, descriptor);
                };

                if (DESCRIPTORS) {
                    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
                        getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
                        definePropertyModule.f = wrappedDefineProperty;
                        addGetter(TypedArrayPrototype, "buffer");
                        addGetter(TypedArrayPrototype, "byteOffset");
                        addGetter(TypedArrayPrototype, "byteLength");
                        addGetter(TypedArrayPrototype, "length");
                    }

                    $(
                        {
                            target: "Object",
                            stat: true,
                            forced: !NATIVE_ARRAY_BUFFER_VIEWS,
                        },
                        {
                            getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
                            defineProperty: wrappedDefineProperty,
                        },
                    );

                    module.exports = function(TYPE, BYTES, wrapper, CLAMPED) {
                        var CONSTRUCTOR_NAME =
                            TYPE + (CLAMPED ? "Clamped" : "") + "Array";
                        var GETTER = "get" + TYPE;
                        var SETTER = "set" + TYPE;
                        var NativeTypedArrayConstructor =
                            global[CONSTRUCTOR_NAME];
                        var TypedArrayConstructor = NativeTypedArrayConstructor;
                        var TypedArrayConstructorPrototype =
                            TypedArrayConstructor &&
                            TypedArrayConstructor.prototype;
                        var exported = {};

                        var getter = function(that, index) {
                            var data = getInternalState(that);
                            return data.view[GETTER](
                                index * BYTES + data.byteOffset,
                                true,
                            );
                        };

                        var setter = function(that, index, value) {
                            var data = getInternalState(that);
                            if (CLAMPED)
                                value =
                                    (value = round(value)) < 0
                                        ? 0
                                        : value > 0xff
                                        ? 0xff
                                        : value & 0xff;
                            data.view[SETTER](
                                index * BYTES + data.byteOffset,
                                value,
                                true,
                            );
                        };

                        var addElement = function(that, index) {
                            nativeDefineProperty(that, index, {
                                get: function() {
                                    return getter(this, index);
                                },
                                set: function(value) {
                                    return setter(this, index, value);
                                },
                                enumerable: true,
                            });
                        };

                        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
                            TypedArrayConstructor = wrapper(function(
                                that,
                                data,
                                offset,
                                $length,
                            ) {
                                anInstance(
                                    that,
                                    TypedArrayConstructor,
                                    CONSTRUCTOR_NAME,
                                );
                                var index = 0;
                                var byteOffset = 0;
                                var buffer, byteLength, length;
                                if (!isObject(data)) {
                                    length = toIndex(data);
                                    byteLength = length * BYTES;
                                    buffer = new ArrayBuffer(byteLength);
                                } else if (isArrayBuffer(data)) {
                                    buffer = data;
                                    byteOffset = toOffset(offset, BYTES);
                                    var $len = data.byteLength;
                                    if ($length === undefined) {
                                        if ($len % BYTES)
                                            throw RangeError(WRONG_LENGTH);
                                        byteLength = $len - byteOffset;
                                        if (byteLength < 0)
                                            throw RangeError(WRONG_LENGTH);
                                    } else {
                                        byteLength = toLength($length) * BYTES;
                                        if (byteLength + byteOffset > $len)
                                            throw RangeError(WRONG_LENGTH);
                                    }
                                    length = byteLength / BYTES;
                                } else if (isTypedArray(data)) {
                                    return fromList(
                                        TypedArrayConstructor,
                                        data,
                                    );
                                } else {
                                    return typedArrayFrom.call(
                                        TypedArrayConstructor,
                                        data,
                                    );
                                }
                                setInternalState(that, {
                                    buffer: buffer,
                                    byteOffset: byteOffset,
                                    byteLength: byteLength,
                                    length: length,
                                    view: new DataView(buffer),
                                });
                                while (index < length)
                                    addElement(that, index++);
                            });

                            if (setPrototypeOf)
                                setPrototypeOf(
                                    TypedArrayConstructor,
                                    TypedArray,
                                );
                            TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(
                                TypedArrayPrototype,
                            );
                        } else if (
                            TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS
                        ) {
                            TypedArrayConstructor = wrapper(function(
                                dummy,
                                data,
                                typedArrayOffset,
                                $length,
                            ) {
                                anInstance(
                                    dummy,
                                    TypedArrayConstructor,
                                    CONSTRUCTOR_NAME,
                                );
                                return inheritIfRequired(
                                    (function() {
                                        if (!isObject(data))
                                            return new NativeTypedArrayConstructor(
                                                toIndex(data),
                                            );
                                        if (isArrayBuffer(data))
                                            return $length !== undefined
                                                ? new NativeTypedArrayConstructor(
                                                      data,
                                                      toOffset(
                                                          typedArrayOffset,
                                                          BYTES,
                                                      ),
                                                      $length,
                                                  )
                                                : typedArrayOffset !== undefined
                                                ? new NativeTypedArrayConstructor(
                                                      data,
                                                      toOffset(
                                                          typedArrayOffset,
                                                          BYTES,
                                                      ),
                                                  )
                                                : new NativeTypedArrayConstructor(
                                                      data,
                                                  );
                                        if (isTypedArray(data))
                                            return fromList(
                                                TypedArrayConstructor,
                                                data,
                                            );
                                        return typedArrayFrom.call(
                                            TypedArrayConstructor,
                                            data,
                                        );
                                    })(),
                                    dummy,
                                    TypedArrayConstructor,
                                );
                            });

                            if (setPrototypeOf)
                                setPrototypeOf(
                                    TypedArrayConstructor,
                                    TypedArray,
                                );
                            forEach(
                                getOwnPropertyNames(
                                    NativeTypedArrayConstructor,
                                ),
                                function(key) {
                                    if (!(key in TypedArrayConstructor)) {
                                        createNonEnumerableProperty(
                                            TypedArrayConstructor,
                                            key,
                                            NativeTypedArrayConstructor[key],
                                        );
                                    }
                                },
                            );
                            TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
                        }

                        if (
                            TypedArrayConstructorPrototype.constructor !==
                            TypedArrayConstructor
                        ) {
                            createNonEnumerableProperty(
                                TypedArrayConstructorPrototype,
                                "constructor",
                                TypedArrayConstructor,
                            );
                        }

                        if (TYPED_ARRAY_TAG) {
                            createNonEnumerableProperty(
                                TypedArrayConstructorPrototype,
                                TYPED_ARRAY_TAG,
                                CONSTRUCTOR_NAME,
                            );
                        }

                        exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

                        $(
                            {
                                global: true,
                                forced:
                                    TypedArrayConstructor !=
                                    NativeTypedArrayConstructor,
                                sham: !NATIVE_ARRAY_BUFFER_VIEWS,
                            },
                            exported,
                        );

                        if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
                            createNonEnumerableProperty(
                                TypedArrayConstructor,
                                BYTES_PER_ELEMENT,
                                BYTES,
                            );
                        }

                        if (
                            !(
                                BYTES_PER_ELEMENT in
                                TypedArrayConstructorPrototype
                            )
                        ) {
                            createNonEnumerableProperty(
                                TypedArrayConstructorPrototype,
                                BYTES_PER_ELEMENT,
                                BYTES,
                            );
                        }

                        setSpecies(CONSTRUCTOR_NAME);
                    };
                } else
                    module.exports = function() {
                        /* empty */
                    };
            },
            {
                "../internals/an-instance": 41,
                "../internals/array-buffer": 44,
                "../internals/array-buffer-view-core": 43,
                "../internals/array-iteration": 50,
                "../internals/classof": 59,
                "../internals/create-non-enumerable-property": 68,
                "../internals/create-property-descriptor": 69,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/global": 92,
                "../internals/has": 93,
                "../internals/inherit-if-required": 99,
                "../internals/internal-state": 101,
                "../internals/is-object": 107,
                "../internals/object-create": 126,
                "../internals/object-define-property": 128,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/object-get-own-property-names": 131,
                "../internals/object-set-prototype-of": 137,
                "../internals/set-species": 155,
                "../internals/to-index": 169,
                "../internals/to-length": 172,
                "../internals/to-offset": 174,
                "../internals/to-primitive": 176,
                "../internals/typed-array-from": 178,
                "../internals/typed-arrays-constructors-requires-wrappers": 179,
            },
        ],
        178: [
            function(require, module, exports) {
                var toObject = require("../internals/to-object");
                var toLength = require("../internals/to-length");
                var getIteratorMethod = require("../internals/get-iterator-method");
                var isArrayIteratorMethod = require("../internals/is-array-iterator-method");
                var bind = require("../internals/bind-context");
                var aTypedArrayConstructor = require("../internals/array-buffer-view-core")
                    .aTypedArrayConstructor;

                module.exports = function from(source /* , mapfn, thisArg */) {
                    var O = toObject(source);
                    var argumentsLength = arguments.length;
                    var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
                    var mapping = mapfn !== undefined;
                    var iteratorMethod = getIteratorMethod(O);
                    var i, length, result, step, iterator, next;
                    if (
                        iteratorMethod != undefined &&
                        !isArrayIteratorMethod(iteratorMethod)
                    ) {
                        iterator = iteratorMethod.call(O);
                        next = iterator.next;
                        O = [];
                        while (!(step = next.call(iterator)).done) {
                            O.push(step.value);
                        }
                    }
                    if (mapping && argumentsLength > 2) {
                        mapfn = bind(mapfn, arguments[2], 2);
                    }
                    length = toLength(O.length);
                    result = new (aTypedArrayConstructor(this))(length);
                    for (i = 0; length > i; i++) {
                        result[i] = mapping ? mapfn(O[i], i) : O[i];
                    }
                    return result;
                };
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/bind-context": 55,
                "../internals/get-iterator-method": 90,
                "../internals/is-array-iterator-method": 102,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        179: [
            function(require, module, exports) {
                /* eslint-disable no-new */
                var global = require("../internals/global");
                var fails = require("../internals/fails");
                var checkCorrectnessOfIteration = require("../internals/check-correctness-of-iteration");
                var NATIVE_ARRAY_BUFFER_VIEWS = require("../internals/array-buffer-view-core")
                    .NATIVE_ARRAY_BUFFER_VIEWS;

                var ArrayBuffer = global.ArrayBuffer;
                var Int8Array = global.Int8Array;

                module.exports =
                    !NATIVE_ARRAY_BUFFER_VIEWS ||
                    !fails(function() {
                        Int8Array(1);
                    }) ||
                    !fails(function() {
                        new Int8Array(-1);
                    }) ||
                    !checkCorrectnessOfIteration(function(iterable) {
                        new Int8Array();
                        new Int8Array(null);
                        new Int8Array(1.5);
                        new Int8Array(iterable);
                    }, true) ||
                    fails(function() {
                        // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
                        return (
                            new Int8Array(new ArrayBuffer(2), 1, undefined)
                                .length !== 1
                        );
                    });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/check-correctness-of-iteration": 57,
                "../internals/fails": 80,
                "../internals/global": 92,
            },
        ],
        180: [
            function(require, module, exports) {
                var id = 0;
                var postfix = Math.random();

                module.exports = function(key) {
                    return (
                        "Symbol(" +
                        String(key === undefined ? "" : key) +
                        ")_" +
                        (++id + postfix).toString(36)
                    );
                };
            },
            {},
        ],
        181: [
            function(require, module, exports) {
                var getBuiltIn = require("../internals/get-built-in");

                module.exports = getBuiltIn("navigator", "userAgent") || "";
            },
            { "../internals/get-built-in": 89 },
        ],
        182: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var userAgent = require("../internals/user-agent");

                var process = global.process;
                var versions = process && process.versions;
                var v8 = versions && versions.v8;
                var match, version;

                if (v8) {
                    match = v8.split(".");
                    version = match[0] + match[1];
                } else if (userAgent) {
                    match = userAgent.match(/Edge\/(\d+)/);
                    if (!match || match[1] >= 74) {
                        match = userAgent.match(/Chrome\/(\d+)/);
                        if (match) version = match[1];
                    }
                }

                module.exports = version && +version;
            },
            { "../internals/global": 92, "../internals/user-agent": 181 },
        ],
        183: [
            function(require, module, exports) {
                // https://github.com/zloirock/core-js/issues/280
                var userAgent = require("../internals/user-agent");

                // eslint-disable-next-line unicorn/no-unsafe-regex
                module.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(
                    userAgent,
                );
            },
            { "../internals/user-agent": 181 },
        ],
        184: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var shared = require("../internals/shared");
                var uid = require("../internals/uid");
                var NATIVE_SYMBOL = require("../internals/native-symbol");

                var Symbol = global.Symbol;
                var store = shared("wks");

                module.exports = function(name) {
                    return (
                        store[name] ||
                        (store[name] =
                            (NATIVE_SYMBOL && Symbol[name]) ||
                            (NATIVE_SYMBOL ? Symbol : uid)("Symbol." + name))
                    );
                };
            },
            {
                "../internals/global": 92,
                "../internals/native-symbol": 119,
                "../internals/shared": 159,
                "../internals/uid": 180,
            },
        ],
        185: [
            function(require, module, exports) {
                // a string of all valid unicode whitespaces
                // eslint-disable-next-line max-len
                module.exports =
                    "\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
            },
            {},
        ],
        186: [
            function(require, module, exports) {
                exports.f = require("../internals/well-known-symbol");
            },
            { "../internals/well-known-symbol": 184 },
        ],
        187: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var global = require("../internals/global");
                var arrayBufferModule = require("../internals/array-buffer");
                var setSpecies = require("../internals/set-species");

                var ARRAY_BUFFER = "ArrayBuffer";
                var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
                var NativeArrayBuffer = global[ARRAY_BUFFER];

                // `ArrayBuffer` constructor
                // https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
                $(
                    { global: true, forced: NativeArrayBuffer !== ArrayBuffer },
                    {
                        ArrayBuffer: ArrayBuffer,
                    },
                );

                setSpecies(ARRAY_BUFFER);
            },
            {
                "../internals/array-buffer": 44,
                "../internals/export": 79,
                "../internals/global": 92,
                "../internals/set-species": 155,
            },
        ],
        188: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");

                var NATIVE_ARRAY_BUFFER_VIEWS =
                    ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

                // `ArrayBuffer.isView` method
                // https://tc39.github.io/ecma262/#sec-arraybuffer.isview
                $(
                    {
                        target: "ArrayBuffer",
                        stat: true,
                        forced: !NATIVE_ARRAY_BUFFER_VIEWS,
                    },
                    {
                        isView: ArrayBufferViewCore.isView,
                    },
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/export": 79,
            },
        ],
        189: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var ArrayBufferModule = require("../internals/array-buffer");
                var anObject = require("../internals/an-object");
                var toAbsoluteIndex = require("../internals/to-absolute-index");
                var toLength = require("../internals/to-length");
                var speciesConstructor = require("../internals/species-constructor");

                var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
                var DataView = ArrayBufferModule.DataView;
                var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;

                var INCORRECT_SLICE = fails(function() {
                    return !new ArrayBuffer(2).slice(1, undefined).byteLength;
                });

                // `ArrayBuffer.prototype.slice` method
                // https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
                $(
                    {
                        target: "ArrayBuffer",
                        proto: true,
                        unsafe: true,
                        forced: INCORRECT_SLICE,
                    },
                    {
                        slice: function slice(start, end) {
                            if (
                                nativeArrayBufferSlice !== undefined &&
                                end === undefined
                            ) {
                                return nativeArrayBufferSlice.call(
                                    anObject(this),
                                    start,
                                ); // FF fix
                            }
                            var length = anObject(this).byteLength;
                            var first = toAbsoluteIndex(start, length);
                            var fin = toAbsoluteIndex(
                                end === undefined ? length : end,
                                length,
                            );
                            var result = new (speciesConstructor(
                                this,
                                ArrayBuffer,
                            ))(toLength(fin - first));
                            var viewSource = new DataView(this);
                            var viewTarget = new DataView(result);
                            var index = 0;
                            while (first < fin) {
                                viewTarget.setUint8(
                                    index++,
                                    viewSource.getUint8(first++),
                                );
                            }
                            return result;
                        },
                    },
                );
            },
            {
                "../internals/an-object": 42,
                "../internals/array-buffer": 44,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/species-constructor": 161,
                "../internals/to-absolute-index": 168,
                "../internals/to-length": 172,
            },
        ],
        190: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var isArray = require("../internals/is-array");
                var isObject = require("../internals/is-object");
                var toObject = require("../internals/to-object");
                var toLength = require("../internals/to-length");
                var createProperty = require("../internals/create-property");
                var arraySpeciesCreate = require("../internals/array-species-create");
                var arrayMethodHasSpeciesSupport = require("../internals/array-method-has-species-support");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var V8_VERSION = require("../internals/v8-version");

                var IS_CONCAT_SPREADABLE = wellKnownSymbol(
                    "isConcatSpreadable",
                );
                var MAX_SAFE_INTEGER = 0x1fffffffffffff;
                var MAXIMUM_ALLOWED_INDEX_EXCEEDED =
                    "Maximum allowed index exceeded";

                // We can't use this feature detection in V8 since it causes
                // deoptimization and serious performance degradation
                // https://github.com/zloirock/core-js/issues/679
                var IS_CONCAT_SPREADABLE_SUPPORT =
                    V8_VERSION >= 51 ||
                    !fails(function() {
                        var array = [];
                        array[IS_CONCAT_SPREADABLE] = false;
                        return array.concat()[0] !== array;
                    });

                var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");

                var isConcatSpreadable = function(O) {
                    if (!isObject(O)) return false;
                    var spreadable = O[IS_CONCAT_SPREADABLE];
                    return spreadable !== undefined ? !!spreadable : isArray(O);
                };

                var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

                // `Array.prototype.concat` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.concat
                // with adding support of @@isConcatSpreadable and @@species
                $(
                    { target: "Array", proto: true, forced: FORCED },
                    {
                        concat: function concat(arg) {
                            // eslint-disable-line no-unused-vars
                            var O = toObject(this);
                            var A = arraySpeciesCreate(O, 0);
                            var n = 0;
                            var i, k, length, len, E;
                            for (
                                i = -1, length = arguments.length;
                                i < length;
                                i++
                            ) {
                                E = i === -1 ? O : arguments[i];
                                if (isConcatSpreadable(E)) {
                                    len = toLength(E.length);
                                    if (n + len > MAX_SAFE_INTEGER)
                                        throw TypeError(
                                            MAXIMUM_ALLOWED_INDEX_EXCEEDED,
                                        );
                                    for (k = 0; k < len; k++, n++)
                                        if (k in E) createProperty(A, n, E[k]);
                                } else {
                                    if (n >= MAX_SAFE_INTEGER)
                                        throw TypeError(
                                            MAXIMUM_ALLOWED_INDEX_EXCEEDED,
                                        );
                                    createProperty(A, n++, E);
                                }
                            }
                            A.length = n;
                            return A;
                        },
                    },
                );
            },
            {
                "../internals/array-method-has-species-support": 52,
                "../internals/array-species-create": 54,
                "../internals/create-property": 70,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/is-array": 103,
                "../internals/is-object": 107,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
                "../internals/v8-version": 182,
                "../internals/well-known-symbol": 184,
            },
        ],
        191: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var copyWithin = require("../internals/array-copy-within");
                var addToUnscopables = require("../internals/add-to-unscopables");

                // `Array.prototype.copyWithin` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
                $(
                    { target: "Array", proto: true },
                    {
                        copyWithin: copyWithin,
                    },
                );

                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                addToUnscopables("copyWithin");
            },
            {
                "../internals/add-to-unscopables": 39,
                "../internals/array-copy-within": 45,
                "../internals/export": 79,
            },
        ],
        192: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $every = require("../internals/array-iteration").every;
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                // `Array.prototype.every` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.every
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: sloppyArrayMethod("every"),
                    },
                    {
                        every: function every(callbackfn /* , thisArg */) {
                            return $every(
                                this,
                                callbackfn,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/array-iteration": 50,
                "../internals/export": 79,
                "../internals/sloppy-array-method": 160,
            },
        ],
        193: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fill = require("../internals/array-fill");
                var addToUnscopables = require("../internals/add-to-unscopables");

                // `Array.prototype.fill` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.fill
                $(
                    { target: "Array", proto: true },
                    {
                        fill: fill,
                    },
                );

                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                addToUnscopables("fill");
            },
            {
                "../internals/add-to-unscopables": 39,
                "../internals/array-fill": 46,
                "../internals/export": 79,
            },
        ],
        194: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $filter = require("../internals/array-iteration").filter;
                var arrayMethodHasSpeciesSupport = require("../internals/array-method-has-species-support");

                // `Array.prototype.filter` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.filter
                // with adding support of @@species
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: !arrayMethodHasSpeciesSupport("filter"),
                    },
                    {
                        filter: function filter(callbackfn /* , thisArg */) {
                            return $filter(
                                this,
                                callbackfn,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/array-iteration": 50,
                "../internals/array-method-has-species-support": 52,
                "../internals/export": 79,
            },
        ],
        195: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $findIndex = require("../internals/array-iteration")
                    .findIndex;
                var addToUnscopables = require("../internals/add-to-unscopables");

                var FIND_INDEX = "findIndex";
                var SKIPS_HOLES = true;

                // Shouldn't skip holes
                if (FIND_INDEX in [])
                    Array(1)[FIND_INDEX](function() {
                        SKIPS_HOLES = false;
                    });

                // `Array.prototype.findIndex` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.findindex
                $(
                    { target: "Array", proto: true, forced: SKIPS_HOLES },
                    {
                        findIndex: function findIndex(
                            callbackfn /* , that = undefined */,
                        ) {
                            return $findIndex(
                                this,
                                callbackfn,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );

                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                addToUnscopables(FIND_INDEX);
            },
            {
                "../internals/add-to-unscopables": 39,
                "../internals/array-iteration": 50,
                "../internals/export": 79,
            },
        ],
        196: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $find = require("../internals/array-iteration").find;
                var addToUnscopables = require("../internals/add-to-unscopables");

                var FIND = "find";
                var SKIPS_HOLES = true;

                // Shouldn't skip holes
                if (FIND in [])
                    Array(1)[FIND](function() {
                        SKIPS_HOLES = false;
                    });

                // `Array.prototype.find` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.find
                $(
                    { target: "Array", proto: true, forced: SKIPS_HOLES },
                    {
                        find: function find(
                            callbackfn /* , that = undefined */,
                        ) {
                            return $find(
                                this,
                                callbackfn,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );

                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                addToUnscopables(FIND);
            },
            {
                "../internals/add-to-unscopables": 39,
                "../internals/array-iteration": 50,
                "../internals/export": 79,
            },
        ],
        197: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var flattenIntoArray = require("../internals/flatten-into-array");
                var toObject = require("../internals/to-object");
                var toLength = require("../internals/to-length");
                var aFunction = require("../internals/a-function");
                var arraySpeciesCreate = require("../internals/array-species-create");

                // `Array.prototype.flatMap` method
                // https://github.com/tc39/proposal-flatMap
                $(
                    { target: "Array", proto: true },
                    {
                        flatMap: function flatMap(callbackfn /* , thisArg */) {
                            var O = toObject(this);
                            var sourceLen = toLength(O.length);
                            var A;
                            aFunction(callbackfn);
                            A = arraySpeciesCreate(O, 0);
                            A.length = flattenIntoArray(
                                A,
                                O,
                                O,
                                sourceLen,
                                0,
                                1,
                                callbackfn,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                            return A;
                        },
                    },
                );
            },
            {
                "../internals/a-function": 37,
                "../internals/array-species-create": 54,
                "../internals/export": 79,
                "../internals/flatten-into-array": 82,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        198: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var flattenIntoArray = require("../internals/flatten-into-array");
                var toObject = require("../internals/to-object");
                var toLength = require("../internals/to-length");
                var toInteger = require("../internals/to-integer");
                var arraySpeciesCreate = require("../internals/array-species-create");

                // `Array.prototype.flat` method
                // https://github.com/tc39/proposal-flatMap
                $(
                    { target: "Array", proto: true },
                    {
                        flat: function flat(/* depthArg = 1 */) {
                            var depthArg = arguments.length
                                ? arguments[0]
                                : undefined;
                            var O = toObject(this);
                            var sourceLen = toLength(O.length);
                            var A = arraySpeciesCreate(O, 0);
                            A.length = flattenIntoArray(
                                A,
                                O,
                                O,
                                sourceLen,
                                0,
                                depthArg === undefined
                                    ? 1
                                    : toInteger(depthArg),
                            );
                            return A;
                        },
                    },
                );
            },
            {
                "../internals/array-species-create": 54,
                "../internals/export": 79,
                "../internals/flatten-into-array": 82,
                "../internals/to-integer": 171,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        199: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var forEach = require("../internals/array-for-each");

                // `Array.prototype.forEach` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: [].forEach != forEach,
                    },
                    {
                        forEach: forEach,
                    },
                );
            },
            { "../internals/array-for-each": 47, "../internals/export": 79 },
        ],
        200: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var from = require("../internals/array-from");
                var checkCorrectnessOfIteration = require("../internals/check-correctness-of-iteration");

                var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(
                    iterable,
                ) {
                    Array.from(iterable);
                });

                // `Array.from` method
                // https://tc39.github.io/ecma262/#sec-array.from
                $(
                    {
                        target: "Array",
                        stat: true,
                        forced: INCORRECT_ITERATION,
                    },
                    {
                        from: from,
                    },
                );
            },
            {
                "../internals/array-from": 48,
                "../internals/check-correctness-of-iteration": 57,
                "../internals/export": 79,
            },
        ],
        201: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $includes = require("../internals/array-includes").includes;
                var addToUnscopables = require("../internals/add-to-unscopables");

                // `Array.prototype.includes` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.includes
                $(
                    { target: "Array", proto: true },
                    {
                        includes: function includes(el /* , fromIndex = 0 */) {
                            return $includes(
                                this,
                                el,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );

                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                addToUnscopables("includes");
            },
            {
                "../internals/add-to-unscopables": 39,
                "../internals/array-includes": 49,
                "../internals/export": 79,
            },
        ],
        202: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $indexOf = require("../internals/array-includes").indexOf;
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                var nativeIndexOf = [].indexOf;

                var NEGATIVE_ZERO =
                    !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
                var SLOPPY_METHOD = sloppyArrayMethod("indexOf");

                // `Array.prototype.indexOf` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: NEGATIVE_ZERO || SLOPPY_METHOD,
                    },
                    {
                        indexOf: function indexOf(
                            searchElement /* , fromIndex = 0 */,
                        ) {
                            return NEGATIVE_ZERO
                                ? // convert -0 to +0
                                  nativeIndexOf.apply(this, arguments) || 0
                                : $indexOf(
                                      this,
                                      searchElement,
                                      arguments.length > 1
                                          ? arguments[1]
                                          : undefined,
                                  );
                        },
                    },
                );
            },
            {
                "../internals/array-includes": 49,
                "../internals/export": 79,
                "../internals/sloppy-array-method": 160,
            },
        ],
        203: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var isArray = require("../internals/is-array");

                // `Array.isArray` method
                // https://tc39.github.io/ecma262/#sec-array.isarray
                $(
                    { target: "Array", stat: true },
                    {
                        isArray: isArray,
                    },
                );
            },
            { "../internals/export": 79, "../internals/is-array": 103 },
        ],
        204: [
            function(require, module, exports) {
                "use strict";
                var toIndexedObject = require("../internals/to-indexed-object");
                var addToUnscopables = require("../internals/add-to-unscopables");
                var Iterators = require("../internals/iterators");
                var InternalStateModule = require("../internals/internal-state");
                var defineIterator = require("../internals/define-iterator");

                var ARRAY_ITERATOR = "Array Iterator";
                var setInternalState = InternalStateModule.set;
                var getInternalState = InternalStateModule.getterFor(
                    ARRAY_ITERATOR,
                );

                // `Array.prototype.entries` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.entries
                // `Array.prototype.keys` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.keys
                // `Array.prototype.values` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.values
                // `Array.prototype[@@iterator]` method
                // https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
                // `CreateArrayIterator` internal method
                // https://tc39.github.io/ecma262/#sec-createarrayiterator
                module.exports = defineIterator(
                    Array,
                    "Array",
                    function(iterated, kind) {
                        setInternalState(this, {
                            type: ARRAY_ITERATOR,
                            target: toIndexedObject(iterated), // target
                            index: 0, // next index
                            kind: kind, // kind
                        });
                        // `%ArrayIteratorPrototype%.next` method
                        // https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
                    },
                    function() {
                        var state = getInternalState(this);
                        var target = state.target;
                        var kind = state.kind;
                        var index = state.index++;
                        if (!target || index >= target.length) {
                            state.target = undefined;
                            return { value: undefined, done: true };
                        }
                        if (kind == "keys")
                            return { value: index, done: false };
                        if (kind == "values")
                            return { value: target[index], done: false };
                        return { value: [index, target[index]], done: false };
                    },
                    "values",
                );

                // argumentsList[@@iterator] is %ArrayProto_values%
                // https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
                // https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
                Iterators.Arguments = Iterators.Array;

                // https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
                addToUnscopables("keys");
                addToUnscopables("values");
                addToUnscopables("entries");
            },
            {
                "../internals/add-to-unscopables": 39,
                "../internals/define-iterator": 73,
                "../internals/internal-state": 101,
                "../internals/iterators": 112,
                "../internals/to-indexed-object": 170,
            },
        ],
        205: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var IndexedObject = require("../internals/indexed-object");
                var toIndexedObject = require("../internals/to-indexed-object");
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                var nativeJoin = [].join;

                var ES3_STRINGS = IndexedObject != Object;
                var SLOPPY_METHOD = sloppyArrayMethod("join", ",");

                // `Array.prototype.join` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.join
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: ES3_STRINGS || SLOPPY_METHOD,
                    },
                    {
                        join: function join(separator) {
                            return nativeJoin.call(
                                toIndexedObject(this),
                                separator === undefined ? "," : separator,
                            );
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/indexed-object": 98,
                "../internals/sloppy-array-method": 160,
                "../internals/to-indexed-object": 170,
            },
        ],
        206: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var lastIndexOf = require("../internals/array-last-index-of");

                // `Array.prototype.lastIndexOf` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: lastIndexOf !== [].lastIndexOf,
                    },
                    {
                        lastIndexOf: lastIndexOf,
                    },
                );
            },
            {
                "../internals/array-last-index-of": 51,
                "../internals/export": 79,
            },
        ],
        207: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $map = require("../internals/array-iteration").map;
                var arrayMethodHasSpeciesSupport = require("../internals/array-method-has-species-support");

                // `Array.prototype.map` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.map
                // with adding support of @@species
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: !arrayMethodHasSpeciesSupport("map"),
                    },
                    {
                        map: function map(callbackfn /* , thisArg */) {
                            return $map(
                                this,
                                callbackfn,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/array-iteration": 50,
                "../internals/array-method-has-species-support": 52,
                "../internals/export": 79,
            },
        ],
        208: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var createProperty = require("../internals/create-property");

                var ISNT_GENERIC = fails(function() {
                    function F() {
                        /* empty */
                    }
                    return !(Array.of.call(F) instanceof F);
                });

                // `Array.of` method
                // https://tc39.github.io/ecma262/#sec-array.of
                // WebKit Array.of isn't generic
                $(
                    { target: "Array", stat: true, forced: ISNT_GENERIC },
                    {
                        of: function of(/* ...args */) {
                            var index = 0;
                            var argumentsLength = arguments.length;
                            var result = new (typeof this == "function"
                                ? this
                                : Array)(argumentsLength);
                            while (argumentsLength > index)
                                createProperty(
                                    result,
                                    index,
                                    arguments[index++],
                                );
                            result.length = argumentsLength;
                            return result;
                        },
                    },
                );
            },
            {
                "../internals/create-property": 70,
                "../internals/export": 79,
                "../internals/fails": 80,
            },
        ],
        209: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $reduceRight = require("../internals/array-reduce").right;
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                // `Array.prototype.reduceRight` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: sloppyArrayMethod("reduceRight"),
                    },
                    {
                        reduceRight: function reduceRight(
                            callbackfn /* , initialValue */,
                        ) {
                            return $reduceRight(
                                this,
                                callbackfn,
                                arguments.length,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/array-reduce": 53,
                "../internals/export": 79,
                "../internals/sloppy-array-method": 160,
            },
        ],
        210: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $reduce = require("../internals/array-reduce").left;
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                // `Array.prototype.reduce` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: sloppyArrayMethod("reduce"),
                    },
                    {
                        reduce: function reduce(
                            callbackfn /* , initialValue */,
                        ) {
                            return $reduce(
                                this,
                                callbackfn,
                                arguments.length,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/array-reduce": 53,
                "../internals/export": 79,
                "../internals/sloppy-array-method": 160,
            },
        ],
        211: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var isArray = require("../internals/is-array");

                var nativeReverse = [].reverse;
                var test = [1, 2];

                // `Array.prototype.reverse` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.reverse
                // fix for Safari 12.0 bug
                // https://bugs.webkit.org/show_bug.cgi?id=188794
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: String(test) === String(test.reverse()),
                    },
                    {
                        reverse: function reverse() {
                            // eslint-disable-next-line no-self-assign
                            if (isArray(this)) this.length = this.length;
                            return nativeReverse.call(this);
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/is-array": 103 },
        ],
        212: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var isObject = require("../internals/is-object");
                var isArray = require("../internals/is-array");
                var toAbsoluteIndex = require("../internals/to-absolute-index");
                var toLength = require("../internals/to-length");
                var toIndexedObject = require("../internals/to-indexed-object");
                var createProperty = require("../internals/create-property");
                var arrayMethodHasSpeciesSupport = require("../internals/array-method-has-species-support");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var SPECIES = wellKnownSymbol("species");
                var nativeSlice = [].slice;
                var max = Math.max;

                // `Array.prototype.slice` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.slice
                // fallback for not array-like ES3 strings and DOM objects
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: !arrayMethodHasSpeciesSupport("slice"),
                    },
                    {
                        slice: function slice(start, end) {
                            var O = toIndexedObject(this);
                            var length = toLength(O.length);
                            var k = toAbsoluteIndex(start, length);
                            var fin = toAbsoluteIndex(
                                end === undefined ? length : end,
                                length,
                            );
                            // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
                            var Constructor, result, n;
                            if (isArray(O)) {
                                Constructor = O.constructor;
                                // cross-realm fallback
                                if (
                                    typeof Constructor == "function" &&
                                    (Constructor === Array ||
                                        isArray(Constructor.prototype))
                                ) {
                                    Constructor = undefined;
                                } else if (isObject(Constructor)) {
                                    Constructor = Constructor[SPECIES];
                                    if (Constructor === null)
                                        Constructor = undefined;
                                }
                                if (
                                    Constructor === Array ||
                                    Constructor === undefined
                                ) {
                                    return nativeSlice.call(O, k, fin);
                                }
                            }
                            result = new (Constructor === undefined
                                ? Array
                                : Constructor)(max(fin - k, 0));
                            for (n = 0; k < fin; k++, n++)
                                if (k in O) createProperty(result, n, O[k]);
                            result.length = n;
                            return result;
                        },
                    },
                );
            },
            {
                "../internals/array-method-has-species-support": 52,
                "../internals/create-property": 70,
                "../internals/export": 79,
                "../internals/is-array": 103,
                "../internals/is-object": 107,
                "../internals/to-absolute-index": 168,
                "../internals/to-indexed-object": 170,
                "../internals/to-length": 172,
                "../internals/well-known-symbol": 184,
            },
        ],
        213: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $some = require("../internals/array-iteration").some;
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                // `Array.prototype.some` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.some
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: sloppyArrayMethod("some"),
                    },
                    {
                        some: function some(callbackfn /* , thisArg */) {
                            return $some(
                                this,
                                callbackfn,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/array-iteration": 50,
                "../internals/export": 79,
                "../internals/sloppy-array-method": 160,
            },
        ],
        214: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var aFunction = require("../internals/a-function");
                var toObject = require("../internals/to-object");
                var fails = require("../internals/fails");
                var sloppyArrayMethod = require("../internals/sloppy-array-method");

                var test = [];
                var nativeSort = test.sort;

                // IE8-
                var FAILS_ON_UNDEFINED = fails(function() {
                    test.sort(undefined);
                });
                // V8 bug
                var FAILS_ON_NULL = fails(function() {
                    test.sort(null);
                });
                // Old WebKit
                var SLOPPY_METHOD = sloppyArrayMethod("sort");

                var FORCED =
                    FAILS_ON_UNDEFINED || !FAILS_ON_NULL || SLOPPY_METHOD;

                // `Array.prototype.sort` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.sort
                $(
                    { target: "Array", proto: true, forced: FORCED },
                    {
                        sort: function sort(comparefn) {
                            return comparefn === undefined
                                ? nativeSort.call(toObject(this))
                                : nativeSort.call(
                                      toObject(this),
                                      aFunction(comparefn),
                                  );
                        },
                    },
                );
            },
            {
                "../internals/a-function": 37,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/sloppy-array-method": 160,
                "../internals/to-object": 173,
            },
        ],
        215: [
            function(require, module, exports) {
                var setSpecies = require("../internals/set-species");

                // `Array[@@species]` getter
                // https://tc39.github.io/ecma262/#sec-get-array-@@species
                setSpecies("Array");
            },
            { "../internals/set-species": 155 },
        ],
        216: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var toAbsoluteIndex = require("../internals/to-absolute-index");
                var toInteger = require("../internals/to-integer");
                var toLength = require("../internals/to-length");
                var toObject = require("../internals/to-object");
                var arraySpeciesCreate = require("../internals/array-species-create");
                var createProperty = require("../internals/create-property");
                var arrayMethodHasSpeciesSupport = require("../internals/array-method-has-species-support");

                var max = Math.max;
                var min = Math.min;
                var MAX_SAFE_INTEGER = 0x1fffffffffffff;
                var MAXIMUM_ALLOWED_LENGTH_EXCEEDED =
                    "Maximum allowed length exceeded";

                // `Array.prototype.splice` method
                // https://tc39.github.io/ecma262/#sec-array.prototype.splice
                // with adding support of @@species
                $(
                    {
                        target: "Array",
                        proto: true,
                        forced: !arrayMethodHasSpeciesSupport("splice"),
                    },
                    {
                        splice: function splice(
                            start,
                            deleteCount /* , ...items */,
                        ) {
                            var O = toObject(this);
                            var len = toLength(O.length);
                            var actualStart = toAbsoluteIndex(start, len);
                            var argumentsLength = arguments.length;
                            var insertCount, actualDeleteCount, A, k, from, to;
                            if (argumentsLength === 0) {
                                insertCount = actualDeleteCount = 0;
                            } else if (argumentsLength === 1) {
                                insertCount = 0;
                                actualDeleteCount = len - actualStart;
                            } else {
                                insertCount = argumentsLength - 2;
                                actualDeleteCount = min(
                                    max(toInteger(deleteCount), 0),
                                    len - actualStart,
                                );
                            }
                            if (
                                len + insertCount - actualDeleteCount >
                                MAX_SAFE_INTEGER
                            ) {
                                throw TypeError(
                                    MAXIMUM_ALLOWED_LENGTH_EXCEEDED,
                                );
                            }
                            A = arraySpeciesCreate(O, actualDeleteCount);
                            for (k = 0; k < actualDeleteCount; k++) {
                                from = actualStart + k;
                                if (from in O) createProperty(A, k, O[from]);
                            }
                            A.length = actualDeleteCount;
                            if (insertCount < actualDeleteCount) {
                                for (
                                    k = actualStart;
                                    k < len - actualDeleteCount;
                                    k++
                                ) {
                                    from = k + actualDeleteCount;
                                    to = k + insertCount;
                                    if (from in O) O[to] = O[from];
                                    else delete O[to];
                                }
                                for (
                                    k = len;
                                    k > len - actualDeleteCount + insertCount;
                                    k--
                                )
                                    delete O[k - 1];
                            } else if (insertCount > actualDeleteCount) {
                                for (
                                    k = len - actualDeleteCount;
                                    k > actualStart;
                                    k--
                                ) {
                                    from = k + actualDeleteCount - 1;
                                    to = k + insertCount - 1;
                                    if (from in O) O[to] = O[from];
                                    else delete O[to];
                                }
                            }
                            for (k = 0; k < insertCount; k++) {
                                O[k + actualStart] = arguments[k + 2];
                            }
                            O.length = len - actualDeleteCount + insertCount;
                            return A;
                        },
                    },
                );
            },
            {
                "../internals/array-method-has-species-support": 52,
                "../internals/array-species-create": 54,
                "../internals/create-property": 70,
                "../internals/export": 79,
                "../internals/to-absolute-index": 168,
                "../internals/to-integer": 171,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        217: [
            function(require, module, exports) {
                // this method was added to unscopables after implementation
                // in popular engines, so it's moved to a separate module
                var addToUnscopables = require("../internals/add-to-unscopables");

                addToUnscopables("flatMap");
            },
            { "../internals/add-to-unscopables": 39 },
        ],
        218: [
            function(require, module, exports) {
                // this method was added to unscopables after implementation
                // in popular engines, so it's moved to a separate module
                var addToUnscopables = require("../internals/add-to-unscopables");

                addToUnscopables("flat");
            },
            { "../internals/add-to-unscopables": 39 },
        ],
        219: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var ArrayBufferModule = require("../internals/array-buffer");
                var NATIVE_ARRAY_BUFFER = require("../internals/array-buffer-view-core")
                    .NATIVE_ARRAY_BUFFER;

                // `DataView` constructor
                // https://tc39.github.io/ecma262/#sec-dataview-constructor
                $(
                    { global: true, forced: !NATIVE_ARRAY_BUFFER },
                    {
                        DataView: ArrayBufferModule.DataView,
                    },
                );
            },
            {
                "../internals/array-buffer": 44,
                "../internals/array-buffer-view-core": 43,
                "../internals/export": 79,
            },
        ],
        220: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                // `Date.now` method
                // https://tc39.github.io/ecma262/#sec-date.now
                $(
                    { target: "Date", stat: true },
                    {
                        now: function now() {
                            return new Date().getTime();
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        221: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var toISOString = require("../internals/date-to-iso-string");

                // `Date.prototype.toISOString` method
                // https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
                // PhantomJS / old WebKit has a broken implementations
                $(
                    {
                        target: "Date",
                        proto: true,
                        forced: Date.prototype.toISOString !== toISOString,
                    },
                    {
                        toISOString: toISOString,
                    },
                );
            },
            {
                "../internals/date-to-iso-string": 71,
                "../internals/export": 79,
            },
        ],
        222: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var toObject = require("../internals/to-object");
                var toPrimitive = require("../internals/to-primitive");

                var FORCED = fails(function() {
                    return (
                        new Date(NaN).toJSON() !== null ||
                        Date.prototype.toJSON.call({
                            toISOString: function() {
                                return 1;
                            },
                        }) !== 1
                    );
                });

                // `Date.prototype.toJSON` method
                // https://tc39.github.io/ecma262/#sec-date.prototype.tojson
                $(
                    { target: "Date", proto: true, forced: FORCED },
                    {
                        // eslint-disable-next-line no-unused-vars
                        toJSON: function toJSON(key) {
                            var O = toObject(this);
                            var pv = toPrimitive(O);
                            return typeof pv == "number" && !isFinite(pv)
                                ? null
                                : O.toISOString();
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/to-object": 173,
                "../internals/to-primitive": 176,
            },
        ],
        223: [
            function(require, module, exports) {
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var dateToPrimitive = require("../internals/date-to-primitive");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
                var DatePrototype = Date.prototype;

                // `Date.prototype[@@toPrimitive]` method
                // https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive
                if (!(TO_PRIMITIVE in DatePrototype)) {
                    createNonEnumerableProperty(
                        DatePrototype,
                        TO_PRIMITIVE,
                        dateToPrimitive,
                    );
                }
            },
            {
                "../internals/create-non-enumerable-property": 68,
                "../internals/date-to-primitive": 72,
                "../internals/well-known-symbol": 184,
            },
        ],
        224: [
            function(require, module, exports) {
                var redefine = require("../internals/redefine");

                var DatePrototype = Date.prototype;
                var INVALID_DATE = "Invalid Date";
                var TO_STRING = "toString";
                var nativeDateToString = DatePrototype[TO_STRING];
                var getTime = DatePrototype.getTime;

                // `Date.prototype.toString` method
                // https://tc39.github.io/ecma262/#sec-date.prototype.tostring
                if (new Date(NaN) + "" != INVALID_DATE) {
                    redefine(DatePrototype, TO_STRING, function toString() {
                        var value = getTime.call(this);
                        // eslint-disable-next-line no-self-compare
                        return value === value
                            ? nativeDateToString.call(this)
                            : INVALID_DATE;
                    });
                }
            },
            { "../internals/redefine": 148 },
        ],
        225: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var bind = require("../internals/function-bind");

                // `Function.prototype.bind` method
                // https://tc39.github.io/ecma262/#sec-function.prototype.bind
                $(
                    { target: "Function", proto: true },
                    {
                        bind: bind,
                    },
                );
            },
            { "../internals/export": 79, "../internals/function-bind": 87 },
        ],
        226: [
            function(require, module, exports) {
                "use strict";
                var isObject = require("../internals/is-object");
                var definePropertyModule = require("../internals/object-define-property");
                var getPrototypeOf = require("../internals/object-get-prototype-of");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var HAS_INSTANCE = wellKnownSymbol("hasInstance");
                var FunctionPrototype = Function.prototype;

                // `Function.prototype[@@hasInstance]` method
                // https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance
                if (!(HAS_INSTANCE in FunctionPrototype)) {
                    definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, {
                        value: function(O) {
                            if (typeof this != "function" || !isObject(O))
                                return false;
                            if (!isObject(this.prototype))
                                return O instanceof this;
                            // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
                            while ((O = getPrototypeOf(O)))
                                if (this.prototype === O) return true;
                            return false;
                        },
                    });
                }
            },
            {
                "../internals/is-object": 107,
                "../internals/object-define-property": 128,
                "../internals/object-get-prototype-of": 133,
                "../internals/well-known-symbol": 184,
            },
        ],
        227: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var defineProperty = require("../internals/object-define-property")
                    .f;

                var FunctionPrototype = Function.prototype;
                var FunctionPrototypeToString = FunctionPrototype.toString;
                var nameRE = /^\s*function ([^ (]*)/;
                var NAME = "name";

                // Function instances `.name` property
                // https://tc39.github.io/ecma262/#sec-function-instances-name
                if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
                    defineProperty(FunctionPrototype, NAME, {
                        configurable: true,
                        get: function() {
                            try {
                                return FunctionPrototypeToString.call(
                                    this,
                                ).match(nameRE)[1];
                            } catch (error) {
                                return "";
                            }
                        },
                    });
                }
            },
            {
                "../internals/descriptors": 75,
                "../internals/object-define-property": 128,
            },
        ],
        228: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var global = require("../internals/global");

                // `globalThis` object
                // https://github.com/tc39/proposal-global
                $(
                    { global: true },
                    {
                        globalThis: global,
                    },
                );
            },
            { "../internals/export": 79, "../internals/global": 92 },
        ],
        229: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var setToStringTag = require("../internals/set-to-string-tag");

                // JSON[@@toStringTag] property
                // https://tc39.github.io/ecma262/#sec-json-@@tostringtag
                setToStringTag(global.JSON, "JSON", true);
            },
            {
                "../internals/global": 92,
                "../internals/set-to-string-tag": 156,
            },
        ],
        230: [
            function(require, module, exports) {
                "use strict";
                var collection = require("../internals/collection");
                var collectionStrong = require("../internals/collection-strong");

                // `Map` constructor
                // https://tc39.github.io/ecma262/#sec-map-objects
                module.exports = collection(
                    "Map",
                    function(get) {
                        return function Map() {
                            return get(
                                this,
                                arguments.length ? arguments[0] : undefined,
                            );
                        };
                    },
                    collectionStrong,
                    true,
                );
            },
            {
                "../internals/collection": 62,
                "../internals/collection-strong": 60,
            },
        ],
        231: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var log1p = require("../internals/math-log1p");

                var nativeAcosh = Math.acosh;
                var log = Math.log;
                var sqrt = Math.sqrt;
                var LN2 = Math.LN2;

                var FORCED =
                    !nativeAcosh ||
                    // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
                    Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710 ||
                    // Tor Browser bug: Math.acosh(Infinity) -> NaN
                    nativeAcosh(Infinity) != Infinity;

                // `Math.acosh` method
                // https://tc39.github.io/ecma262/#sec-math.acosh
                $(
                    { target: "Math", stat: true, forced: FORCED },
                    {
                        acosh: function acosh(x) {
                            return (x = +x) < 1
                                ? NaN
                                : x > 94906265.62425156
                                ? log(x) + LN2
                                : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/math-log1p": 115 },
        ],
        232: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                var nativeAsinh = Math.asinh;
                var log = Math.log;
                var sqrt = Math.sqrt;

                function asinh(x) {
                    return !isFinite((x = +x)) || x == 0
                        ? x
                        : x < 0
                        ? -asinh(-x)
                        : log(x + sqrt(x * x + 1));
                }

                // `Math.asinh` method
                // https://tc39.github.io/ecma262/#sec-math.asinh
                // Tor Browser bug: Math.asinh(0) -> -0
                $(
                    {
                        target: "Math",
                        stat: true,
                        forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0),
                    },
                    {
                        asinh: asinh,
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        233: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                var nativeAtanh = Math.atanh;
                var log = Math.log;

                // `Math.atanh` method
                // https://tc39.github.io/ecma262/#sec-math.atanh
                // Tor Browser bug: Math.atanh(-0) -> 0
                $(
                    {
                        target: "Math",
                        stat: true,
                        forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0),
                    },
                    {
                        atanh: function atanh(x) {
                            return (x = +x) == 0
                                ? x
                                : log((1 + x) / (1 - x)) / 2;
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        234: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var sign = require("../internals/math-sign");

                var abs = Math.abs;
                var pow = Math.pow;

                // `Math.cbrt` method
                // https://tc39.github.io/ecma262/#sec-math.cbrt
                $(
                    { target: "Math", stat: true },
                    {
                        cbrt: function cbrt(x) {
                            return sign((x = +x)) * pow(abs(x), 1 / 3);
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/math-sign": 116 },
        ],
        235: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                var floor = Math.floor;
                var log = Math.log;
                var LOG2E = Math.LOG2E;

                // `Math.clz32` method
                // https://tc39.github.io/ecma262/#sec-math.clz32
                $(
                    { target: "Math", stat: true },
                    {
                        clz32: function clz32(x) {
                            return (x >>>= 0)
                                ? 31 - floor(log(x + 0.5) * LOG2E)
                                : 32;
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        236: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var expm1 = require("../internals/math-expm1");

                var nativeCosh = Math.cosh;
                var abs = Math.abs;
                var E = Math.E;

                // `Math.cosh` method
                // https://tc39.github.io/ecma262/#sec-math.cosh
                $(
                    {
                        target: "Math",
                        stat: true,
                        forced: !nativeCosh || nativeCosh(710) === Infinity,
                    },
                    {
                        cosh: function cosh(x) {
                            var t = expm1(abs(x) - 1) + 1;
                            return (t + 1 / (t * E * E)) * (E / 2);
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/math-expm1": 113 },
        ],
        237: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var expm1 = require("../internals/math-expm1");

                // `Math.expm1` method
                // https://tc39.github.io/ecma262/#sec-math.expm1
                $(
                    { target: "Math", stat: true, forced: expm1 != Math.expm1 },
                    { expm1: expm1 },
                );
            },
            { "../internals/export": 79, "../internals/math-expm1": 113 },
        ],
        238: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fround = require("../internals/math-fround");

                // `Math.fround` method
                // https://tc39.github.io/ecma262/#sec-math.fround
                $({ target: "Math", stat: true }, { fround: fround });
            },
            { "../internals/export": 79, "../internals/math-fround": 114 },
        ],
        239: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                var $hypot = Math.hypot;
                var abs = Math.abs;
                var sqrt = Math.sqrt;

                // Chrome 77 bug
                // https://bugs.chromium.org/p/v8/issues/detail?id=9546
                var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

                // `Math.hypot` method
                // https://tc39.github.io/ecma262/#sec-math.hypot
                $(
                    { target: "Math", stat: true, forced: BUGGY },
                    {
                        hypot: function hypot(value1, value2) {
                            // eslint-disable-line no-unused-vars
                            var sum = 0;
                            var i = 0;
                            var aLen = arguments.length;
                            var larg = 0;
                            var arg, div;
                            while (i < aLen) {
                                arg = abs(arguments[i++]);
                                if (larg < arg) {
                                    div = larg / arg;
                                    sum = sum * div * div + 1;
                                    larg = arg;
                                } else if (arg > 0) {
                                    div = arg / larg;
                                    sum += div * div;
                                } else sum += arg;
                            }
                            return larg === Infinity
                                ? Infinity
                                : larg * sqrt(sum);
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        240: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fails = require("../internals/fails");

                var nativeImul = Math.imul;

                var FORCED = fails(function() {
                    return (
                        nativeImul(0xffffffff, 5) != -5 ||
                        nativeImul.length != 2
                    );
                });

                // `Math.imul` method
                // https://tc39.github.io/ecma262/#sec-math.imul
                // some WebKit versions fails with big numbers, some has wrong arity
                $(
                    { target: "Math", stat: true, forced: FORCED },
                    {
                        imul: function imul(x, y) {
                            var UINT16 = 0xffff;
                            var xn = +x;
                            var yn = +y;
                            var xl = UINT16 & xn;
                            var yl = UINT16 & yn;
                            return (
                                0 |
                                (xl * yl +
                                    ((((UINT16 & (xn >>> 16)) * yl +
                                        xl * (UINT16 & (yn >>> 16))) <<
                                        16) >>>
                                        0))
                            );
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/fails": 80 },
        ],
        241: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                var log = Math.log;
                var LOG10E = Math.LOG10E;

                // `Math.log10` method
                // https://tc39.github.io/ecma262/#sec-math.log10
                $(
                    { target: "Math", stat: true },
                    {
                        log10: function log10(x) {
                            return log(x) * LOG10E;
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        242: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var log1p = require("../internals/math-log1p");

                // `Math.log1p` method
                // https://tc39.github.io/ecma262/#sec-math.log1p
                $({ target: "Math", stat: true }, { log1p: log1p });
            },
            { "../internals/export": 79, "../internals/math-log1p": 115 },
        ],
        243: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                var log = Math.log;
                var LN2 = Math.LN2;

                // `Math.log2` method
                // https://tc39.github.io/ecma262/#sec-math.log2
                $(
                    { target: "Math", stat: true },
                    {
                        log2: function log2(x) {
                            return log(x) / LN2;
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        244: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var sign = require("../internals/math-sign");

                // `Math.sign` method
                // https://tc39.github.io/ecma262/#sec-math.sign
                $(
                    { target: "Math", stat: true },
                    {
                        sign: sign,
                    },
                );
            },
            { "../internals/export": 79, "../internals/math-sign": 116 },
        ],
        245: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var expm1 = require("../internals/math-expm1");

                var abs = Math.abs;
                var exp = Math.exp;
                var E = Math.E;

                var FORCED = fails(function() {
                    return Math.sinh(-2e-17) != -2e-17;
                });

                // `Math.sinh` method
                // https://tc39.github.io/ecma262/#sec-math.sinh
                // V8 near Chromium 38 has a problem with very small numbers
                $(
                    { target: "Math", stat: true, forced: FORCED },
                    {
                        sinh: function sinh(x) {
                            return abs((x = +x)) < 1
                                ? (expm1(x) - expm1(-x)) / 2
                                : (exp(x - 1) - exp(-x - 1)) * (E / 2);
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/math-expm1": 113,
            },
        ],
        246: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var expm1 = require("../internals/math-expm1");

                var exp = Math.exp;

                // `Math.tanh` method
                // https://tc39.github.io/ecma262/#sec-math.tanh
                $(
                    { target: "Math", stat: true },
                    {
                        tanh: function tanh(x) {
                            var a = expm1((x = +x));
                            var b = expm1(-x);
                            return a == Infinity
                                ? 1
                                : b == Infinity
                                ? -1
                                : (a - b) / (exp(x) + exp(-x));
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/math-expm1": 113 },
        ],
        247: [
            function(require, module, exports) {
                var setToStringTag = require("../internals/set-to-string-tag");

                // Math[@@toStringTag] property
                // https://tc39.github.io/ecma262/#sec-math-@@tostringtag
                setToStringTag(Math, "Math", true);
            },
            { "../internals/set-to-string-tag": 156 },
        ],
        248: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                var ceil = Math.ceil;
                var floor = Math.floor;

                // `Math.trunc` method
                // https://tc39.github.io/ecma262/#sec-math.trunc
                $(
                    { target: "Math", stat: true },
                    {
                        trunc: function trunc(it) {
                            return (it > 0 ? floor : ceil)(it);
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        249: [
            function(require, module, exports) {
                "use strict";
                var DESCRIPTORS = require("../internals/descriptors");
                var global = require("../internals/global");
                var isForced = require("../internals/is-forced");
                var redefine = require("../internals/redefine");
                var has = require("../internals/has");
                var classof = require("../internals/classof-raw");
                var inheritIfRequired = require("../internals/inherit-if-required");
                var toPrimitive = require("../internals/to-primitive");
                var fails = require("../internals/fails");
                var create = require("../internals/object-create");
                var getOwnPropertyNames = require("../internals/object-get-own-property-names")
                    .f;
                var getOwnPropertyDescriptor = require("../internals/object-get-own-property-descriptor")
                    .f;
                var defineProperty = require("../internals/object-define-property")
                    .f;
                var trim = require("../internals/string-trim").trim;

                var NUMBER = "Number";
                var NativeNumber = global[NUMBER];
                var NumberPrototype = NativeNumber.prototype;

                // Opera ~12 has broken Object#toString
                var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

                // `ToNumber` abstract operation
                // https://tc39.github.io/ecma262/#sec-tonumber
                var toNumber = function(argument) {
                    var it = toPrimitive(argument, false);
                    var first,
                        third,
                        radix,
                        maxCode,
                        digits,
                        length,
                        index,
                        code;
                    if (typeof it == "string" && it.length > 2) {
                        it = trim(it);
                        first = it.charCodeAt(0);
                        if (first === 43 || first === 45) {
                            third = it.charCodeAt(2);
                            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
                        } else if (first === 48) {
                            switch (it.charCodeAt(1)) {
                                case 66:
                                case 98:
                                    radix = 2;
                                    maxCode = 49;
                                    break; // fast equal of /^0b[01]+$/i
                                case 79:
                                case 111:
                                    radix = 8;
                                    maxCode = 55;
                                    break; // fast equal of /^0o[0-7]+$/i
                                default:
                                    return +it;
                            }
                            digits = it.slice(2);
                            length = digits.length;
                            for (index = 0; index < length; index++) {
                                code = digits.charCodeAt(index);
                                // parseInt parses a string to a first unavailable symbol
                                // but ToNumber should return NaN if a string contains unavailable symbols
                                if (code < 48 || code > maxCode) return NaN;
                            }
                            return parseInt(digits, radix);
                        }
                    }
                    return +it;
                };

                // `Number` constructor
                // https://tc39.github.io/ecma262/#sec-number-constructor
                if (
                    isForced(
                        NUMBER,
                        !NativeNumber(" 0o1") ||
                            !NativeNumber("0b1") ||
                            NativeNumber("+0x1"),
                    )
                ) {
                    var NumberWrapper = function Number(value) {
                        var it = arguments.length < 1 ? 0 : value;
                        var dummy = this;
                        return dummy instanceof NumberWrapper &&
                            // check on 1..constructor(foo) case
                            (BROKEN_CLASSOF
                                ? fails(function() {
                                      NumberPrototype.valueOf.call(dummy);
                                  })
                                : classof(dummy) != NUMBER)
                            ? inheritIfRequired(
                                  new NativeNumber(toNumber(it)),
                                  dummy,
                                  NumberWrapper,
                              )
                            : toNumber(it);
                    };
                    for (
                        var keys = DESCRIPTORS
                                ? getOwnPropertyNames(NativeNumber)
                                : // ES3:
                                  (
                                      "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY," +
                                      // ES2015 (in case, if modules with ES2015 Number statics required before):
                                      "EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER," +
                                      "MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger"
                                  ).split(","),
                            j = 0,
                            key;
                        keys.length > j;
                        j++
                    ) {
                        if (
                            has(NativeNumber, (key = keys[j])) &&
                            !has(NumberWrapper, key)
                        ) {
                            defineProperty(
                                NumberWrapper,
                                key,
                                getOwnPropertyDescriptor(NativeNumber, key),
                            );
                        }
                    }
                    NumberWrapper.prototype = NumberPrototype;
                    NumberPrototype.constructor = NumberWrapper;
                    redefine(global, NUMBER, NumberWrapper);
                }
            },
            {
                "../internals/classof-raw": 58,
                "../internals/descriptors": 75,
                "../internals/fails": 80,
                "../internals/global": 92,
                "../internals/has": 93,
                "../internals/inherit-if-required": 99,
                "../internals/is-forced": 104,
                "../internals/object-create": 126,
                "../internals/object-define-property": 128,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/object-get-own-property-names": 131,
                "../internals/redefine": 148,
                "../internals/string-trim": 165,
                "../internals/to-primitive": 176,
            },
        ],
        250: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                // `Number.EPSILON` constant
                // https://tc39.github.io/ecma262/#sec-number.epsilon
                $(
                    { target: "Number", stat: true },
                    {
                        EPSILON: Math.pow(2, -52),
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        251: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var numberIsFinite = require("../internals/number-is-finite");

                // `Number.isFinite` method
                // https://tc39.github.io/ecma262/#sec-number.isfinite
                $(
                    { target: "Number", stat: true },
                    { isFinite: numberIsFinite },
                );
            },
            { "../internals/export": 79, "../internals/number-is-finite": 124 },
        ],
        252: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var isInteger = require("../internals/is-integer");

                // `Number.isInteger` method
                // https://tc39.github.io/ecma262/#sec-number.isinteger
                $(
                    { target: "Number", stat: true },
                    {
                        isInteger: isInteger,
                    },
                );
            },
            { "../internals/export": 79, "../internals/is-integer": 105 },
        ],
        253: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                // `Number.isNaN` method
                // https://tc39.github.io/ecma262/#sec-number.isnan
                $(
                    { target: "Number", stat: true },
                    {
                        isNaN: function isNaN(number) {
                            // eslint-disable-next-line no-self-compare
                            return number != number;
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        254: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var isInteger = require("../internals/is-integer");

                var abs = Math.abs;

                // `Number.isSafeInteger` method
                // https://tc39.github.io/ecma262/#sec-number.issafeinteger
                $(
                    { target: "Number", stat: true },
                    {
                        isSafeInteger: function isSafeInteger(number) {
                            return (
                                isInteger(number) &&
                                abs(number) <= 0x1fffffffffffff
                            );
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/is-integer": 105 },
        ],
        255: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                // `Number.MAX_SAFE_INTEGER` constant
                // https://tc39.github.io/ecma262/#sec-number.max_safe_integer
                $(
                    { target: "Number", stat: true },
                    {
                        MAX_SAFE_INTEGER: 0x1fffffffffffff,
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        256: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                // `Number.MIN_SAFE_INTEGER` constant
                // https://tc39.github.io/ecma262/#sec-number.min_safe_integer
                $(
                    { target: "Number", stat: true },
                    {
                        MIN_SAFE_INTEGER: -0x1fffffffffffff,
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        257: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var parseFloat = require("../internals/parse-float");

                // `Number.parseFloat` method
                // https://tc39.github.io/ecma262/#sec-number.parseFloat
                $(
                    {
                        target: "Number",
                        stat: true,
                        forced: Number.parseFloat != parseFloat,
                    },
                    {
                        parseFloat: parseFloat,
                    },
                );
            },
            { "../internals/export": 79, "../internals/parse-float": 141 },
        ],
        258: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var parseInt = require("../internals/parse-int");

                // `Number.parseInt` method
                // https://tc39.github.io/ecma262/#sec-number.parseint
                $(
                    {
                        target: "Number",
                        stat: true,
                        forced: Number.parseInt != parseInt,
                    },
                    {
                        parseInt: parseInt,
                    },
                );
            },
            { "../internals/export": 79, "../internals/parse-int": 142 },
        ],
        259: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var toInteger = require("../internals/to-integer");
                var thisNumberValue = require("../internals/this-number-value");
                var repeat = require("../internals/string-repeat");
                var fails = require("../internals/fails");

                var nativeToFixed = (1.0).toFixed;
                var floor = Math.floor;

                var pow = function(x, n, acc) {
                    return n === 0
                        ? acc
                        : n % 2 === 1
                        ? pow(x, n - 1, acc * x)
                        : pow(x * x, n / 2, acc);
                };

                var log = function(x) {
                    var n = 0;
                    var x2 = x;
                    while (x2 >= 4096) {
                        n += 12;
                        x2 /= 4096;
                    }
                    while (x2 >= 2) {
                        n += 1;
                        x2 /= 2;
                    }
                    return n;
                };

                var FORCED =
                    (nativeToFixed &&
                        ((0.00008).toFixed(3) !== "0.000" ||
                            (0.9).toFixed(0) !== "1" ||
                            (1.255).toFixed(2) !== "1.25" ||
                            (1000000000000000128.0).toFixed(0) !==
                                "1000000000000000128")) ||
                    !fails(function() {
                        // V8 ~ Android 4.3-
                        nativeToFixed.call({});
                    });

                // `Number.prototype.toFixed` method
                // https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
                $(
                    { target: "Number", proto: true, forced: FORCED },
                    {
                        // eslint-disable-next-line max-statements
                        toFixed: function toFixed(fractionDigits) {
                            var number = thisNumberValue(this);
                            var fractDigits = toInteger(fractionDigits);
                            var data = [0, 0, 0, 0, 0, 0];
                            var sign = "";
                            var result = "0";
                            var e, z, j, k;

                            var multiply = function(n, c) {
                                var index = -1;
                                var c2 = c;
                                while (++index < 6) {
                                    c2 += n * data[index];
                                    data[index] = c2 % 1e7;
                                    c2 = floor(c2 / 1e7);
                                }
                            };

                            var divide = function(n) {
                                var index = 6;
                                var c = 0;
                                while (--index >= 0) {
                                    c += data[index];
                                    data[index] = floor(c / n);
                                    c = (c % n) * 1e7;
                                }
                            };

                            var dataToString = function() {
                                var index = 6;
                                var s = "";
                                while (--index >= 0) {
                                    if (
                                        s !== "" ||
                                        index === 0 ||
                                        data[index] !== 0
                                    ) {
                                        var t = String(data[index]);
                                        s =
                                            s === ""
                                                ? t
                                                : s +
                                                  repeat.call(
                                                      "0",
                                                      7 - t.length,
                                                  ) +
                                                  t;
                                    }
                                }
                                return s;
                            };

                            if (fractDigits < 0 || fractDigits > 20)
                                throw RangeError("Incorrect fraction digits");
                            // eslint-disable-next-line no-self-compare
                            if (number != number) return "NaN";
                            if (number <= -1e21 || number >= 1e21)
                                return String(number);
                            if (number < 0) {
                                sign = "-";
                                number = -number;
                            }
                            if (number > 1e-21) {
                                e = log(number * pow(2, 69, 1)) - 69;
                                z =
                                    e < 0
                                        ? number * pow(2, -e, 1)
                                        : number / pow(2, e, 1);
                                z *= 0x10000000000000;
                                e = 52 - e;
                                if (e > 0) {
                                    multiply(0, z);
                                    j = fractDigits;
                                    while (j >= 7) {
                                        multiply(1e7, 0);
                                        j -= 7;
                                    }
                                    multiply(pow(10, j, 1), 0);
                                    j = e - 1;
                                    while (j >= 23) {
                                        divide(1 << 23);
                                        j -= 23;
                                    }
                                    divide(1 << j);
                                    multiply(1, 1);
                                    divide(2);
                                    result = dataToString();
                                } else {
                                    multiply(0, z);
                                    multiply(1 << -e, 0);
                                    result =
                                        dataToString() +
                                        repeat.call("0", fractDigits);
                                }
                            }
                            if (fractDigits > 0) {
                                k = result.length;
                                result =
                                    sign +
                                    (k <= fractDigits
                                        ? "0." +
                                          repeat.call("0", fractDigits - k) +
                                          result
                                        : result.slice(0, k - fractDigits) +
                                          "." +
                                          result.slice(k - fractDigits));
                            } else {
                                result = sign + result;
                            }
                            return result;
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/string-repeat": 164,
                "../internals/this-number-value": 167,
                "../internals/to-integer": 171,
            },
        ],
        260: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var thisNumberValue = require("../internals/this-number-value");

                var nativeToPrecision = (1.0).toPrecision;

                var FORCED =
                    fails(function() {
                        // IE7-
                        return nativeToPrecision.call(1, undefined) !== "1";
                    }) ||
                    !fails(function() {
                        // V8 ~ Android 4.3-
                        nativeToPrecision.call({});
                    });

                // `Number.prototype.toPrecision` method
                // https://tc39.github.io/ecma262/#sec-number.prototype.toprecision
                $(
                    { target: "Number", proto: true, forced: FORCED },
                    {
                        toPrecision: function toPrecision(precision) {
                            return precision === undefined
                                ? nativeToPrecision.call(thisNumberValue(this))
                                : nativeToPrecision.call(
                                      thisNumberValue(this),
                                      precision,
                                  );
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/this-number-value": 167,
            },
        ],
        261: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var assign = require("../internals/object-assign");

                // `Object.assign` method
                // https://tc39.github.io/ecma262/#sec-object.assign
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: Object.assign !== assign,
                    },
                    {
                        assign: assign,
                    },
                );
            },
            { "../internals/export": 79, "../internals/object-assign": 125 },
        ],
        262: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var create = require("../internals/object-create");

                // `Object.create` method
                // https://tc39.github.io/ecma262/#sec-object.create
                $(
                    { target: "Object", stat: true, sham: !DESCRIPTORS },
                    {
                        create: create,
                    },
                );
            },
            {
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/object-create": 126,
            },
        ],
        263: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var FORCED = require("../internals/forced-object-prototype-accessors-methods");
                var toObject = require("../internals/to-object");
                var aFunction = require("../internals/a-function");
                var definePropertyModule = require("../internals/object-define-property");

                // `Object.prototype.__defineGetter__` method
                // https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__
                if (DESCRIPTORS) {
                    $(
                        { target: "Object", proto: true, forced: FORCED },
                        {
                            __defineGetter__: function __defineGetter__(
                                P,
                                getter,
                            ) {
                                definePropertyModule.f(toObject(this), P, {
                                    get: aFunction(getter),
                                    enumerable: true,
                                    configurable: true,
                                });
                            },
                        },
                    );
                }
            },
            {
                "../internals/a-function": 37,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/forced-object-prototype-accessors-methods": 83,
                "../internals/object-define-property": 128,
                "../internals/to-object": 173,
            },
        ],
        264: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var defineProperties = require("../internals/object-define-properties");

                // `Object.defineProperties` method
                // https://tc39.github.io/ecma262/#sec-object.defineproperties
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: !DESCRIPTORS,
                        sham: !DESCRIPTORS,
                    },
                    {
                        defineProperties: defineProperties,
                    },
                );
            },
            {
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/object-define-properties": 127,
            },
        ],
        265: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var objectDefinePropertyModile = require("../internals/object-define-property");

                // `Object.defineProperty` method
                // https://tc39.github.io/ecma262/#sec-object.defineproperty
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: !DESCRIPTORS,
                        sham: !DESCRIPTORS,
                    },
                    {
                        defineProperty: objectDefinePropertyModile.f,
                    },
                );
            },
            {
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/object-define-property": 128,
            },
        ],
        266: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var FORCED = require("../internals/forced-object-prototype-accessors-methods");
                var toObject = require("../internals/to-object");
                var aFunction = require("../internals/a-function");
                var definePropertyModule = require("../internals/object-define-property");

                // `Object.prototype.__defineSetter__` method
                // https://tc39.github.io/ecma262/#sec-object.prototype.__defineSetter__
                if (DESCRIPTORS) {
                    $(
                        { target: "Object", proto: true, forced: FORCED },
                        {
                            __defineSetter__: function __defineSetter__(
                                P,
                                setter,
                            ) {
                                definePropertyModule.f(toObject(this), P, {
                                    set: aFunction(setter),
                                    enumerable: true,
                                    configurable: true,
                                });
                            },
                        },
                    );
                }
            },
            {
                "../internals/a-function": 37,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/forced-object-prototype-accessors-methods": 83,
                "../internals/object-define-property": 128,
                "../internals/to-object": 173,
            },
        ],
        267: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var $entries = require("../internals/object-to-array").entries;

                // `Object.entries` method
                // https://tc39.github.io/ecma262/#sec-object.entries
                $(
                    { target: "Object", stat: true },
                    {
                        entries: function entries(O) {
                            return $entries(O);
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/object-to-array": 138 },
        ],
        268: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var FREEZING = require("../internals/freezing");
                var fails = require("../internals/fails");
                var isObject = require("../internals/is-object");
                var onFreeze = require("../internals/internal-metadata")
                    .onFreeze;

                var nativeFreeze = Object.freeze;
                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeFreeze(1);
                });

                // `Object.freeze` method
                // https://tc39.github.io/ecma262/#sec-object.freeze
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                        sham: !FREEZING,
                    },
                    {
                        freeze: function freeze(it) {
                            return nativeFreeze && isObject(it)
                                ? nativeFreeze(onFreeze(it))
                                : it;
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/freezing": 86,
                "../internals/internal-metadata": 100,
                "../internals/is-object": 107,
            },
        ],
        269: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var iterate = require("../internals/iterate");
                var createProperty = require("../internals/create-property");

                // `Object.fromEntries` method
                // https://github.com/tc39/proposal-object-from-entries
                $(
                    { target: "Object", stat: true },
                    {
                        fromEntries: function fromEntries(iterable) {
                            var obj = {};
                            iterate(
                                iterable,
                                function(k, v) {
                                    createProperty(obj, k, v);
                                },
                                undefined,
                                true,
                            );
                            return obj;
                        },
                    },
                );
            },
            {
                "../internals/create-property": 70,
                "../internals/export": 79,
                "../internals/iterate": 110,
            },
        ],
        270: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var toIndexedObject = require("../internals/to-indexed-object");
                var nativeGetOwnPropertyDescriptor = require("../internals/object-get-own-property-descriptor")
                    .f;
                var DESCRIPTORS = require("../internals/descriptors");

                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeGetOwnPropertyDescriptor(1);
                });
                var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

                // `Object.getOwnPropertyDescriptor` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FORCED,
                        sham: !DESCRIPTORS,
                    },
                    {
                        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(
                            it,
                            key,
                        ) {
                            return nativeGetOwnPropertyDescriptor(
                                toIndexedObject(it),
                                key,
                            );
                        },
                    },
                );
            },
            {
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/to-indexed-object": 170,
            },
        ],
        271: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var ownKeys = require("../internals/own-keys");
                var toIndexedObject = require("../internals/to-indexed-object");
                var getOwnPropertyDescriptorModule = require("../internals/object-get-own-property-descriptor");
                var createProperty = require("../internals/create-property");

                // `Object.getOwnPropertyDescriptors` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
                $(
                    { target: "Object", stat: true, sham: !DESCRIPTORS },
                    {
                        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(
                            object,
                        ) {
                            var O = toIndexedObject(object);
                            var getOwnPropertyDescriptor =
                                getOwnPropertyDescriptorModule.f;
                            var keys = ownKeys(O);
                            var result = {};
                            var index = 0;
                            var key, descriptor;
                            while (keys.length > index) {
                                descriptor = getOwnPropertyDescriptor(
                                    O,
                                    (key = keys[index++]),
                                );
                                if (descriptor !== undefined)
                                    createProperty(result, key, descriptor);
                            }
                            return result;
                        },
                    },
                );
            },
            {
                "../internals/create-property": 70,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/own-keys": 140,
                "../internals/to-indexed-object": 170,
            },
        ],
        272: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var nativeGetOwnPropertyNames = require("../internals/object-get-own-property-names-external")
                    .f;

                var FAILS_ON_PRIMITIVES = fails(function() {
                    return !Object.getOwnPropertyNames(1);
                });

                // `Object.getOwnPropertyNames` method
                // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                    },
                    {
                        getOwnPropertyNames: nativeGetOwnPropertyNames,
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/object-get-own-property-names-external": 130,
            },
        ],
        273: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var toObject = require("../internals/to-object");
                var nativeGetPrototypeOf = require("../internals/object-get-prototype-of");
                var CORRECT_PROTOTYPE_GETTER = require("../internals/correct-prototype-getter");

                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeGetPrototypeOf(1);
                });

                // `Object.getPrototypeOf` method
                // https://tc39.github.io/ecma262/#sec-object.getprototypeof
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                        sham: !CORRECT_PROTOTYPE_GETTER,
                    },
                    {
                        getPrototypeOf: function getPrototypeOf(it) {
                            return nativeGetPrototypeOf(toObject(it));
                        },
                    },
                );
            },
            {
                "../internals/correct-prototype-getter": 65,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/object-get-prototype-of": 133,
                "../internals/to-object": 173,
            },
        ],
        274: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var isObject = require("../internals/is-object");

                var nativeIsExtensible = Object.isExtensible;
                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeIsExtensible(1);
                });

                // `Object.isExtensible` method
                // https://tc39.github.io/ecma262/#sec-object.isextensible
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                    },
                    {
                        isExtensible: function isExtensible(it) {
                            return isObject(it)
                                ? nativeIsExtensible
                                    ? nativeIsExtensible(it)
                                    : true
                                : false;
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/is-object": 107,
            },
        ],
        275: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var isObject = require("../internals/is-object");

                var nativeIsFrozen = Object.isFrozen;
                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeIsFrozen(1);
                });

                // `Object.isFrozen` method
                // https://tc39.github.io/ecma262/#sec-object.isfrozen
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                    },
                    {
                        isFrozen: function isFrozen(it) {
                            return isObject(it)
                                ? nativeIsFrozen
                                    ? nativeIsFrozen(it)
                                    : false
                                : true;
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/is-object": 107,
            },
        ],
        276: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var fails = require("../internals/fails");
                var isObject = require("../internals/is-object");

                var nativeIsSealed = Object.isSealed;
                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeIsSealed(1);
                });

                // `Object.isSealed` method
                // https://tc39.github.io/ecma262/#sec-object.issealed
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                    },
                    {
                        isSealed: function isSealed(it) {
                            return isObject(it)
                                ? nativeIsSealed
                                    ? nativeIsSealed(it)
                                    : false
                                : true;
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/is-object": 107,
            },
        ],
        277: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var is = require("../internals/same-value");

                // `Object.is` method
                // https://tc39.github.io/ecma262/#sec-object.is
                $(
                    { target: "Object", stat: true },
                    {
                        is: is,
                    },
                );
            },
            { "../internals/export": 79, "../internals/same-value": 153 },
        ],
        278: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var toObject = require("../internals/to-object");
                var nativeKeys = require("../internals/object-keys");
                var fails = require("../internals/fails");

                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeKeys(1);
                });

                // `Object.keys` method
                // https://tc39.github.io/ecma262/#sec-object.keys
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                    },
                    {
                        keys: function keys(it) {
                            return nativeKeys(toObject(it));
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/object-keys": 135,
                "../internals/to-object": 173,
            },
        ],
        279: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var FORCED = require("../internals/forced-object-prototype-accessors-methods");
                var toObject = require("../internals/to-object");
                var toPrimitive = require("../internals/to-primitive");
                var getPrototypeOf = require("../internals/object-get-prototype-of");
                var getOwnPropertyDescriptor = require("../internals/object-get-own-property-descriptor")
                    .f;

                // `Object.prototype.__lookupGetter__` method
                // https://tc39.github.io/ecma262/#sec-object.prototype.__lookupGetter__
                if (DESCRIPTORS) {
                    $(
                        { target: "Object", proto: true, forced: FORCED },
                        {
                            __lookupGetter__: function __lookupGetter__(P) {
                                var O = toObject(this);
                                var key = toPrimitive(P, true);
                                var desc;
                                do {
                                    if (
                                        (desc = getOwnPropertyDescriptor(
                                            O,
                                            key,
                                        ))
                                    )
                                        return desc.get;
                                } while ((O = getPrototypeOf(O)));
                            },
                        },
                    );
                }
            },
            {
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/forced-object-prototype-accessors-methods": 83,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/object-get-prototype-of": 133,
                "../internals/to-object": 173,
                "../internals/to-primitive": 176,
            },
        ],
        280: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var FORCED = require("../internals/forced-object-prototype-accessors-methods");
                var toObject = require("../internals/to-object");
                var toPrimitive = require("../internals/to-primitive");
                var getPrototypeOf = require("../internals/object-get-prototype-of");
                var getOwnPropertyDescriptor = require("../internals/object-get-own-property-descriptor")
                    .f;

                // `Object.prototype.__lookupSetter__` method
                // https://tc39.github.io/ecma262/#sec-object.prototype.__lookupSetter__
                if (DESCRIPTORS) {
                    $(
                        { target: "Object", proto: true, forced: FORCED },
                        {
                            __lookupSetter__: function __lookupSetter__(P) {
                                var O = toObject(this);
                                var key = toPrimitive(P, true);
                                var desc;
                                do {
                                    if (
                                        (desc = getOwnPropertyDescriptor(
                                            O,
                                            key,
                                        ))
                                    )
                                        return desc.set;
                                } while ((O = getPrototypeOf(O)));
                            },
                        },
                    );
                }
            },
            {
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/forced-object-prototype-accessors-methods": 83,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/object-get-prototype-of": 133,
                "../internals/to-object": 173,
                "../internals/to-primitive": 176,
            },
        ],
        281: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var isObject = require("../internals/is-object");
                var onFreeze = require("../internals/internal-metadata")
                    .onFreeze;
                var FREEZING = require("../internals/freezing");
                var fails = require("../internals/fails");

                var nativePreventExtensions = Object.preventExtensions;
                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativePreventExtensions(1);
                });

                // `Object.preventExtensions` method
                // https://tc39.github.io/ecma262/#sec-object.preventextensions
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                        sham: !FREEZING,
                    },
                    {
                        preventExtensions: function preventExtensions(it) {
                            return nativePreventExtensions && isObject(it)
                                ? nativePreventExtensions(onFreeze(it))
                                : it;
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/freezing": 86,
                "../internals/internal-metadata": 100,
                "../internals/is-object": 107,
            },
        ],
        282: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var isObject = require("../internals/is-object");
                var onFreeze = require("../internals/internal-metadata")
                    .onFreeze;
                var FREEZING = require("../internals/freezing");
                var fails = require("../internals/fails");

                var nativeSeal = Object.seal;
                var FAILS_ON_PRIMITIVES = fails(function() {
                    nativeSeal(1);
                });

                // `Object.seal` method
                // https://tc39.github.io/ecma262/#sec-object.seal
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: FAILS_ON_PRIMITIVES,
                        sham: !FREEZING,
                    },
                    {
                        seal: function seal(it) {
                            return nativeSeal && isObject(it)
                                ? nativeSeal(onFreeze(it))
                                : it;
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/freezing": 86,
                "../internals/internal-metadata": 100,
                "../internals/is-object": 107,
            },
        ],
        283: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var setPrototypeOf = require("../internals/object-set-prototype-of");

                // `Object.setPrototypeOf` method
                // https://tc39.github.io/ecma262/#sec-object.setprototypeof
                $(
                    { target: "Object", stat: true },
                    {
                        setPrototypeOf: setPrototypeOf,
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/object-set-prototype-of": 137,
            },
        ],
        284: [
            function(require, module, exports) {
                var redefine = require("../internals/redefine");
                var toString = require("../internals/object-to-string");

                var ObjectPrototype = Object.prototype;

                // `Object.prototype.toString` method
                // https://tc39.github.io/ecma262/#sec-object.prototype.tostring
                if (toString !== ObjectPrototype.toString) {
                    redefine(ObjectPrototype, "toString", toString, {
                        unsafe: true,
                    });
                }
            },
            {
                "../internals/object-to-string": 139,
                "../internals/redefine": 148,
            },
        ],
        285: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var $values = require("../internals/object-to-array").values;

                // `Object.values` method
                // https://tc39.github.io/ecma262/#sec-object.values
                $(
                    { target: "Object", stat: true },
                    {
                        values: function values(O) {
                            return $values(O);
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/object-to-array": 138 },
        ],
        286: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var parseFloatImplementation = require("../internals/parse-float");

                // `parseFloat` method
                // https://tc39.github.io/ecma262/#sec-parsefloat-string
                $(
                    {
                        global: true,
                        forced: parseFloat != parseFloatImplementation,
                    },
                    {
                        parseFloat: parseFloatImplementation,
                    },
                );
            },
            { "../internals/export": 79, "../internals/parse-float": 141 },
        ],
        287: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var parseIntImplementation = require("../internals/parse-int");

                // `parseInt` method
                // https://tc39.github.io/ecma262/#sec-parseint-string-radix
                $(
                    {
                        global: true,
                        forced: parseInt != parseIntImplementation,
                    },
                    {
                        parseInt: parseIntImplementation,
                    },
                );
            },
            { "../internals/export": 79, "../internals/parse-int": 142 },
        ],
        288: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var aFunction = require("../internals/a-function");
                var newPromiseCapabilityModule = require("../internals/new-promise-capability");
                var perform = require("../internals/perform");
                var iterate = require("../internals/iterate");

                // `Promise.allSettled` method
                // https://github.com/tc39/proposal-promise-allSettled
                $(
                    { target: "Promise", stat: true },
                    {
                        allSettled: function allSettled(iterable) {
                            var C = this;
                            var capability = newPromiseCapabilityModule.f(C);
                            var resolve = capability.resolve;
                            var reject = capability.reject;
                            var result = perform(function() {
                                var promiseResolve = aFunction(C.resolve);
                                var values = [];
                                var counter = 0;
                                var remaining = 1;
                                iterate(iterable, function(promise) {
                                    var index = counter++;
                                    var alreadyCalled = false;
                                    values.push(undefined);
                                    remaining++;
                                    promiseResolve.call(C, promise).then(
                                        function(value) {
                                            if (alreadyCalled) return;
                                            alreadyCalled = true;
                                            values[index] = {
                                                status: "fulfilled",
                                                value: value,
                                            };
                                            --remaining || resolve(values);
                                        },
                                        function(e) {
                                            if (alreadyCalled) return;
                                            alreadyCalled = true;
                                            values[index] = {
                                                status: "rejected",
                                                reason: e,
                                            };
                                            --remaining || resolve(values);
                                        },
                                    );
                                });
                                --remaining || resolve(values);
                            });
                            if (result.error) reject(result.value);
                            return capability.promise;
                        },
                    },
                );
            },
            {
                "../internals/a-function": 37,
                "../internals/export": 79,
                "../internals/iterate": 110,
                "../internals/new-promise-capability": 122,
                "../internals/perform": 144,
            },
        ],
        289: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var IS_PURE = require("../internals/is-pure");
                var NativePromise = require("../internals/native-promise-constructor");
                var getBuiltIn = require("../internals/get-built-in");
                var speciesConstructor = require("../internals/species-constructor");
                var promiseResolve = require("../internals/promise-resolve");
                var redefine = require("../internals/redefine");

                // `Promise.prototype.finally` method
                // https://tc39.github.io/ecma262/#sec-promise.prototype.finally
                $(
                    { target: "Promise", proto: true, real: true },
                    {
                        finally: function(onFinally) {
                            var C = speciesConstructor(
                                this,
                                getBuiltIn("Promise"),
                            );
                            var isFunction = typeof onFinally == "function";
                            return this.then(
                                isFunction
                                    ? function(x) {
                                          return promiseResolve(
                                              C,
                                              onFinally(),
                                          ).then(function() {
                                              return x;
                                          });
                                      }
                                    : onFinally,
                                isFunction
                                    ? function(e) {
                                          return promiseResolve(
                                              C,
                                              onFinally(),
                                          ).then(function() {
                                              throw e;
                                          });
                                      }
                                    : onFinally,
                            );
                        },
                    },
                );

                // patch native Promise.prototype for native async functions
                if (
                    !IS_PURE &&
                    typeof NativePromise == "function" &&
                    !NativePromise.prototype["finally"]
                ) {
                    redefine(
                        NativePromise.prototype,
                        "finally",
                        getBuiltIn("Promise").prototype["finally"],
                    );
                }
            },
            {
                "../internals/export": 79,
                "../internals/get-built-in": 89,
                "../internals/is-pure": 108,
                "../internals/native-promise-constructor": 118,
                "../internals/promise-resolve": 145,
                "../internals/redefine": 148,
                "../internals/species-constructor": 161,
            },
        ],
        290: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var IS_PURE = require("../internals/is-pure");
                var global = require("../internals/global");
                var getBuiltIn = require("../internals/get-built-in");
                var NativePromise = require("../internals/native-promise-constructor");
                var redefine = require("../internals/redefine");
                var redefineAll = require("../internals/redefine-all");
                var shared = require("../internals/shared");
                var setToStringTag = require("../internals/set-to-string-tag");
                var setSpecies = require("../internals/set-species");
                var isObject = require("../internals/is-object");
                var aFunction = require("../internals/a-function");
                var anInstance = require("../internals/an-instance");
                var classof = require("../internals/classof-raw");
                var iterate = require("../internals/iterate");
                var checkCorrectnessOfIteration = require("../internals/check-correctness-of-iteration");
                var speciesConstructor = require("../internals/species-constructor");
                var task = require("../internals/task").set;
                var microtask = require("../internals/microtask");
                var promiseResolve = require("../internals/promise-resolve");
                var hostReportErrors = require("../internals/host-report-errors");
                var newPromiseCapabilityModule = require("../internals/new-promise-capability");
                var perform = require("../internals/perform");
                var InternalStateModule = require("../internals/internal-state");
                var isForced = require("../internals/is-forced");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var V8_VERSION = require("../internals/v8-version");

                var SPECIES = wellKnownSymbol("species");
                var PROMISE = "Promise";
                var getInternalState = InternalStateModule.get;
                var setInternalState = InternalStateModule.set;
                var getInternalPromiseState = InternalStateModule.getterFor(
                    PROMISE,
                );
                var PromiseConstructor = NativePromise;
                var TypeError = global.TypeError;
                var document = global.document;
                var process = global.process;
                var inspectSource = shared("inspectSource");
                var $fetch = getBuiltIn("fetch");
                var newPromiseCapability = newPromiseCapabilityModule.f;
                var newGenericPromiseCapability = newPromiseCapability;
                var IS_NODE = classof(process) == "process";
                var DISPATCH_EVENT = !!(
                    document &&
                    document.createEvent &&
                    global.dispatchEvent
                );
                var UNHANDLED_REJECTION = "unhandledrejection";
                var REJECTION_HANDLED = "rejectionhandled";
                var PENDING = 0;
                var FULFILLED = 1;
                var REJECTED = 2;
                var HANDLED = 1;
                var UNHANDLED = 2;
                var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

                var FORCED = isForced(PROMISE, function() {
                    var GLOBAL_CORE_JS_PROMISE =
                        inspectSource(PromiseConstructor) !==
                        String(PromiseConstructor);
                    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
                    // We can't detect it synchronously, so just check versions
                    if (V8_VERSION === 66) return true;
                    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
                    if (
                        !GLOBAL_CORE_JS_PROMISE &&
                        !IS_NODE &&
                        typeof PromiseRejectionEvent != "function"
                    )
                        return true;
                    // We need Promise#finally in the pure version for preventing prototype pollution
                    if (IS_PURE && !PromiseConstructor.prototype["finally"])
                        return true;
                    // We can't use @@species feature detection in V8 since it causes
                    // deoptimization and performance degradation
                    // https://github.com/zloirock/core-js/issues/679
                    if (
                        V8_VERSION >= 51 &&
                        /native code/.test(PromiseConstructor)
                    )
                        return false;
                    // Detect correctness of subclassing with @@species support
                    var promise = PromiseConstructor.resolve(1);
                    var FakePromise = function(exec) {
                        exec(
                            function() {
                                /* empty */
                            },
                            function() {
                                /* empty */
                            },
                        );
                    };
                    var constructor = (promise.constructor = {});
                    constructor[SPECIES] = FakePromise;
                    return !(
                        promise.then(function() {
                            /* empty */
                        }) instanceof FakePromise
                    );
                });

                var INCORRECT_ITERATION =
                    FORCED ||
                    !checkCorrectnessOfIteration(function(iterable) {
                        PromiseConstructor.all(iterable)["catch"](function() {
                            /* empty */
                        });
                    });

                // helpers
                var isThenable = function(it) {
                    var then;
                    return isObject(it) && typeof (then = it.then) == "function"
                        ? then
                        : false;
                };

                var notify = function(promise, state, isReject) {
                    if (state.notified) return;
                    state.notified = true;
                    var chain = state.reactions;
                    microtask(function() {
                        var value = state.value;
                        var ok = state.state == FULFILLED;
                        var index = 0;
                        // variable length - can't use forEach
                        while (chain.length > index) {
                            var reaction = chain[index++];
                            var handler = ok ? reaction.ok : reaction.fail;
                            var resolve = reaction.resolve;
                            var reject = reaction.reject;
                            var domain = reaction.domain;
                            var result, then, exited;
                            try {
                                if (handler) {
                                    if (!ok) {
                                        if (state.rejection === UNHANDLED)
                                            onHandleUnhandled(promise, state);
                                        state.rejection = HANDLED;
                                    }
                                    if (handler === true) result = value;
                                    else {
                                        if (domain) domain.enter();
                                        result = handler(value); // can throw
                                        if (domain) {
                                            domain.exit();
                                            exited = true;
                                        }
                                    }
                                    if (result === reaction.promise) {
                                        reject(
                                            TypeError("Promise-chain cycle"),
                                        );
                                    } else if ((then = isThenable(result))) {
                                        then.call(result, resolve, reject);
                                    } else resolve(result);
                                } else reject(value);
                            } catch (error) {
                                if (domain && !exited) domain.exit();
                                reject(error);
                            }
                        }
                        state.reactions = [];
                        state.notified = false;
                        if (isReject && !state.rejection)
                            onUnhandled(promise, state);
                    });
                };

                var dispatchEvent = function(name, promise, reason) {
                    var event, handler;
                    if (DISPATCH_EVENT) {
                        event = document.createEvent("Event");
                        event.promise = promise;
                        event.reason = reason;
                        event.initEvent(name, false, true);
                        global.dispatchEvent(event);
                    } else event = { promise: promise, reason: reason };
                    if ((handler = global["on" + name])) handler(event);
                    else if (name === UNHANDLED_REJECTION)
                        hostReportErrors("Unhandled promise rejection", reason);
                };

                var onUnhandled = function(promise, state) {
                    task.call(global, function() {
                        var value = state.value;
                        var IS_UNHANDLED = isUnhandled(state);
                        var result;
                        if (IS_UNHANDLED) {
                            result = perform(function() {
                                if (IS_NODE) {
                                    process.emit(
                                        "unhandledRejection",
                                        value,
                                        promise,
                                    );
                                } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
                            });
                            // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
                            state.rejection =
                                IS_NODE || isUnhandled(state)
                                    ? UNHANDLED
                                    : HANDLED;
                            if (result.error) throw result.value;
                        }
                    });
                };

                var isUnhandled = function(state) {
                    return state.rejection !== HANDLED && !state.parent;
                };

                var onHandleUnhandled = function(promise, state) {
                    task.call(global, function() {
                        if (IS_NODE) {
                            process.emit("rejectionHandled", promise);
                        } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
                    });
                };

                var bind = function(fn, promise, state, unwrap) {
                    return function(value) {
                        fn(promise, state, value, unwrap);
                    };
                };

                var internalReject = function(promise, state, value, unwrap) {
                    if (state.done) return;
                    state.done = true;
                    if (unwrap) state = unwrap;
                    state.value = value;
                    state.state = REJECTED;
                    notify(promise, state, true);
                };

                var internalResolve = function(promise, state, value, unwrap) {
                    if (state.done) return;
                    state.done = true;
                    if (unwrap) state = unwrap;
                    try {
                        if (promise === value)
                            throw TypeError("Promise can't be resolved itself");
                        var then = isThenable(value);
                        if (then) {
                            microtask(function() {
                                var wrapper = { done: false };
                                try {
                                    then.call(
                                        value,
                                        bind(
                                            internalResolve,
                                            promise,
                                            wrapper,
                                            state,
                                        ),
                                        bind(
                                            internalReject,
                                            promise,
                                            wrapper,
                                            state,
                                        ),
                                    );
                                } catch (error) {
                                    internalReject(
                                        promise,
                                        wrapper,
                                        error,
                                        state,
                                    );
                                }
                            });
                        } else {
                            state.value = value;
                            state.state = FULFILLED;
                            notify(promise, state, false);
                        }
                    } catch (error) {
                        internalReject(promise, { done: false }, error, state);
                    }
                };

                // constructor polyfill
                if (FORCED) {
                    // 25.4.3.1 Promise(executor)
                    PromiseConstructor = function Promise(executor) {
                        anInstance(this, PromiseConstructor, PROMISE);
                        aFunction(executor);
                        Internal.call(this);
                        var state = getInternalState(this);
                        try {
                            executor(
                                bind(internalResolve, this, state),
                                bind(internalReject, this, state),
                            );
                        } catch (error) {
                            internalReject(this, state, error);
                        }
                    };
                    // eslint-disable-next-line no-unused-vars
                    Internal = function Promise(executor) {
                        setInternalState(this, {
                            type: PROMISE,
                            done: false,
                            notified: false,
                            parent: false,
                            reactions: [],
                            rejection: false,
                            state: PENDING,
                            value: undefined,
                        });
                    };
                    Internal.prototype = redefineAll(
                        PromiseConstructor.prototype,
                        {
                            // `Promise.prototype.then` method
                            // https://tc39.github.io/ecma262/#sec-promise.prototype.then
                            then: function then(onFulfilled, onRejected) {
                                var state = getInternalPromiseState(this);
                                var reaction = newPromiseCapability(
                                    speciesConstructor(
                                        this,
                                        PromiseConstructor,
                                    ),
                                );
                                reaction.ok =
                                    typeof onFulfilled == "function"
                                        ? onFulfilled
                                        : true;
                                reaction.fail =
                                    typeof onRejected == "function" &&
                                    onRejected;
                                reaction.domain = IS_NODE
                                    ? process.domain
                                    : undefined;
                                state.parent = true;
                                state.reactions.push(reaction);
                                if (state.state != PENDING)
                                    notify(this, state, false);
                                return reaction.promise;
                            },
                            // `Promise.prototype.catch` method
                            // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
                            catch: function(onRejected) {
                                return this.then(undefined, onRejected);
                            },
                        },
                    );
                    OwnPromiseCapability = function() {
                        var promise = new Internal();
                        var state = getInternalState(promise);
                        this.promise = promise;
                        this.resolve = bind(internalResolve, promise, state);
                        this.reject = bind(internalReject, promise, state);
                    };
                    newPromiseCapabilityModule.f = newPromiseCapability = function(
                        C,
                    ) {
                        return C === PromiseConstructor || C === PromiseWrapper
                            ? new OwnPromiseCapability(C)
                            : newGenericPromiseCapability(C);
                    };

                    if (!IS_PURE && typeof NativePromise == "function") {
                        nativeThen = NativePromise.prototype.then;

                        // wrap native Promise#then for native async functions
                        redefine(
                            NativePromise.prototype,
                            "then",
                            function then(onFulfilled, onRejected) {
                                var that = this;
                                return new PromiseConstructor(function(
                                    resolve,
                                    reject,
                                ) {
                                    nativeThen.call(that, resolve, reject);
                                }).then(onFulfilled, onRejected);
                                // https://github.com/zloirock/core-js/issues/640
                            },
                            { unsafe: true },
                        );

                        // wrap fetch result
                        if (typeof $fetch == "function")
                            $(
                                {
                                    global: true,
                                    enumerable: true,
                                    forced: true,
                                },
                                {
                                    // eslint-disable-next-line no-unused-vars
                                    fetch: function fetch(input /* , init */) {
                                        return promiseResolve(
                                            PromiseConstructor,
                                            $fetch.apply(global, arguments),
                                        );
                                    },
                                },
                            );
                    }
                }

                $(
                    { global: true, wrap: true, forced: FORCED },
                    {
                        Promise: PromiseConstructor,
                    },
                );

                setToStringTag(PromiseConstructor, PROMISE, false, true);
                setSpecies(PROMISE);

                PromiseWrapper = getBuiltIn(PROMISE);

                // statics
                $(
                    { target: PROMISE, stat: true, forced: FORCED },
                    {
                        // `Promise.reject` method
                        // https://tc39.github.io/ecma262/#sec-promise.reject
                        reject: function reject(r) {
                            var capability = newPromiseCapability(this);
                            capability.reject.call(undefined, r);
                            return capability.promise;
                        },
                    },
                );

                $(
                    { target: PROMISE, stat: true, forced: IS_PURE || FORCED },
                    {
                        // `Promise.resolve` method
                        // https://tc39.github.io/ecma262/#sec-promise.resolve
                        resolve: function resolve(x) {
                            return promiseResolve(
                                IS_PURE && this === PromiseWrapper
                                    ? PromiseConstructor
                                    : this,
                                x,
                            );
                        },
                    },
                );

                $(
                    {
                        target: PROMISE,
                        stat: true,
                        forced: INCORRECT_ITERATION,
                    },
                    {
                        // `Promise.all` method
                        // https://tc39.github.io/ecma262/#sec-promise.all
                        all: function all(iterable) {
                            var C = this;
                            var capability = newPromiseCapability(C);
                            var resolve = capability.resolve;
                            var reject = capability.reject;
                            var result = perform(function() {
                                var $promiseResolve = aFunction(C.resolve);
                                var values = [];
                                var counter = 0;
                                var remaining = 1;
                                iterate(iterable, function(promise) {
                                    var index = counter++;
                                    var alreadyCalled = false;
                                    values.push(undefined);
                                    remaining++;
                                    $promiseResolve
                                        .call(C, promise)
                                        .then(function(value) {
                                            if (alreadyCalled) return;
                                            alreadyCalled = true;
                                            values[index] = value;
                                            --remaining || resolve(values);
                                        }, reject);
                                });
                                --remaining || resolve(values);
                            });
                            if (result.error) reject(result.value);
                            return capability.promise;
                        },
                        // `Promise.race` method
                        // https://tc39.github.io/ecma262/#sec-promise.race
                        race: function race(iterable) {
                            var C = this;
                            var capability = newPromiseCapability(C);
                            var reject = capability.reject;
                            var result = perform(function() {
                                var $promiseResolve = aFunction(C.resolve);
                                iterate(iterable, function(promise) {
                                    $promiseResolve
                                        .call(C, promise)
                                        .then(capability.resolve, reject);
                                });
                            });
                            if (result.error) reject(result.value);
                            return capability.promise;
                        },
                    },
                );
            },
            {
                "../internals/a-function": 37,
                "../internals/an-instance": 41,
                "../internals/check-correctness-of-iteration": 57,
                "../internals/classof-raw": 58,
                "../internals/export": 79,
                "../internals/get-built-in": 89,
                "../internals/global": 92,
                "../internals/host-report-errors": 95,
                "../internals/internal-state": 101,
                "../internals/is-forced": 104,
                "../internals/is-object": 107,
                "../internals/is-pure": 108,
                "../internals/iterate": 110,
                "../internals/microtask": 117,
                "../internals/native-promise-constructor": 118,
                "../internals/new-promise-capability": 122,
                "../internals/perform": 144,
                "../internals/promise-resolve": 145,
                "../internals/redefine": 148,
                "../internals/redefine-all": 147,
                "../internals/set-species": 155,
                "../internals/set-to-string-tag": 156,
                "../internals/shared": 159,
                "../internals/species-constructor": 161,
                "../internals/task": 166,
                "../internals/v8-version": 182,
                "../internals/well-known-symbol": 184,
            },
        ],
        291: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var getBuiltIn = require("../internals/get-built-in");
                var aFunction = require("../internals/a-function");
                var anObject = require("../internals/an-object");
                var fails = require("../internals/fails");

                var nativeApply = getBuiltIn("Reflect", "apply");
                var functionApply = Function.apply;

                // MS Edge argumentsList argument is optional
                var OPTIONAL_ARGUMENTS_LIST = !fails(function() {
                    nativeApply(function() {
                        /* empty */
                    });
                });

                // `Reflect.apply` method
                // https://tc39.github.io/ecma262/#sec-reflect.apply
                $(
                    {
                        target: "Reflect",
                        stat: true,
                        forced: OPTIONAL_ARGUMENTS_LIST,
                    },
                    {
                        apply: function apply(
                            target,
                            thisArgument,
                            argumentsList,
                        ) {
                            aFunction(target);
                            anObject(argumentsList);
                            return nativeApply
                                ? nativeApply(
                                      target,
                                      thisArgument,
                                      argumentsList,
                                  )
                                : functionApply.call(
                                      target,
                                      thisArgument,
                                      argumentsList,
                                  );
                        },
                    },
                );
            },
            {
                "../internals/a-function": 37,
                "../internals/an-object": 42,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/get-built-in": 89,
            },
        ],
        292: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var getBuiltIn = require("../internals/get-built-in");
                var aFunction = require("../internals/a-function");
                var anObject = require("../internals/an-object");
                var isObject = require("../internals/is-object");
                var create = require("../internals/object-create");
                var bind = require("../internals/function-bind");
                var fails = require("../internals/fails");

                var nativeConstruct = getBuiltIn("Reflect", "construct");

                // `Reflect.construct` method
                // https://tc39.github.io/ecma262/#sec-reflect.construct
                // MS Edge supports only 2 arguments and argumentsList argument is optional
                // FF Nightly sets third argument as `new.target`, but does not create `this` from it
                var NEW_TARGET_BUG = fails(function() {
                    function F() {
                        /* empty */
                    }
                    return !(
                        nativeConstruct(
                            function() {
                                /* empty */
                            },
                            [],
                            F,
                        ) instanceof F
                    );
                });
                var ARGS_BUG = !fails(function() {
                    nativeConstruct(function() {
                        /* empty */
                    });
                });
                var FORCED = NEW_TARGET_BUG || ARGS_BUG;

                $(
                    {
                        target: "Reflect",
                        stat: true,
                        forced: FORCED,
                        sham: FORCED,
                    },
                    {
                        construct: function construct(
                            Target,
                            args /* , newTarget */,
                        ) {
                            aFunction(Target);
                            anObject(args);
                            var newTarget =
                                arguments.length < 3
                                    ? Target
                                    : aFunction(arguments[2]);
                            if (ARGS_BUG && !NEW_TARGET_BUG)
                                return nativeConstruct(Target, args, newTarget);
                            if (Target == newTarget) {
                                // w/o altered newTarget, optimization for 0-4 arguments
                                switch (args.length) {
                                    case 0:
                                        return new Target();
                                    case 1:
                                        return new Target(args[0]);
                                    case 2:
                                        return new Target(args[0], args[1]);
                                    case 3:
                                        return new Target(
                                            args[0],
                                            args[1],
                                            args[2],
                                        );
                                    case 4:
                                        return new Target(
                                            args[0],
                                            args[1],
                                            args[2],
                                            args[3],
                                        );
                                }
                                // w/o altered newTarget, lot of arguments case
                                var $args = [null];
                                $args.push.apply($args, args);
                                return new (bind.apply(Target, $args))();
                            }
                            // with altered newTarget, not support built-in constructors
                            var proto = newTarget.prototype;
                            var instance = create(
                                isObject(proto) ? proto : Object.prototype,
                            );
                            var result = Function.apply.call(
                                Target,
                                instance,
                                args,
                            );
                            return isObject(result) ? result : instance;
                        },
                    },
                );
            },
            {
                "../internals/a-function": 37,
                "../internals/an-object": 42,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/function-bind": 87,
                "../internals/get-built-in": 89,
                "../internals/is-object": 107,
                "../internals/object-create": 126,
            },
        ],
        293: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var anObject = require("../internals/an-object");
                var toPrimitive = require("../internals/to-primitive");
                var definePropertyModule = require("../internals/object-define-property");
                var fails = require("../internals/fails");

                // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
                var ERROR_INSTEAD_OF_FALSE = fails(function() {
                    // eslint-disable-next-line no-undef
                    Reflect.defineProperty(
                        definePropertyModule.f({}, 1, { value: 1 }),
                        1,
                        { value: 2 },
                    );
                });

                // `Reflect.defineProperty` method
                // https://tc39.github.io/ecma262/#sec-reflect.defineproperty
                $(
                    {
                        target: "Reflect",
                        stat: true,
                        forced: ERROR_INSTEAD_OF_FALSE,
                        sham: !DESCRIPTORS,
                    },
                    {
                        defineProperty: function defineProperty(
                            target,
                            propertyKey,
                            attributes,
                        ) {
                            anObject(target);
                            var key = toPrimitive(propertyKey, true);
                            anObject(attributes);
                            try {
                                definePropertyModule.f(target, key, attributes);
                                return true;
                            } catch (error) {
                                return false;
                            }
                        },
                    },
                );
            },
            {
                "../internals/an-object": 42,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/object-define-property": 128,
                "../internals/to-primitive": 176,
            },
        ],
        294: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var anObject = require("../internals/an-object");
                var getOwnPropertyDescriptor = require("../internals/object-get-own-property-descriptor")
                    .f;

                // `Reflect.deleteProperty` method
                // https://tc39.github.io/ecma262/#sec-reflect.deleteproperty
                $(
                    { target: "Reflect", stat: true },
                    {
                        deleteProperty: function deleteProperty(
                            target,
                            propertyKey,
                        ) {
                            var descriptor = getOwnPropertyDescriptor(
                                anObject(target),
                                propertyKey,
                            );
                            return descriptor && !descriptor.configurable
                                ? false
                                : delete target[propertyKey];
                        },
                    },
                );
            },
            {
                "../internals/an-object": 42,
                "../internals/export": 79,
                "../internals/object-get-own-property-descriptor": 129,
            },
        ],
        295: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var anObject = require("../internals/an-object");
                var getOwnPropertyDescriptorModule = require("../internals/object-get-own-property-descriptor");

                // `Reflect.getOwnPropertyDescriptor` method
                // https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor
                $(
                    { target: "Reflect", stat: true, sham: !DESCRIPTORS },
                    {
                        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(
                            target,
                            propertyKey,
                        ) {
                            return getOwnPropertyDescriptorModule.f(
                                anObject(target),
                                propertyKey,
                            );
                        },
                    },
                );
            },
            {
                "../internals/an-object": 42,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/object-get-own-property-descriptor": 129,
            },
        ],
        296: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var anObject = require("../internals/an-object");
                var objectGetPrototypeOf = require("../internals/object-get-prototype-of");
                var CORRECT_PROTOTYPE_GETTER = require("../internals/correct-prototype-getter");

                // `Reflect.getPrototypeOf` method
                // https://tc39.github.io/ecma262/#sec-reflect.getprototypeof
                $(
                    {
                        target: "Reflect",
                        stat: true,
                        sham: !CORRECT_PROTOTYPE_GETTER,
                    },
                    {
                        getPrototypeOf: function getPrototypeOf(target) {
                            return objectGetPrototypeOf(anObject(target));
                        },
                    },
                );
            },
            {
                "../internals/an-object": 42,
                "../internals/correct-prototype-getter": 65,
                "../internals/export": 79,
                "../internals/object-get-prototype-of": 133,
            },
        ],
        297: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var isObject = require("../internals/is-object");
                var anObject = require("../internals/an-object");
                var has = require("../internals/has");
                var getOwnPropertyDescriptorModule = require("../internals/object-get-own-property-descriptor");
                var getPrototypeOf = require("../internals/object-get-prototype-of");

                // `Reflect.get` method
                // https://tc39.github.io/ecma262/#sec-reflect.get
                function get(target, propertyKey /* , receiver */) {
                    var receiver = arguments.length < 3 ? target : arguments[2];
                    var descriptor, prototype;
                    if (anObject(target) === receiver)
                        return target[propertyKey];
                    if (
                        (descriptor = getOwnPropertyDescriptorModule.f(
                            target,
                            propertyKey,
                        ))
                    )
                        return has(descriptor, "value")
                            ? descriptor.value
                            : descriptor.get === undefined
                            ? undefined
                            : descriptor.get.call(receiver);
                    if (isObject((prototype = getPrototypeOf(target))))
                        return get(prototype, propertyKey, receiver);
                }

                $(
                    { target: "Reflect", stat: true },
                    {
                        get: get,
                    },
                );
            },
            {
                "../internals/an-object": 42,
                "../internals/export": 79,
                "../internals/has": 93,
                "../internals/is-object": 107,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/object-get-prototype-of": 133,
            },
        ],
        298: [
            function(require, module, exports) {
                var $ = require("../internals/export");

                // `Reflect.has` method
                // https://tc39.github.io/ecma262/#sec-reflect.has
                $(
                    { target: "Reflect", stat: true },
                    {
                        has: function has(target, propertyKey) {
                            return propertyKey in target;
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        299: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var anObject = require("../internals/an-object");

                var objectIsExtensible = Object.isExtensible;

                // `Reflect.isExtensible` method
                // https://tc39.github.io/ecma262/#sec-reflect.isextensible
                $(
                    { target: "Reflect", stat: true },
                    {
                        isExtensible: function isExtensible(target) {
                            anObject(target);
                            return objectIsExtensible
                                ? objectIsExtensible(target)
                                : true;
                        },
                    },
                );
            },
            { "../internals/an-object": 42, "../internals/export": 79 },
        ],
        300: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var ownKeys = require("../internals/own-keys");

                // `Reflect.ownKeys` method
                // https://tc39.github.io/ecma262/#sec-reflect.ownkeys
                $(
                    { target: "Reflect", stat: true },
                    {
                        ownKeys: ownKeys,
                    },
                );
            },
            { "../internals/export": 79, "../internals/own-keys": 140 },
        ],
        301: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var getBuiltIn = require("../internals/get-built-in");
                var anObject = require("../internals/an-object");
                var FREEZING = require("../internals/freezing");

                // `Reflect.preventExtensions` method
                // https://tc39.github.io/ecma262/#sec-reflect.preventextensions
                $(
                    { target: "Reflect", stat: true, sham: !FREEZING },
                    {
                        preventExtensions: function preventExtensions(target) {
                            anObject(target);
                            try {
                                var objectPreventExtensions = getBuiltIn(
                                    "Object",
                                    "preventExtensions",
                                );
                                if (objectPreventExtensions)
                                    objectPreventExtensions(target);
                                return true;
                            } catch (error) {
                                return false;
                            }
                        },
                    },
                );
            },
            {
                "../internals/an-object": 42,
                "../internals/export": 79,
                "../internals/freezing": 86,
                "../internals/get-built-in": 89,
            },
        ],
        302: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var anObject = require("../internals/an-object");
                var aPossiblePrototype = require("../internals/a-possible-prototype");
                var objectSetPrototypeOf = require("../internals/object-set-prototype-of");

                // `Reflect.setPrototypeOf` method
                // https://tc39.github.io/ecma262/#sec-reflect.setprototypeof
                if (objectSetPrototypeOf)
                    $(
                        { target: "Reflect", stat: true },
                        {
                            setPrototypeOf: function setPrototypeOf(
                                target,
                                proto,
                            ) {
                                anObject(target);
                                aPossiblePrototype(proto);
                                try {
                                    objectSetPrototypeOf(target, proto);
                                    return true;
                                } catch (error) {
                                    return false;
                                }
                            },
                        },
                    );
            },
            {
                "../internals/a-possible-prototype": 38,
                "../internals/an-object": 42,
                "../internals/export": 79,
                "../internals/object-set-prototype-of": 137,
            },
        ],
        303: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var anObject = require("../internals/an-object");
                var isObject = require("../internals/is-object");
                var has = require("../internals/has");
                var definePropertyModule = require("../internals/object-define-property");
                var getOwnPropertyDescriptorModule = require("../internals/object-get-own-property-descriptor");
                var getPrototypeOf = require("../internals/object-get-prototype-of");
                var createPropertyDescriptor = require("../internals/create-property-descriptor");

                // `Reflect.set` method
                // https://tc39.github.io/ecma262/#sec-reflect.set
                function set(target, propertyKey, V /* , receiver */) {
                    var receiver = arguments.length < 4 ? target : arguments[3];
                    var ownDescriptor = getOwnPropertyDescriptorModule.f(
                        anObject(target),
                        propertyKey,
                    );
                    var existingDescriptor, prototype;
                    if (!ownDescriptor) {
                        if (isObject((prototype = getPrototypeOf(target)))) {
                            return set(prototype, propertyKey, V, receiver);
                        }
                        ownDescriptor = createPropertyDescriptor(0);
                    }
                    if (has(ownDescriptor, "value")) {
                        if (
                            ownDescriptor.writable === false ||
                            !isObject(receiver)
                        )
                            return false;
                        if (
                            (existingDescriptor = getOwnPropertyDescriptorModule.f(
                                receiver,
                                propertyKey,
                            ))
                        ) {
                            if (
                                existingDescriptor.get ||
                                existingDescriptor.set ||
                                existingDescriptor.writable === false
                            )
                                return false;
                            existingDescriptor.value = V;
                            definePropertyModule.f(
                                receiver,
                                propertyKey,
                                existingDescriptor,
                            );
                        } else
                            definePropertyModule.f(
                                receiver,
                                propertyKey,
                                createPropertyDescriptor(0, V),
                            );
                        return true;
                    }
                    return ownDescriptor.set === undefined
                        ? false
                        : (ownDescriptor.set.call(receiver, V), true);
                }

                $(
                    { target: "Reflect", stat: true },
                    {
                        set: set,
                    },
                );
            },
            {
                "../internals/an-object": 42,
                "../internals/create-property-descriptor": 69,
                "../internals/export": 79,
                "../internals/has": 93,
                "../internals/is-object": 107,
                "../internals/object-define-property": 128,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/object-get-prototype-of": 133,
            },
        ],
        304: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var global = require("../internals/global");
                var isForced = require("../internals/is-forced");
                var inheritIfRequired = require("../internals/inherit-if-required");
                var defineProperty = require("../internals/object-define-property")
                    .f;
                var getOwnPropertyNames = require("../internals/object-get-own-property-names")
                    .f;
                var isRegExp = require("../internals/is-regexp");
                var getFlags = require("../internals/regexp-flags");
                var redefine = require("../internals/redefine");
                var fails = require("../internals/fails");
                var setSpecies = require("../internals/set-species");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var MATCH = wellKnownSymbol("match");
                var NativeRegExp = global.RegExp;
                var RegExpPrototype = NativeRegExp.prototype;
                var re1 = /a/g;
                var re2 = /a/g;

                // "new" should create a new object, old webkit bug
                var CORRECT_NEW = new NativeRegExp(re1) !== re1;

                var FORCED =
                    DESCRIPTORS &&
                    isForced(
                        "RegExp",
                        !CORRECT_NEW ||
                            fails(function() {
                                re2[MATCH] = false;
                                // RegExp constructor can alter flags and IsRegExp works correct with @@match
                                return (
                                    NativeRegExp(re1) != re1 ||
                                    NativeRegExp(re2) == re2 ||
                                    NativeRegExp(re1, "i") != "/a/i"
                                );
                            }),
                    );

                // `RegExp` constructor
                // https://tc39.github.io/ecma262/#sec-regexp-constructor
                if (FORCED) {
                    var RegExpWrapper = function RegExp(pattern, flags) {
                        var thisIsRegExp = this instanceof RegExpWrapper;
                        var patternIsRegExp = isRegExp(pattern);
                        var flagsAreUndefined = flags === undefined;
                        return !thisIsRegExp &&
                            patternIsRegExp &&
                            pattern.constructor === RegExpWrapper &&
                            flagsAreUndefined
                            ? pattern
                            : inheritIfRequired(
                                  CORRECT_NEW
                                      ? new NativeRegExp(
                                            patternIsRegExp &&
                                            !flagsAreUndefined
                                                ? pattern.source
                                                : pattern,
                                            flags,
                                        )
                                      : NativeRegExp(
                                            (patternIsRegExp =
                                                pattern instanceof
                                                RegExpWrapper)
                                                ? pattern.source
                                                : pattern,
                                            patternIsRegExp && flagsAreUndefined
                                                ? getFlags.call(pattern)
                                                : flags,
                                        ),
                                  thisIsRegExp ? this : RegExpPrototype,
                                  RegExpWrapper,
                              );
                    };
                    var proxy = function(key) {
                        key in RegExpWrapper ||
                            defineProperty(RegExpWrapper, key, {
                                configurable: true,
                                get: function() {
                                    return NativeRegExp[key];
                                },
                                set: function(it) {
                                    NativeRegExp[key] = it;
                                },
                            });
                    };
                    var keys = getOwnPropertyNames(NativeRegExp);
                    var index = 0;
                    while (keys.length > index) proxy(keys[index++]);
                    RegExpPrototype.constructor = RegExpWrapper;
                    RegExpWrapper.prototype = RegExpPrototype;
                    redefine(global, "RegExp", RegExpWrapper);
                }

                // https://tc39.github.io/ecma262/#sec-get-regexp-@@species
                setSpecies("RegExp");
            },
            {
                "../internals/descriptors": 75,
                "../internals/fails": 80,
                "../internals/global": 92,
                "../internals/inherit-if-required": 99,
                "../internals/is-forced": 104,
                "../internals/is-regexp": 109,
                "../internals/object-define-property": 128,
                "../internals/object-get-own-property-names": 131,
                "../internals/redefine": 148,
                "../internals/regexp-flags": 151,
                "../internals/set-species": 155,
                "../internals/well-known-symbol": 184,
            },
        ],
        305: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var exec = require("../internals/regexp-exec");

                $(
                    {
                        target: "RegExp",
                        proto: true,
                        forced: /./.exec !== exec,
                    },
                    {
                        exec: exec,
                    },
                );
            },
            { "../internals/export": 79, "../internals/regexp-exec": 150 },
        ],
        306: [
            function(require, module, exports) {
                var DESCRIPTORS = require("../internals/descriptors");
                var objectDefinePropertyModule = require("../internals/object-define-property");
                var regExpFlags = require("../internals/regexp-flags");

                // `RegExp.prototype.flags` getter
                // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
                if (DESCRIPTORS && /./g.flags != "g") {
                    objectDefinePropertyModule.f(RegExp.prototype, "flags", {
                        configurable: true,
                        get: regExpFlags,
                    });
                }
            },
            {
                "../internals/descriptors": 75,
                "../internals/object-define-property": 128,
                "../internals/regexp-flags": 151,
            },
        ],
        307: [
            function(require, module, exports) {
                "use strict";
                var redefine = require("../internals/redefine");
                var anObject = require("../internals/an-object");
                var fails = require("../internals/fails");
                var flags = require("../internals/regexp-flags");

                var TO_STRING = "toString";
                var RegExpPrototype = RegExp.prototype;
                var nativeToString = RegExpPrototype[TO_STRING];

                var NOT_GENERIC = fails(function() {
                    return (
                        nativeToString.call({ source: "a", flags: "b" }) !=
                        "/a/b"
                    );
                });
                // FF44- RegExp#toString has a wrong name
                var INCORRECT_NAME = nativeToString.name != TO_STRING;

                // `RegExp.prototype.toString` method
                // https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
                if (NOT_GENERIC || INCORRECT_NAME) {
                    redefine(
                        RegExp.prototype,
                        TO_STRING,
                        function toString() {
                            var R = anObject(this);
                            var p = String(R.source);
                            var rf = R.flags;
                            var f = String(
                                rf === undefined &&
                                    R instanceof RegExp &&
                                    !("flags" in RegExpPrototype)
                                    ? flags.call(R)
                                    : rf,
                            );
                            return "/" + p + "/" + f;
                        },
                        { unsafe: true },
                    );
                }
            },
            {
                "../internals/an-object": 42,
                "../internals/fails": 80,
                "../internals/redefine": 148,
                "../internals/regexp-flags": 151,
            },
        ],
        308: [
            function(require, module, exports) {
                "use strict";
                var collection = require("../internals/collection");
                var collectionStrong = require("../internals/collection-strong");

                // `Set` constructor
                // https://tc39.github.io/ecma262/#sec-set-objects
                module.exports = collection(
                    "Set",
                    function(get) {
                        return function Set() {
                            return get(
                                this,
                                arguments.length ? arguments[0] : undefined,
                            );
                        };
                    },
                    collectionStrong,
                );
            },
            {
                "../internals/collection": 62,
                "../internals/collection-strong": 60,
            },
        ],
        309: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.anchor` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.anchor
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("anchor"),
                    },
                    {
                        anchor: function anchor(name) {
                            return createHTML(this, "a", "name", name);
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        310: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.big` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.big
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("big"),
                    },
                    {
                        big: function big() {
                            return createHTML(this, "big", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        311: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.blink` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.blink
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("blink"),
                    },
                    {
                        blink: function blink() {
                            return createHTML(this, "blink", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        312: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.bold` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.bold
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("bold"),
                    },
                    {
                        bold: function bold() {
                            return createHTML(this, "b", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        313: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var codeAt = require("../internals/string-multibyte").codeAt;

                // `String.prototype.codePointAt` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
                $(
                    { target: "String", proto: true },
                    {
                        codePointAt: function codePointAt(pos) {
                            return codeAt(this, pos);
                        },
                    },
                );
            },
            { "../internals/export": 79, "../internals/string-multibyte": 162 },
        ],
        314: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var toLength = require("../internals/to-length");
                var notARegExp = require("../internals/not-a-regexp");
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var correctIsRegExpLogic = require("../internals/correct-is-regexp-logic");

                var nativeEndsWith = "".endsWith;
                var min = Math.min;

                // `String.prototype.endsWith` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.endswith
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: !correctIsRegExpLogic("endsWith"),
                    },
                    {
                        endsWith: function endsWith(
                            searchString /* , endPosition = @length */,
                        ) {
                            var that = String(requireObjectCoercible(this));
                            notARegExp(searchString);
                            var endPosition =
                                arguments.length > 1 ? arguments[1] : undefined;
                            var len = toLength(that.length);
                            var end =
                                endPosition === undefined
                                    ? len
                                    : min(toLength(endPosition), len);
                            var search = String(searchString);
                            return nativeEndsWith
                                ? nativeEndsWith.call(that, search, end)
                                : that.slice(end - search.length, end) ===
                                      search;
                        },
                    },
                );
            },
            {
                "../internals/correct-is-regexp-logic": 64,
                "../internals/export": 79,
                "../internals/not-a-regexp": 123,
                "../internals/require-object-coercible": 152,
                "../internals/to-length": 172,
            },
        ],
        315: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.fixed` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.fixed
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("fixed"),
                    },
                    {
                        fixed: function fixed() {
                            return createHTML(this, "tt", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        316: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.fontcolor` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("fontcolor"),
                    },
                    {
                        fontcolor: function fontcolor(color) {
                            return createHTML(this, "font", "color", color);
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        317: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.fontsize` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.fontsize
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("fontsize"),
                    },
                    {
                        fontsize: function fontsize(size) {
                            return createHTML(this, "font", "size", size);
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        318: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var toAbsoluteIndex = require("../internals/to-absolute-index");

                var fromCharCode = String.fromCharCode;
                var nativeFromCodePoint = String.fromCodePoint;

                // length should be 1, old FF problem
                var INCORRECT_LENGTH =
                    !!nativeFromCodePoint && nativeFromCodePoint.length != 1;

                // `String.fromCodePoint` method
                // https://tc39.github.io/ecma262/#sec-string.fromcodepoint
                $(
                    { target: "String", stat: true, forced: INCORRECT_LENGTH },
                    {
                        fromCodePoint: function fromCodePoint(x) {
                            // eslint-disable-line no-unused-vars
                            var elements = [];
                            var length = arguments.length;
                            var i = 0;
                            var code;
                            while (length > i) {
                                code = +arguments[i++];
                                if (toAbsoluteIndex(code, 0x10ffff) !== code)
                                    throw RangeError(
                                        code + " is not a valid code point",
                                    );
                                elements.push(
                                    code < 0x10000
                                        ? fromCharCode(code)
                                        : fromCharCode(
                                              ((code -= 0x10000) >> 10) +
                                                  0xd800,
                                              (code % 0x400) + 0xdc00,
                                          ),
                                );
                            }
                            return elements.join("");
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/to-absolute-index": 168,
            },
        ],
        319: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var notARegExp = require("../internals/not-a-regexp");
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var correctIsRegExpLogic = require("../internals/correct-is-regexp-logic");

                // `String.prototype.includes` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.includes
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: !correctIsRegExpLogic("includes"),
                    },
                    {
                        includes: function includes(
                            searchString /* , position = 0 */,
                        ) {
                            return !!~String(
                                requireObjectCoercible(this),
                            ).indexOf(
                                notARegExp(searchString),
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/correct-is-regexp-logic": 64,
                "../internals/export": 79,
                "../internals/not-a-regexp": 123,
                "../internals/require-object-coercible": 152,
            },
        ],
        320: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.italics` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.italics
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("italics"),
                    },
                    {
                        italics: function italics() {
                            return createHTML(this, "i", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        321: [
            function(require, module, exports) {
                "use strict";
                var charAt = require("../internals/string-multibyte").charAt;
                var InternalStateModule = require("../internals/internal-state");
                var defineIterator = require("../internals/define-iterator");

                var STRING_ITERATOR = "String Iterator";
                var setInternalState = InternalStateModule.set;
                var getInternalState = InternalStateModule.getterFor(
                    STRING_ITERATOR,
                );

                // `String.prototype[@@iterator]` method
                // https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
                defineIterator(
                    String,
                    "String",
                    function(iterated) {
                        setInternalState(this, {
                            type: STRING_ITERATOR,
                            string: String(iterated),
                            index: 0,
                        });
                        // `%StringIteratorPrototype%.next` method
                        // https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
                    },
                    function next() {
                        var state = getInternalState(this);
                        var string = state.string;
                        var index = state.index;
                        var point;
                        if (index >= string.length)
                            return { value: undefined, done: true };
                        point = charAt(string, index);
                        state.index += point.length;
                        return { value: point, done: false };
                    },
                );
            },
            {
                "../internals/define-iterator": 73,
                "../internals/internal-state": 101,
                "../internals/string-multibyte": 162,
            },
        ],
        322: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.link` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.link
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("link"),
                    },
                    {
                        link: function link(url) {
                            return createHTML(this, "a", "href", url);
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        323: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createIteratorConstructor = require("../internals/create-iterator-constructor");
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var toLength = require("../internals/to-length");
                var aFunction = require("../internals/a-function");
                var anObject = require("../internals/an-object");
                var classof = require("../internals/classof");
                var isRegExp = require("../internals/is-regexp");
                var getRegExpFlags = require("../internals/regexp-flags");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var fails = require("../internals/fails");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var speciesConstructor = require("../internals/species-constructor");
                var advanceStringIndex = require("../internals/advance-string-index");
                var InternalStateModule = require("../internals/internal-state");
                var IS_PURE = require("../internals/is-pure");

                var MATCH_ALL = wellKnownSymbol("matchAll");
                var REGEXP_STRING = "RegExp String";
                var REGEXP_STRING_ITERATOR = REGEXP_STRING + " Iterator";
                var setInternalState = InternalStateModule.set;
                var getInternalState = InternalStateModule.getterFor(
                    REGEXP_STRING_ITERATOR,
                );
                var RegExpPrototype = RegExp.prototype;
                var regExpBuiltinExec = RegExpPrototype.exec;
                var nativeMatchAll = "".matchAll;

                var WORKS_WITH_NON_GLOBAL_REGEX =
                    !!nativeMatchAll &&
                    !fails(function() {
                        "a".matchAll(/./);
                    });

                var regExpExec = function(R, S) {
                    var exec = R.exec;
                    var result;
                    if (typeof exec == "function") {
                        result = exec.call(R, S);
                        if (typeof result != "object")
                            throw TypeError("Incorrect exec result");
                        return result;
                    }
                    return regExpBuiltinExec.call(R, S);
                };

                // eslint-disable-next-line max-len
                var $RegExpStringIterator = createIteratorConstructor(
                    function RegExpStringIterator(
                        regexp,
                        string,
                        global,
                        fullUnicode,
                    ) {
                        setInternalState(this, {
                            type: REGEXP_STRING_ITERATOR,
                            regexp: regexp,
                            string: string,
                            global: global,
                            unicode: fullUnicode,
                            done: false,
                        });
                    },
                    REGEXP_STRING,
                    function next() {
                        var state = getInternalState(this);
                        if (state.done) return { value: undefined, done: true };
                        var R = state.regexp;
                        var S = state.string;
                        var match = regExpExec(R, S);
                        if (match === null)
                            return {
                                value: undefined,
                                done: (state.done = true),
                            };
                        if (state.global) {
                            if (String(match[0]) == "")
                                R.lastIndex = advanceStringIndex(
                                    S,
                                    toLength(R.lastIndex),
                                    state.unicode,
                                );
                            return { value: match, done: false };
                        }
                        state.done = true;
                        return { value: match, done: false };
                    },
                );

                var $matchAll = function(string) {
                    var R = anObject(this);
                    var S = String(string);
                    var C, flagsValue, flags, matcher, global, fullUnicode;
                    C = speciesConstructor(R, RegExp);
                    flagsValue = R.flags;
                    if (
                        flagsValue === undefined &&
                        R instanceof RegExp &&
                        !("flags" in RegExpPrototype)
                    ) {
                        flagsValue = getRegExpFlags.call(R);
                    }
                    flags = flagsValue === undefined ? "" : String(flagsValue);
                    matcher = new C(C === RegExp ? R.source : R, flags);
                    global = !!~flags.indexOf("g");
                    fullUnicode = !!~flags.indexOf("u");
                    matcher.lastIndex = toLength(R.lastIndex);
                    return new $RegExpStringIterator(
                        matcher,
                        S,
                        global,
                        fullUnicode,
                    );
                };

                // `String.prototype.matchAll` method
                // https://github.com/tc39/proposal-string-matchall
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: WORKS_WITH_NON_GLOBAL_REGEX,
                    },
                    {
                        matchAll: function matchAll(regexp) {
                            var O = requireObjectCoercible(this);
                            var flags, S, matcher, rx;
                            if (regexp != null) {
                                if (isRegExp(regexp)) {
                                    flags = String(
                                        requireObjectCoercible(
                                            "flags" in RegExpPrototype
                                                ? regexp.flags
                                                : getRegExpFlags.call(regexp),
                                        ),
                                    );
                                    if (!~flags.indexOf("g"))
                                        throw TypeError(
                                            "`.matchAll` does not allow non-global regexes",
                                        );
                                }
                                if (WORKS_WITH_NON_GLOBAL_REGEX)
                                    return nativeMatchAll.apply(O, arguments);
                                matcher = regexp[MATCH_ALL];
                                if (
                                    matcher === undefined &&
                                    IS_PURE &&
                                    classof(regexp) == "RegExp"
                                )
                                    matcher = $matchAll;
                                if (matcher != null)
                                    return aFunction(matcher).call(regexp, O);
                            } else if (WORKS_WITH_NON_GLOBAL_REGEX)
                                return nativeMatchAll.apply(O, arguments);
                            S = String(O);
                            rx = new RegExp(regexp, "g");
                            return IS_PURE
                                ? $matchAll.call(rx, S)
                                : rx[MATCH_ALL](S);
                        },
                    },
                );

                IS_PURE ||
                    MATCH_ALL in RegExpPrototype ||
                    createNonEnumerableProperty(
                        RegExpPrototype,
                        MATCH_ALL,
                        $matchAll,
                    );
            },
            {
                "../internals/a-function": 37,
                "../internals/advance-string-index": 40,
                "../internals/an-object": 42,
                "../internals/classof": 59,
                "../internals/create-iterator-constructor": 67,
                "../internals/create-non-enumerable-property": 68,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/internal-state": 101,
                "../internals/is-pure": 108,
                "../internals/is-regexp": 109,
                "../internals/regexp-flags": 151,
                "../internals/require-object-coercible": 152,
                "../internals/species-constructor": 161,
                "../internals/to-length": 172,
                "../internals/well-known-symbol": 184,
            },
        ],
        324: [
            function(require, module, exports) {
                "use strict";
                var fixRegExpWellKnownSymbolLogic = require("../internals/fix-regexp-well-known-symbol-logic");
                var anObject = require("../internals/an-object");
                var toLength = require("../internals/to-length");
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var advanceStringIndex = require("../internals/advance-string-index");
                var regExpExec = require("../internals/regexp-exec-abstract");

                // @@match logic
                fixRegExpWellKnownSymbolLogic("match", 1, function(
                    MATCH,
                    nativeMatch,
                    maybeCallNative,
                ) {
                    return [
                        // `String.prototype.match` method
                        // https://tc39.github.io/ecma262/#sec-string.prototype.match
                        function match(regexp) {
                            var O = requireObjectCoercible(this);
                            var matcher =
                                regexp == undefined ? undefined : regexp[MATCH];
                            return matcher !== undefined
                                ? matcher.call(regexp, O)
                                : new RegExp(regexp)[MATCH](String(O));
                        },
                        // `RegExp.prototype[@@match]` method
                        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
                        function(regexp) {
                            var res = maybeCallNative(
                                nativeMatch,
                                regexp,
                                this,
                            );
                            if (res.done) return res.value;

                            var rx = anObject(regexp);
                            var S = String(this);

                            if (!rx.global) return regExpExec(rx, S);

                            var fullUnicode = rx.unicode;
                            rx.lastIndex = 0;
                            var A = [];
                            var n = 0;
                            var result;
                            while ((result = regExpExec(rx, S)) !== null) {
                                var matchStr = String(result[0]);
                                A[n] = matchStr;
                                if (matchStr === "")
                                    rx.lastIndex = advanceStringIndex(
                                        S,
                                        toLength(rx.lastIndex),
                                        fullUnicode,
                                    );
                                n++;
                            }
                            return n === 0 ? null : A;
                        },
                    ];
                });
            },
            {
                "../internals/advance-string-index": 40,
                "../internals/an-object": 42,
                "../internals/fix-regexp-well-known-symbol-logic": 81,
                "../internals/regexp-exec-abstract": 149,
                "../internals/require-object-coercible": 152,
                "../internals/to-length": 172,
            },
        ],
        325: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $padEnd = require("../internals/string-pad").end;
                var WEBKIT_BUG = require("../internals/webkit-string-pad-bug");

                // `String.prototype.padEnd` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.padend
                $(
                    { target: "String", proto: true, forced: WEBKIT_BUG },
                    {
                        padEnd: function padEnd(
                            maxLength /* , fillString = ' ' */,
                        ) {
                            return $padEnd(
                                this,
                                maxLength,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/string-pad": 163,
                "../internals/webkit-string-pad-bug": 183,
            },
        ],
        326: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $padStart = require("../internals/string-pad").start;
                var WEBKIT_BUG = require("../internals/webkit-string-pad-bug");

                // `String.prototype.padStart` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
                $(
                    { target: "String", proto: true, forced: WEBKIT_BUG },
                    {
                        padStart: function padStart(
                            maxLength /* , fillString = ' ' */,
                        ) {
                            return $padStart(
                                this,
                                maxLength,
                                arguments.length > 1 ? arguments[1] : undefined,
                            );
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/string-pad": 163,
                "../internals/webkit-string-pad-bug": 183,
            },
        ],
        327: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var toIndexedObject = require("../internals/to-indexed-object");
                var toLength = require("../internals/to-length");

                // `String.raw` method
                // https://tc39.github.io/ecma262/#sec-string.raw
                $(
                    { target: "String", stat: true },
                    {
                        raw: function raw(template) {
                            var rawTemplate = toIndexedObject(template.raw);
                            var literalSegments = toLength(rawTemplate.length);
                            var argumentsLength = arguments.length;
                            var elements = [];
                            var i = 0;
                            while (literalSegments > i) {
                                elements.push(String(rawTemplate[i++]));
                                if (i < argumentsLength)
                                    elements.push(String(arguments[i]));
                            }
                            return elements.join("");
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/to-indexed-object": 170,
                "../internals/to-length": 172,
            },
        ],
        328: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var repeat = require("../internals/string-repeat");

                // `String.prototype.repeat` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.repeat
                $(
                    { target: "String", proto: true },
                    {
                        repeat: repeat,
                    },
                );
            },
            { "../internals/export": 79, "../internals/string-repeat": 164 },
        ],
        329: [
            function(require, module, exports) {
                "use strict";
                var fixRegExpWellKnownSymbolLogic = require("../internals/fix-regexp-well-known-symbol-logic");
                var anObject = require("../internals/an-object");
                var toObject = require("../internals/to-object");
                var toLength = require("../internals/to-length");
                var toInteger = require("../internals/to-integer");
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var advanceStringIndex = require("../internals/advance-string-index");
                var regExpExec = require("../internals/regexp-exec-abstract");

                var max = Math.max;
                var min = Math.min;
                var floor = Math.floor;
                var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
                var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

                var maybeToString = function(it) {
                    return it === undefined ? it : String(it);
                };

                // @@replace logic
                fixRegExpWellKnownSymbolLogic("replace", 2, function(
                    REPLACE,
                    nativeReplace,
                    maybeCallNative,
                ) {
                    return [
                        // `String.prototype.replace` method
                        // https://tc39.github.io/ecma262/#sec-string.prototype.replace
                        function replace(searchValue, replaceValue) {
                            var O = requireObjectCoercible(this);
                            var replacer =
                                searchValue == undefined
                                    ? undefined
                                    : searchValue[REPLACE];
                            return replacer !== undefined
                                ? replacer.call(searchValue, O, replaceValue)
                                : nativeReplace.call(
                                      String(O),
                                      searchValue,
                                      replaceValue,
                                  );
                        },
                        // `RegExp.prototype[@@replace]` method
                        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
                        function(regexp, replaceValue) {
                            var res = maybeCallNative(
                                nativeReplace,
                                regexp,
                                this,
                                replaceValue,
                            );
                            if (res.done) return res.value;

                            var rx = anObject(regexp);
                            var S = String(this);

                            var functionalReplace =
                                typeof replaceValue === "function";
                            if (!functionalReplace)
                                replaceValue = String(replaceValue);

                            var global = rx.global;
                            if (global) {
                                var fullUnicode = rx.unicode;
                                rx.lastIndex = 0;
                            }
                            var results = [];
                            while (true) {
                                var result = regExpExec(rx, S);
                                if (result === null) break;

                                results.push(result);
                                if (!global) break;

                                var matchStr = String(result[0]);
                                if (matchStr === "")
                                    rx.lastIndex = advanceStringIndex(
                                        S,
                                        toLength(rx.lastIndex),
                                        fullUnicode,
                                    );
                            }

                            var accumulatedResult = "";
                            var nextSourcePosition = 0;
                            for (var i = 0; i < results.length; i++) {
                                result = results[i];

                                var matched = String(result[0]);
                                var position = max(
                                    min(toInteger(result.index), S.length),
                                    0,
                                );
                                var captures = [];
                                // NOTE: This is equivalent to
                                //   captures = result.slice(1).map(maybeToString)
                                // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                                // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                                // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                                for (var j = 1; j < result.length; j++)
                                    captures.push(maybeToString(result[j]));
                                var namedCaptures = result.groups;
                                if (functionalReplace) {
                                    var replacerArgs = [matched].concat(
                                        captures,
                                        position,
                                        S,
                                    );
                                    if (namedCaptures !== undefined)
                                        replacerArgs.push(namedCaptures);
                                    var replacement = String(
                                        replaceValue.apply(
                                            undefined,
                                            replacerArgs,
                                        ),
                                    );
                                } else {
                                    replacement = getSubstitution(
                                        matched,
                                        S,
                                        position,
                                        captures,
                                        namedCaptures,
                                        replaceValue,
                                    );
                                }
                                if (position >= nextSourcePosition) {
                                    accumulatedResult +=
                                        S.slice(nextSourcePosition, position) +
                                        replacement;
                                    nextSourcePosition =
                                        position + matched.length;
                                }
                            }
                            return (
                                accumulatedResult + S.slice(nextSourcePosition)
                            );
                        },
                    ];

                    // https://tc39.github.io/ecma262/#sec-getsubstitution
                    function getSubstitution(
                        matched,
                        str,
                        position,
                        captures,
                        namedCaptures,
                        replacement,
                    ) {
                        var tailPos = position + matched.length;
                        var m = captures.length;
                        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
                        if (namedCaptures !== undefined) {
                            namedCaptures = toObject(namedCaptures);
                            symbols = SUBSTITUTION_SYMBOLS;
                        }
                        return nativeReplace.call(
                            replacement,
                            symbols,
                            function(match, ch) {
                                var capture;
                                switch (ch.charAt(0)) {
                                    case "$":
                                        return "$";
                                    case "&":
                                        return matched;
                                    case "`":
                                        return str.slice(0, position);
                                    case "'":
                                        return str.slice(tailPos);
                                    case "<":
                                        capture =
                                            namedCaptures[ch.slice(1, -1)];
                                        break;
                                    default:
                                        // \d\d?
                                        var n = +ch;
                                        if (n === 0) return match;
                                        if (n > m) {
                                            var f = floor(n / 10);
                                            if (f === 0) return match;
                                            if (f <= m)
                                                return captures[f - 1] ===
                                                    undefined
                                                    ? ch.charAt(1)
                                                    : captures[f - 1] +
                                                          ch.charAt(1);
                                            return match;
                                        }
                                        capture = captures[n - 1];
                                }
                                return capture === undefined ? "" : capture;
                            },
                        );
                    }
                });
            },
            {
                "../internals/advance-string-index": 40,
                "../internals/an-object": 42,
                "../internals/fix-regexp-well-known-symbol-logic": 81,
                "../internals/regexp-exec-abstract": 149,
                "../internals/require-object-coercible": 152,
                "../internals/to-integer": 171,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
            },
        ],
        330: [
            function(require, module, exports) {
                "use strict";
                var fixRegExpWellKnownSymbolLogic = require("../internals/fix-regexp-well-known-symbol-logic");
                var anObject = require("../internals/an-object");
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var sameValue = require("../internals/same-value");
                var regExpExec = require("../internals/regexp-exec-abstract");

                // @@search logic
                fixRegExpWellKnownSymbolLogic("search", 1, function(
                    SEARCH,
                    nativeSearch,
                    maybeCallNative,
                ) {
                    return [
                        // `String.prototype.search` method
                        // https://tc39.github.io/ecma262/#sec-string.prototype.search
                        function search(regexp) {
                            var O = requireObjectCoercible(this);
                            var searcher =
                                regexp == undefined
                                    ? undefined
                                    : regexp[SEARCH];
                            return searcher !== undefined
                                ? searcher.call(regexp, O)
                                : new RegExp(regexp)[SEARCH](String(O));
                        },
                        // `RegExp.prototype[@@search]` method
                        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
                        function(regexp) {
                            var res = maybeCallNative(
                                nativeSearch,
                                regexp,
                                this,
                            );
                            if (res.done) return res.value;

                            var rx = anObject(regexp);
                            var S = String(this);

                            var previousLastIndex = rx.lastIndex;
                            if (!sameValue(previousLastIndex, 0))
                                rx.lastIndex = 0;
                            var result = regExpExec(rx, S);
                            if (!sameValue(rx.lastIndex, previousLastIndex))
                                rx.lastIndex = previousLastIndex;
                            return result === null ? -1 : result.index;
                        },
                    ];
                });
            },
            {
                "../internals/an-object": 42,
                "../internals/fix-regexp-well-known-symbol-logic": 81,
                "../internals/regexp-exec-abstract": 149,
                "../internals/require-object-coercible": 152,
                "../internals/same-value": 153,
            },
        ],
        331: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.small` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.small
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("small"),
                    },
                    {
                        small: function small() {
                            return createHTML(this, "small", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        332: [
            function(require, module, exports) {
                "use strict";
                var fixRegExpWellKnownSymbolLogic = require("../internals/fix-regexp-well-known-symbol-logic");
                var isRegExp = require("../internals/is-regexp");
                var anObject = require("../internals/an-object");
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var speciesConstructor = require("../internals/species-constructor");
                var advanceStringIndex = require("../internals/advance-string-index");
                var toLength = require("../internals/to-length");
                var callRegExpExec = require("../internals/regexp-exec-abstract");
                var regexpExec = require("../internals/regexp-exec");
                var fails = require("../internals/fails");

                var arrayPush = [].push;
                var min = Math.min;
                var MAX_UINT32 = 0xffffffff;

                // babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
                var SUPPORTS_Y = !fails(function() {
                    return !RegExp(MAX_UINT32, "y");
                });

                // @@split logic
                fixRegExpWellKnownSymbolLogic(
                    "split",
                    2,
                    function(SPLIT, nativeSplit, maybeCallNative) {
                        var internalSplit;
                        if (
                            "abbc".split(/(b)*/)[1] == "c" ||
                            "test".split(/(?:)/, -1).length != 4 ||
                            "ab".split(/(?:ab)*/).length != 2 ||
                            ".".split(/(.?)(.?)/).length != 4 ||
                            ".".split(/()()/).length > 1 ||
                            "".split(/.?/).length
                        ) {
                            // based on es5-shim implementation, need to rework it
                            internalSplit = function(separator, limit) {
                                var string = String(
                                    requireObjectCoercible(this),
                                );
                                var lim =
                                    limit === undefined
                                        ? MAX_UINT32
                                        : limit >>> 0;
                                if (lim === 0) return [];
                                if (separator === undefined) return [string];
                                // If `separator` is not a regex, use native split
                                if (!isRegExp(separator)) {
                                    return nativeSplit.call(
                                        string,
                                        separator,
                                        lim,
                                    );
                                }
                                var output = [];
                                var flags =
                                    (separator.ignoreCase ? "i" : "") +
                                    (separator.multiline ? "m" : "") +
                                    (separator.unicode ? "u" : "") +
                                    (separator.sticky ? "y" : "");
                                var lastLastIndex = 0;
                                // Make `global` and avoid `lastIndex` issues by working with a copy
                                var separatorCopy = new RegExp(
                                    separator.source,
                                    flags + "g",
                                );
                                var match, lastIndex, lastLength;
                                while (
                                    (match = regexpExec.call(
                                        separatorCopy,
                                        string,
                                    ))
                                ) {
                                    lastIndex = separatorCopy.lastIndex;
                                    if (lastIndex > lastLastIndex) {
                                        output.push(
                                            string.slice(
                                                lastLastIndex,
                                                match.index,
                                            ),
                                        );
                                        if (
                                            match.length > 1 &&
                                            match.index < string.length
                                        )
                                            arrayPush.apply(
                                                output,
                                                match.slice(1),
                                            );
                                        lastLength = match[0].length;
                                        lastLastIndex = lastIndex;
                                        if (output.length >= lim) break;
                                    }
                                    if (separatorCopy.lastIndex === match.index)
                                        separatorCopy.lastIndex++; // Avoid an infinite loop
                                }
                                if (lastLastIndex === string.length) {
                                    if (lastLength || !separatorCopy.test(""))
                                        output.push("");
                                } else output.push(string.slice(lastLastIndex));
                                return output.length > lim
                                    ? output.slice(0, lim)
                                    : output;
                            };
                            // Chakra, V8
                        } else if ("0".split(undefined, 0).length) {
                            internalSplit = function(separator, limit) {
                                return separator === undefined && limit === 0
                                    ? []
                                    : nativeSplit.call(this, separator, limit);
                            };
                        } else internalSplit = nativeSplit;

                        return [
                            // `String.prototype.split` method
                            // https://tc39.github.io/ecma262/#sec-string.prototype.split
                            function split(separator, limit) {
                                var O = requireObjectCoercible(this);
                                var splitter =
                                    separator == undefined
                                        ? undefined
                                        : separator[SPLIT];
                                return splitter !== undefined
                                    ? splitter.call(separator, O, limit)
                                    : internalSplit.call(
                                          String(O),
                                          separator,
                                          limit,
                                      );
                            },
                            // `RegExp.prototype[@@split]` method
                            // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
                            //
                            // NOTE: This cannot be properly polyfilled in engines that don't support
                            // the 'y' flag.
                            function(regexp, limit) {
                                var res = maybeCallNative(
                                    internalSplit,
                                    regexp,
                                    this,
                                    limit,
                                    internalSplit !== nativeSplit,
                                );
                                if (res.done) return res.value;

                                var rx = anObject(regexp);
                                var S = String(this);
                                var C = speciesConstructor(rx, RegExp);

                                var unicodeMatching = rx.unicode;
                                var flags =
                                    (rx.ignoreCase ? "i" : "") +
                                    (rx.multiline ? "m" : "") +
                                    (rx.unicode ? "u" : "") +
                                    (SUPPORTS_Y ? "y" : "g");

                                // ^(? + rx + ) is needed, in combination with some S slicing, to
                                // simulate the 'y' flag.
                                var splitter = new C(
                                    SUPPORTS_Y ? rx : "^(?:" + rx.source + ")",
                                    flags,
                                );
                                var lim =
                                    limit === undefined
                                        ? MAX_UINT32
                                        : limit >>> 0;
                                if (lim === 0) return [];
                                if (S.length === 0)
                                    return callRegExpExec(splitter, S) === null
                                        ? [S]
                                        : [];
                                var p = 0;
                                var q = 0;
                                var A = [];
                                while (q < S.length) {
                                    splitter.lastIndex = SUPPORTS_Y ? q : 0;
                                    var z = callRegExpExec(
                                        splitter,
                                        SUPPORTS_Y ? S : S.slice(q),
                                    );
                                    var e;
                                    if (
                                        z === null ||
                                        (e = min(
                                            toLength(
                                                splitter.lastIndex +
                                                    (SUPPORTS_Y ? 0 : q),
                                            ),
                                            S.length,
                                        )) === p
                                    ) {
                                        q = advanceStringIndex(
                                            S,
                                            q,
                                            unicodeMatching,
                                        );
                                    } else {
                                        A.push(S.slice(p, q));
                                        if (A.length === lim) return A;
                                        for (
                                            var i = 1;
                                            i <= z.length - 1;
                                            i++
                                        ) {
                                            A.push(z[i]);
                                            if (A.length === lim) return A;
                                        }
                                        q = p = e;
                                    }
                                }
                                A.push(S.slice(p));
                                return A;
                            },
                        ];
                    },
                    !SUPPORTS_Y,
                );
            },
            {
                "../internals/advance-string-index": 40,
                "../internals/an-object": 42,
                "../internals/fails": 80,
                "../internals/fix-regexp-well-known-symbol-logic": 81,
                "../internals/is-regexp": 109,
                "../internals/regexp-exec": 150,
                "../internals/regexp-exec-abstract": 149,
                "../internals/require-object-coercible": 152,
                "../internals/species-constructor": 161,
                "../internals/to-length": 172,
            },
        ],
        333: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var toLength = require("../internals/to-length");
                var notARegExp = require("../internals/not-a-regexp");
                var requireObjectCoercible = require("../internals/require-object-coercible");
                var correctIsRegExpLogic = require("../internals/correct-is-regexp-logic");

                var nativeStartsWith = "".startsWith;
                var min = Math.min;

                // `String.prototype.startsWith` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.startswith
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: !correctIsRegExpLogic("startsWith"),
                    },
                    {
                        startsWith: function startsWith(
                            searchString /* , position = 0 */,
                        ) {
                            var that = String(requireObjectCoercible(this));
                            notARegExp(searchString);
                            var index = toLength(
                                min(
                                    arguments.length > 1
                                        ? arguments[1]
                                        : undefined,
                                    that.length,
                                ),
                            );
                            var search = String(searchString);
                            return nativeStartsWith
                                ? nativeStartsWith.call(that, search, index)
                                : that.slice(index, index + search.length) ===
                                      search;
                        },
                    },
                );
            },
            {
                "../internals/correct-is-regexp-logic": 64,
                "../internals/export": 79,
                "../internals/not-a-regexp": 123,
                "../internals/require-object-coercible": 152,
                "../internals/to-length": 172,
            },
        ],
        334: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.strike` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.strike
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("strike"),
                    },
                    {
                        strike: function strike() {
                            return createHTML(this, "strike", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        335: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.sub` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.sub
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("sub"),
                    },
                    {
                        sub: function sub() {
                            return createHTML(this, "sub", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        336: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var createHTML = require("../internals/create-html");
                var forcedStringHTMLMethod = require("../internals/forced-string-html-method");

                // `String.prototype.sup` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.sup
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringHTMLMethod("sup"),
                    },
                    {
                        sup: function sup() {
                            return createHTML(this, "sup", "", "");
                        },
                    },
                );
            },
            {
                "../internals/create-html": 66,
                "../internals/export": 79,
                "../internals/forced-string-html-method": 84,
            },
        ],
        337: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $trimEnd = require("../internals/string-trim").end;
                var forcedStringTrimMethod = require("../internals/forced-string-trim-method");

                var FORCED = forcedStringTrimMethod("trimEnd");

                var trimEnd = FORCED
                    ? function trimEnd() {
                          return $trimEnd(this);
                      }
                    : "".trimEnd;

                // `String.prototype.{ trimEnd, trimRight }` methods
                // https://github.com/tc39/ecmascript-string-left-right-trim
                $(
                    { target: "String", proto: true, forced: FORCED },
                    {
                        trimEnd: trimEnd,
                        trimRight: trimEnd,
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/forced-string-trim-method": 85,
                "../internals/string-trim": 165,
            },
        ],
        338: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $trimStart = require("../internals/string-trim").start;
                var forcedStringTrimMethod = require("../internals/forced-string-trim-method");

                var FORCED = forcedStringTrimMethod("trimStart");

                var trimStart = FORCED
                    ? function trimStart() {
                          return $trimStart(this);
                      }
                    : "".trimStart;

                // `String.prototype.{ trimStart, trimLeft }` methods
                // https://github.com/tc39/ecmascript-string-left-right-trim
                $(
                    { target: "String", proto: true, forced: FORCED },
                    {
                        trimStart: trimStart,
                        trimLeft: trimStart,
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/forced-string-trim-method": 85,
                "../internals/string-trim": 165,
            },
        ],
        339: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var $trim = require("../internals/string-trim").trim;
                var forcedStringTrimMethod = require("../internals/forced-string-trim-method");

                // `String.prototype.trim` method
                // https://tc39.github.io/ecma262/#sec-string.prototype.trim
                $(
                    {
                        target: "String",
                        proto: true,
                        forced: forcedStringTrimMethod("trim"),
                    },
                    {
                        trim: function trim() {
                            return $trim(this);
                        },
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/forced-string-trim-method": 85,
                "../internals/string-trim": 165,
            },
        ],
        340: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.asyncIterator` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.asynciterator
                defineWellKnownSymbol("asyncIterator");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        341: [
            function(require, module, exports) {
                // `Symbol.prototype.description` getter
                // https://tc39.github.io/ecma262/#sec-symbol.prototype.description
                "use strict";
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var global = require("../internals/global");
                var has = require("../internals/has");
                var isObject = require("../internals/is-object");
                var defineProperty = require("../internals/object-define-property")
                    .f;
                var copyConstructorProperties = require("../internals/copy-constructor-properties");

                var NativeSymbol = global.Symbol;

                if (
                    DESCRIPTORS &&
                    typeof NativeSymbol == "function" &&
                    (!("description" in NativeSymbol.prototype) ||
                        // Safari 12 bug
                        NativeSymbol().description !== undefined)
                ) {
                    var EmptyStringDescriptionStore = {};
                    // wrap Symbol constructor for correct work with undefined description
                    var SymbolWrapper = function Symbol() {
                        var description =
                            arguments.length < 1 || arguments[0] === undefined
                                ? undefined
                                : String(arguments[0]);
                        var result =
                            this instanceof SymbolWrapper
                                ? new NativeSymbol(description)
                                : // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
                                description === undefined
                                ? NativeSymbol()
                                : NativeSymbol(description);
                        if (description === "")
                            EmptyStringDescriptionStore[result] = true;
                        return result;
                    };
                    copyConstructorProperties(SymbolWrapper, NativeSymbol);
                    var symbolPrototype = (SymbolWrapper.prototype =
                        NativeSymbol.prototype);
                    symbolPrototype.constructor = SymbolWrapper;

                    var symbolToString = symbolPrototype.toString;
                    var native = String(NativeSymbol("test")) == "Symbol(test)";
                    var regexp = /^Symbol\((.*)\)[^)]+$/;
                    defineProperty(symbolPrototype, "description", {
                        configurable: true,
                        get: function description() {
                            var symbol = isObject(this) ? this.valueOf() : this;
                            var string = symbolToString.call(symbol);
                            if (has(EmptyStringDescriptionStore, symbol))
                                return "";
                            var desc = native
                                ? string.slice(7, -1)
                                : string.replace(regexp, "$1");
                            return desc === "" ? undefined : desc;
                        },
                    });

                    $(
                        { global: true, forced: true },
                        {
                            Symbol: SymbolWrapper,
                        },
                    );
                }
            },
            {
                "../internals/copy-constructor-properties": 63,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/global": 92,
                "../internals/has": 93,
                "../internals/is-object": 107,
                "../internals/object-define-property": 128,
            },
        ],
        342: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.hasInstance` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.hasinstance
                defineWellKnownSymbol("hasInstance");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        343: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.isConcatSpreadable` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
                defineWellKnownSymbol("isConcatSpreadable");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        344: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.iterator` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.iterator
                defineWellKnownSymbol("iterator");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        345: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");
                var global = require("../internals/global");
                var getBuiltIn = require("../internals/get-built-in");
                var IS_PURE = require("../internals/is-pure");
                var DESCRIPTORS = require("../internals/descriptors");
                var NATIVE_SYMBOL = require("../internals/native-symbol");
                var fails = require("../internals/fails");
                var has = require("../internals/has");
                var isArray = require("../internals/is-array");
                var isObject = require("../internals/is-object");
                var anObject = require("../internals/an-object");
                var toObject = require("../internals/to-object");
                var toIndexedObject = require("../internals/to-indexed-object");
                var toPrimitive = require("../internals/to-primitive");
                var createPropertyDescriptor = require("../internals/create-property-descriptor");
                var nativeObjectCreate = require("../internals/object-create");
                var objectKeys = require("../internals/object-keys");
                var getOwnPropertyNamesModule = require("../internals/object-get-own-property-names");
                var getOwnPropertyNamesExternal = require("../internals/object-get-own-property-names-external");
                var getOwnPropertySymbolsModule = require("../internals/object-get-own-property-symbols");
                var getOwnPropertyDescriptorModule = require("../internals/object-get-own-property-descriptor");
                var definePropertyModule = require("../internals/object-define-property");
                var propertyIsEnumerableModule = require("../internals/object-property-is-enumerable");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var redefine = require("../internals/redefine");
                var shared = require("../internals/shared");
                var sharedKey = require("../internals/shared-key");
                var hiddenKeys = require("../internals/hidden-keys");
                var uid = require("../internals/uid");
                var wellKnownSymbol = require("../internals/well-known-symbol");
                var wrappedWellKnownSymbolModule = require("../internals/wrapped-well-known-symbol");
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");
                var setToStringTag = require("../internals/set-to-string-tag");
                var InternalStateModule = require("../internals/internal-state");
                var $forEach = require("../internals/array-iteration").forEach;

                var HIDDEN = sharedKey("hidden");
                var SYMBOL = "Symbol";
                var PROTOTYPE = "prototype";
                var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
                var setInternalState = InternalStateModule.set;
                var getInternalState = InternalStateModule.getterFor(SYMBOL);
                var ObjectPrototype = Object[PROTOTYPE];
                var $Symbol = global.Symbol;
                var $stringify = getBuiltIn("JSON", "stringify");
                var nativeGetOwnPropertyDescriptor =
                    getOwnPropertyDescriptorModule.f;
                var nativeDefineProperty = definePropertyModule.f;
                var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
                var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
                var AllSymbols = shared("symbols");
                var ObjectPrototypeSymbols = shared("op-symbols");
                var StringToSymbolRegistry = shared(
                    "string-to-symbol-registry",
                );
                var SymbolToStringRegistry = shared(
                    "symbol-to-string-registry",
                );
                var WellKnownSymbolsStore = shared("wks");
                var QObject = global.QObject;
                // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
                var USE_SETTER =
                    !QObject ||
                    !QObject[PROTOTYPE] ||
                    !QObject[PROTOTYPE].findChild;

                // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
                var setSymbolDescriptor =
                    DESCRIPTORS &&
                    fails(function() {
                        return (
                            nativeObjectCreate(
                                nativeDefineProperty({}, "a", {
                                    get: function() {
                                        return nativeDefineProperty(this, "a", {
                                            value: 7,
                                        }).a;
                                    },
                                }),
                            ).a != 7
                        );
                    })
                        ? function(O, P, Attributes) {
                              var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(
                                  ObjectPrototype,
                                  P,
                              );
                              if (ObjectPrototypeDescriptor)
                                  delete ObjectPrototype[P];
                              nativeDefineProperty(O, P, Attributes);
                              if (
                                  ObjectPrototypeDescriptor &&
                                  O !== ObjectPrototype
                              ) {
                                  nativeDefineProperty(
                                      ObjectPrototype,
                                      P,
                                      ObjectPrototypeDescriptor,
                                  );
                              }
                          }
                        : nativeDefineProperty;

                var wrap = function(tag, description) {
                    var symbol = (AllSymbols[tag] = nativeObjectCreate(
                        $Symbol[PROTOTYPE],
                    ));
                    setInternalState(symbol, {
                        type: SYMBOL,
                        tag: tag,
                        description: description,
                    });
                    if (!DESCRIPTORS) symbol.description = description;
                    return symbol;
                };

                var isSymbol =
                    NATIVE_SYMBOL && typeof $Symbol.iterator == "symbol"
                        ? function(it) {
                              return typeof it == "symbol";
                          }
                        : function(it) {
                              return Object(it) instanceof $Symbol;
                          };

                var $defineProperty = function defineProperty(
                    O,
                    P,
                    Attributes,
                ) {
                    if (O === ObjectPrototype)
                        $defineProperty(ObjectPrototypeSymbols, P, Attributes);
                    anObject(O);
                    var key = toPrimitive(P, true);
                    anObject(Attributes);
                    if (has(AllSymbols, key)) {
                        if (!Attributes.enumerable) {
                            if (!has(O, HIDDEN))
                                nativeDefineProperty(
                                    O,
                                    HIDDEN,
                                    createPropertyDescriptor(1, {}),
                                );
                            O[HIDDEN][key] = true;
                        } else {
                            if (has(O, HIDDEN) && O[HIDDEN][key])
                                O[HIDDEN][key] = false;
                            Attributes = nativeObjectCreate(Attributes, {
                                enumerable: createPropertyDescriptor(0, false),
                            });
                        }
                        return setSymbolDescriptor(O, key, Attributes);
                    }
                    return nativeDefineProperty(O, key, Attributes);
                };

                var $defineProperties = function defineProperties(
                    O,
                    Properties,
                ) {
                    anObject(O);
                    var properties = toIndexedObject(Properties);
                    var keys = objectKeys(properties).concat(
                        $getOwnPropertySymbols(properties),
                    );
                    $forEach(keys, function(key) {
                        if (
                            !DESCRIPTORS ||
                            $propertyIsEnumerable.call(properties, key)
                        )
                            $defineProperty(O, key, properties[key]);
                    });
                    return O;
                };

                var $create = function create(O, Properties) {
                    return Properties === undefined
                        ? nativeObjectCreate(O)
                        : $defineProperties(nativeObjectCreate(O), Properties);
                };

                var $propertyIsEnumerable = function propertyIsEnumerable(V) {
                    var P = toPrimitive(V, true);
                    var enumerable = nativePropertyIsEnumerable.call(this, P);
                    if (
                        this === ObjectPrototype &&
                        has(AllSymbols, P) &&
                        !has(ObjectPrototypeSymbols, P)
                    )
                        return false;
                    return enumerable ||
                        !has(this, P) ||
                        !has(AllSymbols, P) ||
                        (has(this, HIDDEN) && this[HIDDEN][P])
                        ? enumerable
                        : true;
                };

                var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(
                    O,
                    P,
                ) {
                    var it = toIndexedObject(O);
                    var key = toPrimitive(P, true);
                    if (
                        it === ObjectPrototype &&
                        has(AllSymbols, key) &&
                        !has(ObjectPrototypeSymbols, key)
                    )
                        return;
                    var descriptor = nativeGetOwnPropertyDescriptor(it, key);
                    if (
                        descriptor &&
                        has(AllSymbols, key) &&
                        !(has(it, HIDDEN) && it[HIDDEN][key])
                    ) {
                        descriptor.enumerable = true;
                    }
                    return descriptor;
                };

                var $getOwnPropertyNames = function getOwnPropertyNames(O) {
                    var names = nativeGetOwnPropertyNames(toIndexedObject(O));
                    var result = [];
                    $forEach(names, function(key) {
                        if (!has(AllSymbols, key) && !has(hiddenKeys, key))
                            result.push(key);
                    });
                    return result;
                };

                var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
                    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
                    var names = nativeGetOwnPropertyNames(
                        IS_OBJECT_PROTOTYPE
                            ? ObjectPrototypeSymbols
                            : toIndexedObject(O),
                    );
                    var result = [];
                    $forEach(names, function(key) {
                        if (
                            has(AllSymbols, key) &&
                            (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))
                        ) {
                            result.push(AllSymbols[key]);
                        }
                    });
                    return result;
                };

                // `Symbol` constructor
                // https://tc39.github.io/ecma262/#sec-symbol-constructor
                if (!NATIVE_SYMBOL) {
                    $Symbol = function Symbol() {
                        if (this instanceof $Symbol)
                            throw TypeError("Symbol is not a constructor");
                        var description =
                            !arguments.length || arguments[0] === undefined
                                ? undefined
                                : String(arguments[0]);
                        var tag = uid(description);
                        var setter = function(value) {
                            if (this === ObjectPrototype)
                                setter.call(ObjectPrototypeSymbols, value);
                            if (has(this, HIDDEN) && has(this[HIDDEN], tag))
                                this[HIDDEN][tag] = false;
                            setSymbolDescriptor(
                                this,
                                tag,
                                createPropertyDescriptor(1, value),
                            );
                        };
                        if (DESCRIPTORS && USE_SETTER)
                            setSymbolDescriptor(ObjectPrototype, tag, {
                                configurable: true,
                                set: setter,
                            });
                        return wrap(tag, description);
                    };

                    redefine(
                        $Symbol[PROTOTYPE],
                        "toString",
                        function toString() {
                            return getInternalState(this).tag;
                        },
                    );

                    propertyIsEnumerableModule.f = $propertyIsEnumerable;
                    definePropertyModule.f = $defineProperty;
                    getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
                    getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
                    getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

                    if (DESCRIPTORS) {
                        // https://github.com/tc39/proposal-Symbol-description
                        nativeDefineProperty(
                            $Symbol[PROTOTYPE],
                            "description",
                            {
                                configurable: true,
                                get: function description() {
                                    return getInternalState(this).description;
                                },
                            },
                        );
                        if (!IS_PURE) {
                            redefine(
                                ObjectPrototype,
                                "propertyIsEnumerable",
                                $propertyIsEnumerable,
                                { unsafe: true },
                            );
                        }
                    }

                    wrappedWellKnownSymbolModule.f = function(name) {
                        return wrap(wellKnownSymbol(name), name);
                    };
                }

                $(
                    {
                        global: true,
                        wrap: true,
                        forced: !NATIVE_SYMBOL,
                        sham: !NATIVE_SYMBOL,
                    },
                    {
                        Symbol: $Symbol,
                    },
                );

                $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
                    defineWellKnownSymbol(name);
                });

                $(
                    { target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL },
                    {
                        // `Symbol.for` method
                        // https://tc39.github.io/ecma262/#sec-symbol.for
                        for: function(key) {
                            var string = String(key);
                            if (has(StringToSymbolRegistry, string))
                                return StringToSymbolRegistry[string];
                            var symbol = $Symbol(string);
                            StringToSymbolRegistry[string] = symbol;
                            SymbolToStringRegistry[symbol] = string;
                            return symbol;
                        },
                        // `Symbol.keyFor` method
                        // https://tc39.github.io/ecma262/#sec-symbol.keyfor
                        keyFor: function keyFor(sym) {
                            if (!isSymbol(sym))
                                throw TypeError(sym + " is not a symbol");
                            if (has(SymbolToStringRegistry, sym))
                                return SymbolToStringRegistry[sym];
                        },
                        useSetter: function() {
                            USE_SETTER = true;
                        },
                        useSimple: function() {
                            USE_SETTER = false;
                        },
                    },
                );

                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: !NATIVE_SYMBOL,
                        sham: !DESCRIPTORS,
                    },
                    {
                        // `Object.create` method
                        // https://tc39.github.io/ecma262/#sec-object.create
                        create: $create,
                        // `Object.defineProperty` method
                        // https://tc39.github.io/ecma262/#sec-object.defineproperty
                        defineProperty: $defineProperty,
                        // `Object.defineProperties` method
                        // https://tc39.github.io/ecma262/#sec-object.defineproperties
                        defineProperties: $defineProperties,
                        // `Object.getOwnPropertyDescriptor` method
                        // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
                        getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
                    },
                );

                $(
                    { target: "Object", stat: true, forced: !NATIVE_SYMBOL },
                    {
                        // `Object.getOwnPropertyNames` method
                        // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
                        getOwnPropertyNames: $getOwnPropertyNames,
                        // `Object.getOwnPropertySymbols` method
                        // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
                        getOwnPropertySymbols: $getOwnPropertySymbols,
                    },
                );

                // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
                // https://bugs.chromium.org/p/v8/issues/detail?id=3443
                $(
                    {
                        target: "Object",
                        stat: true,
                        forced: fails(function() {
                            getOwnPropertySymbolsModule.f(1);
                        }),
                    },
                    {
                        getOwnPropertySymbols: function getOwnPropertySymbols(
                            it,
                        ) {
                            return getOwnPropertySymbolsModule.f(toObject(it));
                        },
                    },
                );

                // `JSON.stringify` method behavior with symbols
                // https://tc39.github.io/ecma262/#sec-json.stringify
                if ($stringify) {
                    var FORCED_JSON_STRINGIFY =
                        !NATIVE_SYMBOL ||
                        fails(function() {
                            var symbol = $Symbol();
                            // MS Edge converts symbol values to JSON as {}
                            return (
                                $stringify([symbol]) != "[null]" ||
                                // WebKit converts symbol values to JSON as null
                                $stringify({ a: symbol }) != "{}" ||
                                // V8 throws on boxed symbols
                                $stringify(Object(symbol)) != "{}"
                            );
                        });

                    $(
                        {
                            target: "JSON",
                            stat: true,
                            forced: FORCED_JSON_STRINGIFY,
                        },
                        {
                            // eslint-disable-next-line no-unused-vars
                            stringify: function stringify(it, replacer, space) {
                                var args = [it];
                                var index = 1;
                                var $replacer;
                                while (arguments.length > index)
                                    args.push(arguments[index++]);
                                $replacer = replacer;
                                if (
                                    (!isObject(replacer) && it === undefined) ||
                                    isSymbol(it)
                                )
                                    return; // IE8 returns string on undefined
                                if (!isArray(replacer))
                                    replacer = function(key, value) {
                                        if (typeof $replacer == "function")
                                            value = $replacer.call(
                                                this,
                                                key,
                                                value,
                                            );
                                        if (!isSymbol(value)) return value;
                                    };
                                args[1] = replacer;
                                return $stringify.apply(null, args);
                            },
                        },
                    );
                }

                // `Symbol.prototype[@@toPrimitive]` method
                // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
                if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
                    createNonEnumerableProperty(
                        $Symbol[PROTOTYPE],
                        TO_PRIMITIVE,
                        $Symbol[PROTOTYPE].valueOf,
                    );
                }
                // `Symbol.prototype[@@toStringTag]` property
                // https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
                setToStringTag($Symbol, SYMBOL);

                hiddenKeys[HIDDEN] = true;
            },
            {
                "../internals/an-object": 42,
                "../internals/array-iteration": 50,
                "../internals/create-non-enumerable-property": 68,
                "../internals/create-property-descriptor": 69,
                "../internals/define-well-known-symbol": 74,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/fails": 80,
                "../internals/get-built-in": 89,
                "../internals/global": 92,
                "../internals/has": 93,
                "../internals/hidden-keys": 94,
                "../internals/internal-state": 101,
                "../internals/is-array": 103,
                "../internals/is-object": 107,
                "../internals/is-pure": 108,
                "../internals/native-symbol": 119,
                "../internals/object-create": 126,
                "../internals/object-define-property": 128,
                "../internals/object-get-own-property-descriptor": 129,
                "../internals/object-get-own-property-names": 131,
                "../internals/object-get-own-property-names-external": 130,
                "../internals/object-get-own-property-symbols": 132,
                "../internals/object-keys": 135,
                "../internals/object-property-is-enumerable": 136,
                "../internals/redefine": 148,
                "../internals/set-to-string-tag": 156,
                "../internals/shared": 159,
                "../internals/shared-key": 157,
                "../internals/to-indexed-object": 170,
                "../internals/to-object": 173,
                "../internals/to-primitive": 176,
                "../internals/uid": 180,
                "../internals/well-known-symbol": 184,
                "../internals/wrapped-well-known-symbol": 186,
            },
        ],
        346: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.matchAll` well-known symbol
                defineWellKnownSymbol("matchAll");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        347: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.match` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.match
                defineWellKnownSymbol("match");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        348: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.replace` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.replace
                defineWellKnownSymbol("replace");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        349: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.search` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.search
                defineWellKnownSymbol("search");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        350: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.species` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.species
                defineWellKnownSymbol("species");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        351: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.split` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.split
                defineWellKnownSymbol("split");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        352: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.toPrimitive` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.toprimitive
                defineWellKnownSymbol("toPrimitive");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        353: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.toStringTag` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.tostringtag
                defineWellKnownSymbol("toStringTag");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        354: [
            function(require, module, exports) {
                var defineWellKnownSymbol = require("../internals/define-well-known-symbol");

                // `Symbol.unscopables` well-known symbol
                // https://tc39.github.io/ecma262/#sec-symbol.unscopables
                defineWellKnownSymbol("unscopables");
            },
            { "../internals/define-well-known-symbol": 74 },
        ],
        355: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $copyWithin = require("../internals/array-copy-within");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.copyWithin` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
                ArrayBufferViewCore.exportProto(
                    "copyWithin",
                    function copyWithin(target, start /* , end */) {
                        return $copyWithin.call(
                            aTypedArray(this),
                            target,
                            start,
                            arguments.length > 2 ? arguments[2] : undefined,
                        );
                    },
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-copy-within": 45,
            },
        ],
        356: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $every = require("../internals/array-iteration").every;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.every` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
                ArrayBufferViewCore.exportProto("every", function every(
                    callbackfn /* , thisArg */,
                ) {
                    return $every(
                        aTypedArray(this),
                        callbackfn,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-iteration": 50,
            },
        ],
        357: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $fill = require("../internals/array-fill");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.fill` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
                // eslint-disable-next-line no-unused-vars
                ArrayBufferViewCore.exportProto("fill", function fill(
                    value /* , start, end */,
                ) {
                    return $fill.apply(aTypedArray(this), arguments);
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-fill": 46,
            },
        ],
        358: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $filter = require("../internals/array-iteration").filter;
                var speciesConstructor = require("../internals/species-constructor");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;
                var aTypedArrayConstructor =
                    ArrayBufferViewCore.aTypedArrayConstructor;

                // `%TypedArray%.prototype.filter` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
                ArrayBufferViewCore.exportProto("filter", function filter(
                    callbackfn /* , thisArg */,
                ) {
                    var list = $filter(
                        aTypedArray(this),
                        callbackfn,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                    var C = speciesConstructor(this, this.constructor);
                    var index = 0;
                    var length = list.length;
                    var result = new (aTypedArrayConstructor(C))(length);
                    while (length > index) result[index] = list[index++];
                    return result;
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-iteration": 50,
                "../internals/species-constructor": 161,
            },
        ],
        359: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $findIndex = require("../internals/array-iteration")
                    .findIndex;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.findIndex` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
                ArrayBufferViewCore.exportProto("findIndex", function findIndex(
                    predicate /* , thisArg */,
                ) {
                    return $findIndex(
                        aTypedArray(this),
                        predicate,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-iteration": 50,
            },
        ],
        360: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $find = require("../internals/array-iteration").find;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.find` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
                ArrayBufferViewCore.exportProto("find", function find(
                    predicate /* , thisArg */,
                ) {
                    return $find(
                        aTypedArray(this),
                        predicate,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-iteration": 50,
            },
        ],
        361: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Float32Array` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor("Float32", 4, function(init) {
                    return function Float32Array(data, byteOffset, length) {
                        return init(this, data, byteOffset, length);
                    };
                });
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        362: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Float64Array` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor("Float64", 8, function(init) {
                    return function Float64Array(data, byteOffset, length) {
                        return init(this, data, byteOffset, length);
                    };
                });
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        363: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $forEach = require("../internals/array-iteration").forEach;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.forEach` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
                ArrayBufferViewCore.exportProto("forEach", function forEach(
                    callbackfn /* , thisArg */,
                ) {
                    $forEach(
                        aTypedArray(this),
                        callbackfn,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-iteration": 50,
            },
        ],
        364: [
            function(require, module, exports) {
                "use strict";
                var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require("../internals/typed-arrays-constructors-requires-wrappers");
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var typedArrayFrom = require("../internals/typed-array-from");

                // `%TypedArray%.from` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.from
                ArrayBufferViewCore.exportStatic(
                    "from",
                    typedArrayFrom,
                    TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS,
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/typed-array-from": 178,
                "../internals/typed-arrays-constructors-requires-wrappers": 179,
            },
        ],
        365: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $includes = require("../internals/array-includes").includes;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.includes` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
                ArrayBufferViewCore.exportProto("includes", function includes(
                    searchElement /* , fromIndex */,
                ) {
                    return $includes(
                        aTypedArray(this),
                        searchElement,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-includes": 49,
            },
        ],
        366: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $indexOf = require("../internals/array-includes").indexOf;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.indexOf` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
                ArrayBufferViewCore.exportProto("indexOf", function indexOf(
                    searchElement /* , fromIndex */,
                ) {
                    return $indexOf(
                        aTypedArray(this),
                        searchElement,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-includes": 49,
            },
        ],
        367: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Int16Array` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor("Int16", 2, function(init) {
                    return function Int16Array(data, byteOffset, length) {
                        return init(this, data, byteOffset, length);
                    };
                });
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        368: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Int32Array` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor("Int32", 4, function(init) {
                    return function Int32Array(data, byteOffset, length) {
                        return init(this, data, byteOffset, length);
                    };
                });
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        369: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Int8Array` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor("Int8", 1, function(init) {
                    return function Int8Array(data, byteOffset, length) {
                        return init(this, data, byteOffset, length);
                    };
                });
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        370: [
            function(require, module, exports) {
                "use strict";
                var global = require("../internals/global");
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var ArrayIterators = require("../modules/es.array.iterator");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var ITERATOR = wellKnownSymbol("iterator");
                var Uint8Array = global.Uint8Array;
                var arrayValues = ArrayIterators.values;
                var arrayKeys = ArrayIterators.keys;
                var arrayEntries = ArrayIterators.entries;
                var aTypedArray = ArrayBufferViewCore.aTypedArray;
                var exportProto = ArrayBufferViewCore.exportProto;
                var nativeTypedArrayIterator =
                    Uint8Array && Uint8Array.prototype[ITERATOR];

                var CORRECT_ITER_NAME =
                    !!nativeTypedArrayIterator &&
                    (nativeTypedArrayIterator.name == "values" ||
                        nativeTypedArrayIterator.name == undefined);

                var typedArrayValues = function values() {
                    return arrayValues.call(aTypedArray(this));
                };

                // `%TypedArray%.prototype.entries` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
                exportProto("entries", function entries() {
                    return arrayEntries.call(aTypedArray(this));
                });
                // `%TypedArray%.prototype.keys` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
                exportProto("keys", function keys() {
                    return arrayKeys.call(aTypedArray(this));
                });
                // `%TypedArray%.prototype.values` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
                exportProto("values", typedArrayValues, !CORRECT_ITER_NAME);
                // `%TypedArray%.prototype[@@iterator]` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
                exportProto(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/global": 92,
                "../internals/well-known-symbol": 184,
                "../modules/es.array.iterator": 204,
            },
        ],
        371: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;
                var $join = [].join;

                // `%TypedArray%.prototype.join` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
                // eslint-disable-next-line no-unused-vars
                ArrayBufferViewCore.exportProto("join", function join(
                    separator,
                ) {
                    return $join.apply(aTypedArray(this), arguments);
                });
            },
            { "../internals/array-buffer-view-core": 43 },
        ],
        372: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $lastIndexOf = require("../internals/array-last-index-of");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.lastIndexOf` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
                // eslint-disable-next-line no-unused-vars
                ArrayBufferViewCore.exportProto(
                    "lastIndexOf",
                    function lastIndexOf(searchElement /* , fromIndex */) {
                        return $lastIndexOf.apply(aTypedArray(this), arguments);
                    },
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-last-index-of": 51,
            },
        ],
        373: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $map = require("../internals/array-iteration").map;
                var speciesConstructor = require("../internals/species-constructor");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;
                var aTypedArrayConstructor =
                    ArrayBufferViewCore.aTypedArrayConstructor;

                // `%TypedArray%.prototype.map` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
                ArrayBufferViewCore.exportProto("map", function map(
                    mapfn /* , thisArg */,
                ) {
                    return $map(
                        aTypedArray(this),
                        mapfn,
                        arguments.length > 1 ? arguments[1] : undefined,
                        function(O, length) {
                            return new (aTypedArrayConstructor(
                                speciesConstructor(O, O.constructor),
                            ))(length);
                        },
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-iteration": 50,
                "../internals/species-constructor": 161,
            },
        ],
        374: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require("../internals/typed-arrays-constructors-requires-wrappers");

                var aTypedArrayConstructor =
                    ArrayBufferViewCore.aTypedArrayConstructor;

                // `%TypedArray%.of` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.of
                ArrayBufferViewCore.exportStatic(
                    "of",
                    function of(/* ...items */) {
                        var index = 0;
                        var length = arguments.length;
                        var result = new (aTypedArrayConstructor(this))(length);
                        while (length > index)
                            result[index] = arguments[index++];
                        return result;
                    },
                    TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS,
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/typed-arrays-constructors-requires-wrappers": 179,
            },
        ],
        375: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $reduceRight = require("../internals/array-reduce").right;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.reduceRicht` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
                ArrayBufferViewCore.exportProto(
                    "reduceRight",
                    function reduceRight(callbackfn /* , initialValue */) {
                        return $reduceRight(
                            aTypedArray(this),
                            callbackfn,
                            arguments.length,
                            arguments.length > 1 ? arguments[1] : undefined,
                        );
                    },
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-reduce": 53,
            },
        ],
        376: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $reduce = require("../internals/array-reduce").left;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.reduce` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
                ArrayBufferViewCore.exportProto("reduce", function reduce(
                    callbackfn /* , initialValue */,
                ) {
                    return $reduce(
                        aTypedArray(this),
                        callbackfn,
                        arguments.length,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-reduce": 53,
            },
        ],
        377: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;
                var floor = Math.floor;

                // `%TypedArray%.prototype.reverse` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
                ArrayBufferViewCore.exportProto("reverse", function reverse() {
                    var that = this;
                    var length = aTypedArray(that).length;
                    var middle = floor(length / 2);
                    var index = 0;
                    var value;
                    while (index < middle) {
                        value = that[index];
                        that[index++] = that[--length];
                        that[length] = value;
                    }
                    return that;
                });
            },
            { "../internals/array-buffer-view-core": 43 },
        ],
        378: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var toLength = require("../internals/to-length");
                var toOffset = require("../internals/to-offset");
                var toObject = require("../internals/to-object");
                var fails = require("../internals/fails");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                var FORCED = fails(function() {
                    // eslint-disable-next-line no-undef
                    new Int8Array(1).set({});
                });

                // `%TypedArray%.prototype.set` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
                ArrayBufferViewCore.exportProto(
                    "set",
                    function set(arrayLike /* , offset */) {
                        aTypedArray(this);
                        var offset = toOffset(
                            arguments.length > 1 ? arguments[1] : undefined,
                            1,
                        );
                        var length = this.length;
                        var src = toObject(arrayLike);
                        var len = toLength(src.length);
                        var index = 0;
                        if (len + offset > length)
                            throw RangeError("Wrong length");
                        while (index < len) this[offset + index] = src[index++];
                    },
                    FORCED,
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/fails": 80,
                "../internals/to-length": 172,
                "../internals/to-object": 173,
                "../internals/to-offset": 174,
            },
        ],
        379: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var speciesConstructor = require("../internals/species-constructor");
                var fails = require("../internals/fails");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;
                var aTypedArrayConstructor =
                    ArrayBufferViewCore.aTypedArrayConstructor;
                var $slice = [].slice;

                var FORCED = fails(function() {
                    // eslint-disable-next-line no-undef
                    new Int8Array(1).slice();
                });

                // `%TypedArray%.prototype.slice` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
                ArrayBufferViewCore.exportProto(
                    "slice",
                    function slice(start, end) {
                        var list = $slice.call(aTypedArray(this), start, end);
                        var C = speciesConstructor(this, this.constructor);
                        var index = 0;
                        var length = list.length;
                        var result = new (aTypedArrayConstructor(C))(length);
                        while (length > index) result[index] = list[index++];
                        return result;
                    },
                    FORCED,
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/fails": 80,
                "../internals/species-constructor": 161,
            },
        ],
        380: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var $some = require("../internals/array-iteration").some;

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.some` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
                ArrayBufferViewCore.exportProto("some", function some(
                    callbackfn /* , thisArg */,
                ) {
                    return $some(
                        aTypedArray(this),
                        callbackfn,
                        arguments.length > 1 ? arguments[1] : undefined,
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/array-iteration": 50,
            },
        ],
        381: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;
                var $sort = [].sort;

                // `%TypedArray%.prototype.sort` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
                ArrayBufferViewCore.exportProto("sort", function sort(
                    comparefn,
                ) {
                    return $sort.call(aTypedArray(this), comparefn);
                });
            },
            { "../internals/array-buffer-view-core": 43 },
        ],
        382: [
            function(require, module, exports) {
                "use strict";
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var toLength = require("../internals/to-length");
                var toAbsoluteIndex = require("../internals/to-absolute-index");
                var speciesConstructor = require("../internals/species-constructor");

                var aTypedArray = ArrayBufferViewCore.aTypedArray;

                // `%TypedArray%.prototype.subarray` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
                ArrayBufferViewCore.exportProto("subarray", function subarray(
                    begin,
                    end,
                ) {
                    var O = aTypedArray(this);
                    var length = O.length;
                    var beginIndex = toAbsoluteIndex(begin, length);
                    return new (speciesConstructor(O, O.constructor))(
                        O.buffer,
                        O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
                        toLength(
                            (end === undefined
                                ? length
                                : toAbsoluteIndex(end, length)) - beginIndex,
                        ),
                    );
                });
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/species-constructor": 161,
                "../internals/to-absolute-index": 168,
                "../internals/to-length": 172,
            },
        ],
        383: [
            function(require, module, exports) {
                "use strict";
                var global = require("../internals/global");
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var fails = require("../internals/fails");

                var Int8Array = global.Int8Array;
                var aTypedArray = ArrayBufferViewCore.aTypedArray;
                var $toLocaleString = [].toLocaleString;
                var $slice = [].slice;

                // iOS Safari 6.x fails here
                var TO_LOCALE_STRING_BUG =
                    !!Int8Array &&
                    fails(function() {
                        $toLocaleString.call(new Int8Array(1));
                    });

                var FORCED =
                    fails(function() {
                        return (
                            [1, 2].toLocaleString() !=
                            new Int8Array([1, 2]).toLocaleString()
                        );
                    }) ||
                    !fails(function() {
                        Int8Array.prototype.toLocaleString.call([1, 2]);
                    });

                // `%TypedArray%.prototype.toLocaleString` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
                ArrayBufferViewCore.exportProto(
                    "toLocaleString",
                    function toLocaleString() {
                        return $toLocaleString.apply(
                            TO_LOCALE_STRING_BUG
                                ? $slice.call(aTypedArray(this))
                                : aTypedArray(this),
                            arguments,
                        );
                    },
                    FORCED,
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/fails": 80,
                "../internals/global": 92,
            },
        ],
        384: [
            function(require, module, exports) {
                "use strict";
                var global = require("../internals/global");
                var ArrayBufferViewCore = require("../internals/array-buffer-view-core");
                var fails = require("../internals/fails");

                var Uint8Array = global.Uint8Array;
                var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype;
                var arrayToString = [].toString;
                var arrayJoin = [].join;

                if (
                    fails(function() {
                        arrayToString.call({});
                    })
                ) {
                    arrayToString = function toString() {
                        return arrayJoin.call(this);
                    };
                }

                // `%TypedArray%.prototype.toString` method
                // https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
                ArrayBufferViewCore.exportProto(
                    "toString",
                    arrayToString,
                    (Uint8ArrayPrototype || {}).toString != arrayToString,
                );
            },
            {
                "../internals/array-buffer-view-core": 43,
                "../internals/fails": 80,
                "../internals/global": 92,
            },
        ],
        385: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Uint16Array` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor("Uint16", 2, function(init) {
                    return function Uint16Array(data, byteOffset, length) {
                        return init(this, data, byteOffset, length);
                    };
                });
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        386: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Uint32Array` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor("Uint32", 4, function(init) {
                    return function Uint32Array(data, byteOffset, length) {
                        return init(this, data, byteOffset, length);
                    };
                });
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        387: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Uint8Array` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor("Uint8", 1, function(init) {
                    return function Uint8Array(data, byteOffset, length) {
                        return init(this, data, byteOffset, length);
                    };
                });
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        388: [
            function(require, module, exports) {
                var typedArrayConstructor = require("../internals/typed-array-constructor");

                // `Uint8ClampedArray` constructor
                // https://tc39.github.io/ecma262/#sec-typedarray-objects
                typedArrayConstructor(
                    "Uint8",
                    1,
                    function(init) {
                        return function Uint8ClampedArray(
                            data,
                            byteOffset,
                            length,
                        ) {
                            return init(this, data, byteOffset, length);
                        };
                    },
                    true,
                );
            },
            { "../internals/typed-array-constructor": 177 },
        ],
        389: [
            function(require, module, exports) {
                "use strict";
                var global = require("../internals/global");
                var redefineAll = require("../internals/redefine-all");
                var InternalMetadataModule = require("../internals/internal-metadata");
                var collection = require("../internals/collection");
                var collectionWeak = require("../internals/collection-weak");
                var isObject = require("../internals/is-object");
                var enforceIternalState = require("../internals/internal-state")
                    .enforce;
                var NATIVE_WEAK_MAP = require("../internals/native-weak-map");

                var IS_IE11 =
                    !global.ActiveXObject && "ActiveXObject" in global;
                var isExtensible = Object.isExtensible;
                var InternalWeakMap;

                var wrapper = function(get) {
                    return function WeakMap() {
                        return get(
                            this,
                            arguments.length ? arguments[0] : undefined,
                        );
                    };
                };

                // `WeakMap` constructor
                // https://tc39.github.io/ecma262/#sec-weakmap-constructor
                var $WeakMap = (module.exports = collection(
                    "WeakMap",
                    wrapper,
                    collectionWeak,
                    true,
                    true,
                ));

                // IE11 WeakMap frozen keys fix
                // We can't use feature detection because it crash some old IE builds
                // https://github.com/zloirock/core-js/issues/485
                if (NATIVE_WEAK_MAP && IS_IE11) {
                    InternalWeakMap = collectionWeak.getConstructor(
                        wrapper,
                        "WeakMap",
                        true,
                    );
                    InternalMetadataModule.REQUIRED = true;
                    var WeakMapPrototype = $WeakMap.prototype;
                    var nativeDelete = WeakMapPrototype["delete"];
                    var nativeHas = WeakMapPrototype.has;
                    var nativeGet = WeakMapPrototype.get;
                    var nativeSet = WeakMapPrototype.set;
                    redefineAll(WeakMapPrototype, {
                        delete: function(key) {
                            if (isObject(key) && !isExtensible(key)) {
                                var state = enforceIternalState(this);
                                if (!state.frozen)
                                    state.frozen = new InternalWeakMap();
                                return (
                                    nativeDelete.call(this, key) ||
                                    state.frozen["delete"](key)
                                );
                            }
                            return nativeDelete.call(this, key);
                        },
                        has: function has(key) {
                            if (isObject(key) && !isExtensible(key)) {
                                var state = enforceIternalState(this);
                                if (!state.frozen)
                                    state.frozen = new InternalWeakMap();
                                return (
                                    nativeHas.call(this, key) ||
                                    state.frozen.has(key)
                                );
                            }
                            return nativeHas.call(this, key);
                        },
                        get: function get(key) {
                            if (isObject(key) && !isExtensible(key)) {
                                var state = enforceIternalState(this);
                                if (!state.frozen)
                                    state.frozen = new InternalWeakMap();
                                return nativeHas.call(this, key)
                                    ? nativeGet.call(this, key)
                                    : state.frozen.get(key);
                            }
                            return nativeGet.call(this, key);
                        },
                        set: function set(key, value) {
                            if (isObject(key) && !isExtensible(key)) {
                                var state = enforceIternalState(this);
                                if (!state.frozen)
                                    state.frozen = new InternalWeakMap();
                                nativeHas.call(this, key)
                                    ? nativeSet.call(this, key, value)
                                    : state.frozen.set(key, value);
                            } else nativeSet.call(this, key, value);
                            return this;
                        },
                    });
                }
            },
            {
                "../internals/collection": 62,
                "../internals/collection-weak": 61,
                "../internals/global": 92,
                "../internals/internal-metadata": 100,
                "../internals/internal-state": 101,
                "../internals/is-object": 107,
                "../internals/native-weak-map": 121,
                "../internals/redefine-all": 147,
            },
        ],
        390: [
            function(require, module, exports) {
                "use strict";
                var collection = require("../internals/collection");
                var collectionWeak = require("../internals/collection-weak");

                // `WeakSet` constructor
                // https://tc39.github.io/ecma262/#sec-weakset-constructor
                collection(
                    "WeakSet",
                    function(get) {
                        return function WeakSet() {
                            return get(
                                this,
                                arguments.length ? arguments[0] : undefined,
                            );
                        };
                    },
                    collectionWeak,
                    false,
                    true,
                );
            },
            {
                "../internals/collection": 62,
                "../internals/collection-weak": 61,
            },
        ],
        391: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var DOMIterables = require("../internals/dom-iterables");
                var forEach = require("../internals/array-for-each");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");

                for (var COLLECTION_NAME in DOMIterables) {
                    var Collection = global[COLLECTION_NAME];
                    var CollectionPrototype =
                        Collection && Collection.prototype;
                    // some Chrome versions have non-configurable methods on DOMTokenList
                    if (
                        CollectionPrototype &&
                        CollectionPrototype.forEach !== forEach
                    )
                        try {
                            createNonEnumerableProperty(
                                CollectionPrototype,
                                "forEach",
                                forEach,
                            );
                        } catch (error) {
                            CollectionPrototype.forEach = forEach;
                        }
                }
            },
            {
                "../internals/array-for-each": 47,
                "../internals/create-non-enumerable-property": 68,
                "../internals/dom-iterables": 77,
                "../internals/global": 92,
            },
        ],
        392: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var DOMIterables = require("../internals/dom-iterables");
                var ArrayIteratorMethods = require("../modules/es.array.iterator");
                var createNonEnumerableProperty = require("../internals/create-non-enumerable-property");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var ITERATOR = wellKnownSymbol("iterator");
                var TO_STRING_TAG = wellKnownSymbol("toStringTag");
                var ArrayValues = ArrayIteratorMethods.values;

                for (var COLLECTION_NAME in DOMIterables) {
                    var Collection = global[COLLECTION_NAME];
                    var CollectionPrototype =
                        Collection && Collection.prototype;
                    if (CollectionPrototype) {
                        // some Chrome versions have non-configurable methods on DOMTokenList
                        if (CollectionPrototype[ITERATOR] !== ArrayValues)
                            try {
                                createNonEnumerableProperty(
                                    CollectionPrototype,
                                    ITERATOR,
                                    ArrayValues,
                                );
                            } catch (error) {
                                CollectionPrototype[ITERATOR] = ArrayValues;
                            }
                        if (!CollectionPrototype[TO_STRING_TAG]) {
                            createNonEnumerableProperty(
                                CollectionPrototype,
                                TO_STRING_TAG,
                                COLLECTION_NAME,
                            );
                        }
                        if (DOMIterables[COLLECTION_NAME])
                            for (var METHOD_NAME in ArrayIteratorMethods) {
                                // some Chrome versions have non-configurable methods on DOMTokenList
                                if (
                                    CollectionPrototype[METHOD_NAME] !==
                                    ArrayIteratorMethods[METHOD_NAME]
                                )
                                    try {
                                        createNonEnumerableProperty(
                                            CollectionPrototype,
                                            METHOD_NAME,
                                            ArrayIteratorMethods[METHOD_NAME],
                                        );
                                    } catch (error) {
                                        CollectionPrototype[METHOD_NAME] =
                                            ArrayIteratorMethods[METHOD_NAME];
                                    }
                            }
                    }
                }
            },
            {
                "../internals/create-non-enumerable-property": 68,
                "../internals/dom-iterables": 77,
                "../internals/global": 92,
                "../internals/well-known-symbol": 184,
                "../modules/es.array.iterator": 204,
            },
        ],
        393: [
            function(require, module, exports) {
                var global = require("../internals/global");
                var task = require("../internals/task");

                var FORCED = !global.setImmediate || !global.clearImmediate;

                // http://w3c.github.io/setImmediate/
                require("../internals/export")(
                    {
                        global: true,
                        bind: true,
                        enumerable: true,
                        forced: FORCED,
                    },
                    {
                        // `setImmediate` method
                        // http://w3c.github.io/setImmediate/#si-setImmediate
                        setImmediate: task.set,
                        // `clearImmediate` method
                        // http://w3c.github.io/setImmediate/#si-clearImmediate
                        clearImmediate: task.clear,
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/global": 92,
                "../internals/task": 166,
            },
        ],
        394: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var global = require("../internals/global");
                var microtask = require("../internals/microtask");
                var classof = require("../internals/classof-raw");

                var process = global.process;
                var isNode = classof(process) == "process";

                // `queueMicrotask` method
                // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
                $(
                    { global: true, enumerable: true, noTargetGet: true },
                    {
                        queueMicrotask: function queueMicrotask(fn) {
                            var domain = isNode && process.domain;
                            microtask(domain ? domain.bind(fn) : fn);
                        },
                    },
                );
            },
            {
                "../internals/classof-raw": 58,
                "../internals/export": 79,
                "../internals/global": 92,
                "../internals/microtask": 117,
            },
        ],
        395: [
            function(require, module, exports) {
                var $ = require("../internals/export");
                var global = require("../internals/global");
                var userAgent = require("../internals/user-agent");

                var slice = [].slice;
                var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

                var wrap = function(scheduler) {
                    return function(handler, timeout /* , ...arguments */) {
                        var boundArgs = arguments.length > 2;
                        var args = boundArgs
                            ? slice.call(arguments, 2)
                            : undefined;
                        return scheduler(
                            boundArgs
                                ? function() {
                                      // eslint-disable-next-line no-new-func
                                      (typeof handler == "function"
                                          ? handler
                                          : Function(handler)
                                      ).apply(this, args);
                                  }
                                : handler,
                            timeout,
                        );
                    };
                };

                // ie9- setTimeout & setInterval additional parameters fix
                // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
                $(
                    { global: true, bind: true, forced: MSIE },
                    {
                        // `setTimeout` method
                        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
                        setTimeout: wrap(global.setTimeout),
                        // `setInterval` method
                        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
                        setInterval: wrap(global.setInterval),
                    },
                );
            },
            {
                "../internals/export": 79,
                "../internals/global": 92,
                "../internals/user-agent": 181,
            },
        ],
        396: [
            function(require, module, exports) {
                "use strict";
                // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
                require("../modules/es.array.iterator");
                var $ = require("../internals/export");
                var getBuiltIn = require("../internals/get-built-in");
                var USE_NATIVE_URL = require("../internals/native-url");
                var redefine = require("../internals/redefine");
                var redefineAll = require("../internals/redefine-all");
                var setToStringTag = require("../internals/set-to-string-tag");
                var createIteratorConstructor = require("../internals/create-iterator-constructor");
                var InternalStateModule = require("../internals/internal-state");
                var anInstance = require("../internals/an-instance");
                var hasOwn = require("../internals/has");
                var bind = require("../internals/bind-context");
                var classof = require("../internals/classof");
                var anObject = require("../internals/an-object");
                var isObject = require("../internals/is-object");
                var create = require("../internals/object-create");
                var createPropertyDescriptor = require("../internals/create-property-descriptor");
                var getIterator = require("../internals/get-iterator");
                var getIteratorMethod = require("../internals/get-iterator-method");
                var wellKnownSymbol = require("../internals/well-known-symbol");

                var $fetch = getBuiltIn("fetch");
                var Headers = getBuiltIn("Headers");
                var ITERATOR = wellKnownSymbol("iterator");
                var URL_SEARCH_PARAMS = "URLSearchParams";
                var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
                var setInternalState = InternalStateModule.set;
                var getInternalParamsState = InternalStateModule.getterFor(
                    URL_SEARCH_PARAMS,
                );
                var getInternalIteratorState = InternalStateModule.getterFor(
                    URL_SEARCH_PARAMS_ITERATOR,
                );

                var plus = /\+/g;
                var sequences = Array(4);

                var percentSequence = function(bytes) {
                    return (
                        sequences[bytes - 1] ||
                        (sequences[bytes - 1] = RegExp(
                            "((?:%[\\da-f]{2}){" + bytes + "})",
                            "gi",
                        ))
                    );
                };

                var percentDecode = function(sequence) {
                    try {
                        return decodeURIComponent(sequence);
                    } catch (error) {
                        return sequence;
                    }
                };

                var deserialize = function(it) {
                    var result = it.replace(plus, " ");
                    var bytes = 4;
                    try {
                        return decodeURIComponent(result);
                    } catch (error) {
                        while (bytes) {
                            result = result.replace(
                                percentSequence(bytes--),
                                percentDecode,
                            );
                        }
                        return result;
                    }
                };

                var find = /[!'()~]|%20/g;

                var replace = {
                    "!": "%21",
                    "'": "%27",
                    "(": "%28",
                    ")": "%29",
                    "~": "%7E",
                    "%20": "+",
                };

                var replacer = function(match) {
                    return replace[match];
                };

                var serialize = function(it) {
                    return encodeURIComponent(it).replace(find, replacer);
                };

                var parseSearchParams = function(result, query) {
                    if (query) {
                        var attributes = query.split("&");
                        var index = 0;
                        var attribute, entry;
                        while (index < attributes.length) {
                            attribute = attributes[index++];
                            if (attribute.length) {
                                entry = attribute.split("=");
                                result.push({
                                    key: deserialize(entry.shift()),
                                    value: deserialize(entry.join("=")),
                                });
                            }
                        }
                    }
                };

                var updateSearchParams = function(query) {
                    this.entries.length = 0;
                    parseSearchParams(this.entries, query);
                };

                var validateArgumentsLength = function(passed, required) {
                    if (passed < required)
                        throw TypeError("Not enough arguments");
                };

                var URLSearchParamsIterator = createIteratorConstructor(
                    function Iterator(params, kind) {
                        setInternalState(this, {
                            type: URL_SEARCH_PARAMS_ITERATOR,
                            iterator: getIterator(
                                getInternalParamsState(params).entries,
                            ),
                            kind: kind,
                        });
                    },
                    "Iterator",
                    function next() {
                        var state = getInternalIteratorState(this);
                        var kind = state.kind;
                        var step = state.iterator.next();
                        var entry = step.value;
                        if (!step.done) {
                            step.value =
                                kind === "keys"
                                    ? entry.key
                                    : kind === "values"
                                    ? entry.value
                                    : [entry.key, entry.value];
                        }
                        return step;
                    },
                );

                // `URLSearchParams` constructor
                // https://url.spec.whatwg.org/#interface-urlsearchparams
                var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
                    anInstance(
                        this,
                        URLSearchParamsConstructor,
                        URL_SEARCH_PARAMS,
                    );
                    var init = arguments.length > 0 ? arguments[0] : undefined;
                    var that = this;
                    var entries = [];
                    var iteratorMethod,
                        iterator,
                        next,
                        step,
                        entryIterator,
                        entryNext,
                        first,
                        second,
                        key;

                    setInternalState(that, {
                        type: URL_SEARCH_PARAMS,
                        entries: entries,
                        updateURL: function() {
                            /* empty */
                        },
                        updateSearchParams: updateSearchParams,
                    });

                    if (init !== undefined) {
                        if (isObject(init)) {
                            iteratorMethod = getIteratorMethod(init);
                            if (typeof iteratorMethod === "function") {
                                iterator = iteratorMethod.call(init);
                                next = iterator.next;
                                while (!(step = next.call(iterator)).done) {
                                    entryIterator = getIterator(
                                        anObject(step.value),
                                    );
                                    entryNext = entryIterator.next;
                                    if (
                                        (first = entryNext.call(entryIterator))
                                            .done ||
                                        (second = entryNext.call(entryIterator))
                                            .done ||
                                        !entryNext.call(entryIterator).done
                                    )
                                        throw TypeError(
                                            "Expected sequence with length 2",
                                        );
                                    entries.push({
                                        key: first.value + "",
                                        value: second.value + "",
                                    });
                                }
                            } else
                                for (key in init)
                                    if (hasOwn(init, key))
                                        entries.push({
                                            key: key,
                                            value: init[key] + "",
                                        });
                        } else {
                            parseSearchParams(
                                entries,
                                typeof init === "string"
                                    ? init.charAt(0) === "?"
                                        ? init.slice(1)
                                        : init
                                    : init + "",
                            );
                        }
                    }
                };

                var URLSearchParamsPrototype =
                    URLSearchParamsConstructor.prototype;

                redefineAll(
                    URLSearchParamsPrototype,
                    {
                        // `URLSearchParams.prototype.appent` method
                        // https://url.spec.whatwg.org/#dom-urlsearchparams-append
                        append: function append(name, value) {
                            validateArgumentsLength(arguments.length, 2);
                            var state = getInternalParamsState(this);
                            state.entries.push({
                                key: name + "",
                                value: value + "",
                            });
                            state.updateURL();
                        },
                        // `URLSearchParams.prototype.delete` method
                        // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
                        delete: function(name) {
                            validateArgumentsLength(arguments.length, 1);
                            var state = getInternalParamsState(this);
                            var entries = state.entries;
                            var key = name + "";
                            var index = 0;
                            while (index < entries.length) {
                                if (entries[index].key === key)
                                    entries.splice(index, 1);
                                else index++;
                            }
                            state.updateURL();
                        },
                        // `URLSearchParams.prototype.get` method
                        // https://url.spec.whatwg.org/#dom-urlsearchparams-get
                        get: function get(name) {
                            validateArgumentsLength(arguments.length, 1);
                            var entries = getInternalParamsState(this).entries;
                            var key = name + "";
                            var index = 0;
                            for (; index < entries.length; index++) {
                                if (entries[index].key === key)
                                    return entries[index].value;
                            }
                            return null;
                        },
                        // `URLSearchParams.prototype.getAll` method
                        // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
                        getAll: function getAll(name) {
                            validateArgumentsLength(arguments.length, 1);
                            var entries = getInternalParamsState(this).entries;
                            var key = name + "";
                            var result = [];
                            var index = 0;
                            for (; index < entries.length; index++) {
                                if (entries[index].key === key)
                                    result.push(entries[index].value);
                            }
                            return result;
                        },
                        // `URLSearchParams.prototype.has` method
                        // https://url.spec.whatwg.org/#dom-urlsearchparams-has
                        has: function has(name) {
                            validateArgumentsLength(arguments.length, 1);
                            var entries = getInternalParamsState(this).entries;
                            var key = name + "";
                            var index = 0;
                            while (index < entries.length) {
                                if (entries[index++].key === key) return true;
                            }
                            return false;
                        },
                        // `URLSearchParams.prototype.set` method
                        // https://url.spec.whatwg.org/#dom-urlsearchparams-set
                        set: function set(name, value) {
                            validateArgumentsLength(arguments.length, 1);
                            var state = getInternalParamsState(this);
                            var entries = state.entries;
                            var found = false;
                            var key = name + "";
                            var val = value + "";
                            var index = 0;
                            var entry;
                            for (; index < entries.length; index++) {
                                entry = entries[index];
                                if (entry.key === key) {
                                    if (found) entries.splice(index--, 1);
                                    else {
                                        found = true;
                                        entry.value = val;
                                    }
                                }
                            }
                            if (!found) entries.push({ key: key, value: val });
                            state.updateURL();
                        },
                        // `URLSearchParams.prototype.sort` method
                        // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
                        sort: function sort() {
                            var state = getInternalParamsState(this);
                            var entries = state.entries;
                            // Array#sort is not stable in some engines
                            var slice = entries.slice();
                            var entry, entriesIndex, sliceIndex;
                            entries.length = 0;
                            for (
                                sliceIndex = 0;
                                sliceIndex < slice.length;
                                sliceIndex++
                            ) {
                                entry = slice[sliceIndex];
                                for (
                                    entriesIndex = 0;
                                    entriesIndex < sliceIndex;
                                    entriesIndex++
                                ) {
                                    if (entries[entriesIndex].key > entry.key) {
                                        entries.splice(entriesIndex, 0, entry);
                                        break;
                                    }
                                }
                                if (entriesIndex === sliceIndex)
                                    entries.push(entry);
                            }
                            state.updateURL();
                        },
                        // `URLSearchParams.prototype.forEach` method
                        forEach: function forEach(callback /* , thisArg */) {
                            var entries = getInternalParamsState(this).entries;
                            var boundFunction = bind(
                                callback,
                                arguments.length > 1 ? arguments[1] : undefined,
                                3,
                            );
                            var index = 0;
                            var entry;
                            while (index < entries.length) {
                                entry = entries[index++];
                                boundFunction(entry.value, entry.key, this);
                            }
                        },
                        // `URLSearchParams.prototype.keys` method
                        keys: function keys() {
                            return new URLSearchParamsIterator(this, "keys");
                        },
                        // `URLSearchParams.prototype.values` method
                        values: function values() {
                            return new URLSearchParamsIterator(this, "values");
                        },
                        // `URLSearchParams.prototype.entries` method
                        entries: function entries() {
                            return new URLSearchParamsIterator(this, "entries");
                        },
                    },
                    { enumerable: true },
                );

                // `URLSearchParams.prototype[@@iterator]` method
                redefine(
                    URLSearchParamsPrototype,
                    ITERATOR,
                    URLSearchParamsPrototype.entries,
                );

                // `URLSearchParams.prototype.toString` method
                // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
                redefine(
                    URLSearchParamsPrototype,
                    "toString",
                    function toString() {
                        var entries = getInternalParamsState(this).entries;
                        var result = [];
                        var index = 0;
                        var entry;
                        while (index < entries.length) {
                            entry = entries[index++];
                            result.push(
                                serialize(entry.key) +
                                    "=" +
                                    serialize(entry.value),
                            );
                        }
                        return result.join("&");
                    },
                    { enumerable: true },
                );

                setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

                $(
                    { global: true, forced: !USE_NATIVE_URL },
                    {
                        URLSearchParams: URLSearchParamsConstructor,
                    },
                );

                // Wrap `fetch` for correct work with polyfilled `URLSearchParams`
                // https://github.com/zloirock/core-js/issues/674
                if (
                    !USE_NATIVE_URL &&
                    typeof $fetch == "function" &&
                    typeof Headers == "function"
                ) {
                    $(
                        { global: true, enumerable: true, forced: true },
                        {
                            fetch: function fetch(input /* , init */) {
                                var args = [input];
                                var init, body, headers;
                                if (arguments.length > 1) {
                                    init = arguments[1];
                                    if (isObject(init)) {
                                        body = init.body;
                                        if (
                                            classof(body) === URL_SEARCH_PARAMS
                                        ) {
                                            headers = init.headers
                                                ? new Headers(init.headers)
                                                : new Headers();
                                            if (!headers.has("content-type")) {
                                                headers.set(
                                                    "content-type",
                                                    "application/x-www-form-urlencoded;charset=UTF-8",
                                                );
                                            }
                                            init = create(init, {
                                                body: createPropertyDescriptor(
                                                    0,
                                                    String(body),
                                                ),
                                                headers: createPropertyDescriptor(
                                                    0,
                                                    headers,
                                                ),
                                            });
                                        }
                                    }
                                    args.push(init);
                                }
                                return $fetch.apply(this, args);
                            },
                        },
                    );
                }

                module.exports = {
                    URLSearchParams: URLSearchParamsConstructor,
                    getState: getInternalParamsState,
                };
            },
            {
                "../internals/an-instance": 41,
                "../internals/an-object": 42,
                "../internals/bind-context": 55,
                "../internals/classof": 59,
                "../internals/create-iterator-constructor": 67,
                "../internals/create-property-descriptor": 69,
                "../internals/export": 79,
                "../internals/get-built-in": 89,
                "../internals/get-iterator": 91,
                "../internals/get-iterator-method": 90,
                "../internals/has": 93,
                "../internals/internal-state": 101,
                "../internals/is-object": 107,
                "../internals/native-url": 120,
                "../internals/object-create": 126,
                "../internals/redefine": 148,
                "../internals/redefine-all": 147,
                "../internals/set-to-string-tag": 156,
                "../internals/well-known-symbol": 184,
                "../modules/es.array.iterator": 204,
            },
        ],
        397: [
            function(require, module, exports) {
                "use strict";
                // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
                require("../modules/es.string.iterator");
                var $ = require("../internals/export");
                var DESCRIPTORS = require("../internals/descriptors");
                var USE_NATIVE_URL = require("../internals/native-url");
                var global = require("../internals/global");
                var defineProperties = require("../internals/object-define-properties");
                var redefine = require("../internals/redefine");
                var anInstance = require("../internals/an-instance");
                var has = require("../internals/has");
                var assign = require("../internals/object-assign");
                var arrayFrom = require("../internals/array-from");
                var codeAt = require("../internals/string-multibyte").codeAt;
                var toASCII = require("../internals/punycode-to-ascii");
                var setToStringTag = require("../internals/set-to-string-tag");
                var URLSearchParamsModule = require("../modules/web.url-search-params");
                var InternalStateModule = require("../internals/internal-state");

                var NativeURL = global.URL;
                var URLSearchParams = URLSearchParamsModule.URLSearchParams;
                var getInternalSearchParamsState =
                    URLSearchParamsModule.getState;
                var setInternalState = InternalStateModule.set;
                var getInternalURLState = InternalStateModule.getterFor("URL");
                var floor = Math.floor;
                var pow = Math.pow;

                var INVALID_AUTHORITY = "Invalid authority";
                var INVALID_SCHEME = "Invalid scheme";
                var INVALID_HOST = "Invalid host";
                var INVALID_PORT = "Invalid port";

                var ALPHA = /[A-Za-z]/;
                var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
                var DIGIT = /\d/;
                var HEX_START = /^(0x|0X)/;
                var OCT = /^[0-7]+$/;
                var DEC = /^\d+$/;
                var HEX = /^[\dA-Fa-f]+$/;
                // eslint-disable-next-line no-control-regex
                var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
                // eslint-disable-next-line no-control-regex
                var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
                // eslint-disable-next-line no-control-regex
                var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
                // eslint-disable-next-line no-control-regex
                var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
                var EOF;

                var parseHost = function(url, input) {
                    var result, codePoints, index;
                    if (input.charAt(0) == "[") {
                        if (input.charAt(input.length - 1) != "]")
                            return INVALID_HOST;
                        result = parseIPv6(input.slice(1, -1));
                        if (!result) return INVALID_HOST;
                        url.host = result;
                        // opaque host
                    } else if (!isSpecial(url)) {
                        if (
                            FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(
                                input,
                            )
                        )
                            return INVALID_HOST;
                        result = "";
                        codePoints = arrayFrom(input);
                        for (index = 0; index < codePoints.length; index++) {
                            result += percentEncode(
                                codePoints[index],
                                C0ControlPercentEncodeSet,
                            );
                        }
                        url.host = result;
                    } else {
                        input = toASCII(input);
                        if (FORBIDDEN_HOST_CODE_POINT.test(input))
                            return INVALID_HOST;
                        result = parseIPv4(input);
                        if (result === null) return INVALID_HOST;
                        url.host = result;
                    }
                };

                var parseIPv4 = function(input) {
                    var parts = input.split(".");
                    var partsLength, numbers, index, part, radix, number, ipv4;
                    if (parts.length && parts[parts.length - 1] == "") {
                        parts.pop();
                    }
                    partsLength = parts.length;
                    if (partsLength > 4) return input;
                    numbers = [];
                    for (index = 0; index < partsLength; index++) {
                        part = parts[index];
                        if (part == "") return input;
                        radix = 10;
                        if (part.length > 1 && part.charAt(0) == "0") {
                            radix = HEX_START.test(part) ? 16 : 8;
                            part = part.slice(radix == 8 ? 1 : 2);
                        }
                        if (part === "") {
                            number = 0;
                        } else {
                            if (
                                !(radix == 10
                                    ? DEC
                                    : radix == 8
                                    ? OCT
                                    : HEX
                                ).test(part)
                            )
                                return input;
                            number = parseInt(part, radix);
                        }
                        numbers.push(number);
                    }
                    for (index = 0; index < partsLength; index++) {
                        number = numbers[index];
                        if (index == partsLength - 1) {
                            if (number >= pow(256, 5 - partsLength))
                                return null;
                        } else if (number > 255) return null;
                    }
                    ipv4 = numbers.pop();
                    for (index = 0; index < numbers.length; index++) {
                        ipv4 += numbers[index] * pow(256, 3 - index);
                    }
                    return ipv4;
                };

                // eslint-disable-next-line max-statements
                var parseIPv6 = function(input) {
                    var address = [0, 0, 0, 0, 0, 0, 0, 0];
                    var pieceIndex = 0;
                    var compress = null;
                    var pointer = 0;
                    var value,
                        length,
                        numbersSeen,
                        ipv4Piece,
                        number,
                        swaps,
                        swap;

                    var char = function() {
                        return input.charAt(pointer);
                    };

                    if (char() == ":") {
                        if (input.charAt(1) != ":") return;
                        pointer += 2;
                        pieceIndex++;
                        compress = pieceIndex;
                    }
                    while (char()) {
                        if (pieceIndex == 8) return;
                        if (char() == ":") {
                            if (compress !== null) return;
                            pointer++;
                            pieceIndex++;
                            compress = pieceIndex;
                            continue;
                        }
                        value = length = 0;
                        while (length < 4 && HEX.test(char())) {
                            value = value * 16 + parseInt(char(), 16);
                            pointer++;
                            length++;
                        }
                        if (char() == ".") {
                            if (length == 0) return;
                            pointer -= length;
                            if (pieceIndex > 6) return;
                            numbersSeen = 0;
                            while (char()) {
                                ipv4Piece = null;
                                if (numbersSeen > 0) {
                                    if (char() == "." && numbersSeen < 4)
                                        pointer++;
                                    else return;
                                }
                                if (!DIGIT.test(char())) return;
                                while (DIGIT.test(char())) {
                                    number = parseInt(char(), 10);
                                    if (ipv4Piece === null) ipv4Piece = number;
                                    else if (ipv4Piece == 0) return;
                                    else ipv4Piece = ipv4Piece * 10 + number;
                                    if (ipv4Piece > 255) return;
                                    pointer++;
                                }
                                address[pieceIndex] =
                                    address[pieceIndex] * 256 + ipv4Piece;
                                numbersSeen++;
                                if (numbersSeen == 2 || numbersSeen == 4)
                                    pieceIndex++;
                            }
                            if (numbersSeen != 4) return;
                            break;
                        } else if (char() == ":") {
                            pointer++;
                            if (!char()) return;
                        } else if (char()) return;
                        address[pieceIndex++] = value;
                    }
                    if (compress !== null) {
                        swaps = pieceIndex - compress;
                        pieceIndex = 7;
                        while (pieceIndex != 0 && swaps > 0) {
                            swap = address[pieceIndex];
                            address[pieceIndex--] =
                                address[compress + swaps - 1];
                            address[compress + --swaps] = swap;
                        }
                    } else if (pieceIndex != 8) return;
                    return address;
                };

                var findLongestZeroSequence = function(ipv6) {
                    var maxIndex = null;
                    var maxLength = 1;
                    var currStart = null;
                    var currLength = 0;
                    var index = 0;
                    for (; index < 8; index++) {
                        if (ipv6[index] !== 0) {
                            if (currLength > maxLength) {
                                maxIndex = currStart;
                                maxLength = currLength;
                            }
                            currStart = null;
                            currLength = 0;
                        } else {
                            if (currStart === null) currStart = index;
                            ++currLength;
                        }
                    }
                    if (currLength > maxLength) {
                        maxIndex = currStart;
                        maxLength = currLength;
                    }
                    return maxIndex;
                };

                var serializeHost = function(host) {
                    var result, index, compress, ignore0;
                    // ipv4
                    if (typeof host == "number") {
                        result = [];
                        for (index = 0; index < 4; index++) {
                            result.unshift(host % 256);
                            host = floor(host / 256);
                        }
                        return result.join(".");
                        // ipv6
                    } else if (typeof host == "object") {
                        result = "";
                        compress = findLongestZeroSequence(host);
                        for (index = 0; index < 8; index++) {
                            if (ignore0 && host[index] === 0) continue;
                            if (ignore0) ignore0 = false;
                            if (compress === index) {
                                result += index ? ":" : "::";
                                ignore0 = true;
                            } else {
                                result += host[index].toString(16);
                                if (index < 7) result += ":";
                            }
                        }
                        return "[" + result + "]";
                    }
                    return host;
                };

                var C0ControlPercentEncodeSet = {};
                var fragmentPercentEncodeSet = assign(
                    {},
                    C0ControlPercentEncodeSet,
                    {
                        " ": 1,
                        '"': 1,
                        "<": 1,
                        ">": 1,
                        "`": 1,
                    },
                );
                var pathPercentEncodeSet = assign(
                    {},
                    fragmentPercentEncodeSet,
                    {
                        "#": 1,
                        "?": 1,
                        "{": 1,
                        "}": 1,
                    },
                );
                var userinfoPercentEncodeSet = assign(
                    {},
                    pathPercentEncodeSet,
                    {
                        "/": 1,
                        ":": 1,
                        ";": 1,
                        "=": 1,
                        "@": 1,
                        "[": 1,
                        "\\": 1,
                        "]": 1,
                        "^": 1,
                        "|": 1,
                    },
                );

                var percentEncode = function(char, set) {
                    var code = codeAt(char, 0);
                    return code > 0x20 && code < 0x7f && !has(set, char)
                        ? char
                        : encodeURIComponent(char);
                };

                var specialSchemes = {
                    ftp: 21,
                    file: null,
                    http: 80,
                    https: 443,
                    ws: 80,
                    wss: 443,
                };

                var isSpecial = function(url) {
                    return has(specialSchemes, url.scheme);
                };

                var includesCredentials = function(url) {
                    return url.username != "" || url.password != "";
                };

                var cannotHaveUsernamePasswordPort = function(url) {
                    return (
                        !url.host ||
                        url.cannotBeABaseURL ||
                        url.scheme == "file"
                    );
                };

                var isWindowsDriveLetter = function(string, normalized) {
                    var second;
                    return (
                        string.length == 2 &&
                        ALPHA.test(string.charAt(0)) &&
                        ((second = string.charAt(1)) == ":" ||
                            (!normalized && second == "|"))
                    );
                };

                var startsWithWindowsDriveLetter = function(string) {
                    var third;
                    return (
                        string.length > 1 &&
                        isWindowsDriveLetter(string.slice(0, 2)) &&
                        (string.length == 2 ||
                            (third = string.charAt(2)) === "/" ||
                                third === "\\" ||
                                third === "?" ||
                                third === "#")
                    );
                };

                var shortenURLsPath = function(url) {
                    var path = url.path;
                    var pathSize = path.length;
                    if (
                        pathSize &&
                        (url.scheme != "file" ||
                            pathSize != 1 ||
                            !isWindowsDriveLetter(path[0], true))
                    ) {
                        path.pop();
                    }
                };

                var isSingleDot = function(segment) {
                    return segment === "." || segment.toLowerCase() === "%2e";
                };

                var isDoubleDot = function(segment) {
                    segment = segment.toLowerCase();
                    return (
                        segment === ".." ||
                        segment === "%2e." ||
                        segment === ".%2e" ||
                        segment === "%2e%2e"
                    );
                };

                // States:
                var SCHEME_START = {};
                var SCHEME = {};
                var NO_SCHEME = {};
                var SPECIAL_RELATIVE_OR_AUTHORITY = {};
                var PATH_OR_AUTHORITY = {};
                var RELATIVE = {};
                var RELATIVE_SLASH = {};
                var SPECIAL_AUTHORITY_SLASHES = {};
                var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
                var AUTHORITY = {};
                var HOST = {};
                var HOSTNAME = {};
                var PORT = {};
                var FILE = {};
                var FILE_SLASH = {};
                var FILE_HOST = {};
                var PATH_START = {};
                var PATH = {};
                var CANNOT_BE_A_BASE_URL_PATH = {};
                var QUERY = {};
                var FRAGMENT = {};

                // eslint-disable-next-line max-statements
                var parseURL = function(url, input, stateOverride, base) {
                    var state = stateOverride || SCHEME_START;
                    var pointer = 0;
                    var buffer = "";
                    var seenAt = false;
                    var seenBracket = false;
                    var seenPasswordToken = false;
                    var codePoints, char, bufferCodePoints, failure;

                    if (!stateOverride) {
                        url.scheme = "";
                        url.username = "";
                        url.password = "";
                        url.host = null;
                        url.port = null;
                        url.path = [];
                        url.query = null;
                        url.fragment = null;
                        url.cannotBeABaseURL = false;
                        input = input.replace(
                            LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE,
                            "",
                        );
                    }

                    input = input.replace(TAB_AND_NEW_LINE, "");

                    codePoints = arrayFrom(input);

                    while (pointer <= codePoints.length) {
                        char = codePoints[pointer];
                        switch (state) {
                            case SCHEME_START:
                                if (char && ALPHA.test(char)) {
                                    buffer += char.toLowerCase();
                                    state = SCHEME;
                                } else if (!stateOverride) {
                                    state = NO_SCHEME;
                                    continue;
                                } else return INVALID_SCHEME;
                                break;

                            case SCHEME:
                                if (
                                    char &&
                                    (ALPHANUMERIC.test(char) ||
                                        char == "+" ||
                                        char == "-" ||
                                        char == ".")
                                ) {
                                    buffer += char.toLowerCase();
                                } else if (char == ":") {
                                    if (
                                        stateOverride &&
                                        (isSpecial(url) !=
                                            has(specialSchemes, buffer) ||
                                            (buffer == "file" &&
                                                (includesCredentials(url) ||
                                                    url.port !== null)) ||
                                            (url.scheme == "file" && !url.host))
                                    )
                                        return;
                                    url.scheme = buffer;
                                    if (stateOverride) {
                                        if (
                                            isSpecial(url) &&
                                            specialSchemes[url.scheme] ==
                                                url.port
                                        )
                                            url.port = null;
                                        return;
                                    }
                                    buffer = "";
                                    if (url.scheme == "file") {
                                        state = FILE;
                                    } else if (
                                        isSpecial(url) &&
                                        base &&
                                        base.scheme == url.scheme
                                    ) {
                                        state = SPECIAL_RELATIVE_OR_AUTHORITY;
                                    } else if (isSpecial(url)) {
                                        state = SPECIAL_AUTHORITY_SLASHES;
                                    } else if (codePoints[pointer + 1] == "/") {
                                        state = PATH_OR_AUTHORITY;
                                        pointer++;
                                    } else {
                                        url.cannotBeABaseURL = true;
                                        url.path.push("");
                                        state = CANNOT_BE_A_BASE_URL_PATH;
                                    }
                                } else if (!stateOverride) {
                                    buffer = "";
                                    state = NO_SCHEME;
                                    pointer = 0;
                                    continue;
                                } else return INVALID_SCHEME;
                                break;

                            case NO_SCHEME:
                                if (
                                    !base ||
                                    (base.cannotBeABaseURL && char != "#")
                                )
                                    return INVALID_SCHEME;
                                if (base.cannotBeABaseURL && char == "#") {
                                    url.scheme = base.scheme;
                                    url.path = base.path.slice();
                                    url.query = base.query;
                                    url.fragment = "";
                                    url.cannotBeABaseURL = true;
                                    state = FRAGMENT;
                                    break;
                                }
                                state = base.scheme == "file" ? FILE : RELATIVE;
                                continue;

                            case SPECIAL_RELATIVE_OR_AUTHORITY:
                                if (
                                    char == "/" &&
                                    codePoints[pointer + 1] == "/"
                                ) {
                                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                                    pointer++;
                                } else {
                                    state = RELATIVE;
                                    continue;
                                }
                                break;

                            case PATH_OR_AUTHORITY:
                                if (char == "/") {
                                    state = AUTHORITY;
                                    break;
                                } else {
                                    state = PATH;
                                    continue;
                                }

                            case RELATIVE:
                                url.scheme = base.scheme;
                                if (char == EOF) {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    url.path = base.path.slice();
                                    url.query = base.query;
                                } else if (
                                    char == "/" ||
                                    (char == "\\" && isSpecial(url))
                                ) {
                                    state = RELATIVE_SLASH;
                                } else if (char == "?") {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    url.path = base.path.slice();
                                    url.query = "";
                                    state = QUERY;
                                } else if (char == "#") {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    url.path = base.path.slice();
                                    url.query = base.query;
                                    url.fragment = "";
                                    state = FRAGMENT;
                                } else {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    url.path = base.path.slice();
                                    url.path.pop();
                                    state = PATH;
                                    continue;
                                }
                                break;

                            case RELATIVE_SLASH:
                                if (
                                    isSpecial(url) &&
                                    (char == "/" || char == "\\")
                                ) {
                                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                                } else if (char == "/") {
                                    state = AUTHORITY;
                                } else {
                                    url.username = base.username;
                                    url.password = base.password;
                                    url.host = base.host;
                                    url.port = base.port;
                                    state = PATH;
                                    continue;
                                }
                                break;

                            case SPECIAL_AUTHORITY_SLASHES:
                                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                                if (
                                    char != "/" ||
                                    buffer.charAt(pointer + 1) != "/"
                                )
                                    continue;
                                pointer++;
                                break;

                            case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                                if (char != "/" && char != "\\") {
                                    state = AUTHORITY;
                                    continue;
                                }
                                break;

                            case AUTHORITY:
                                if (char == "@") {
                                    if (seenAt) buffer = "%40" + buffer;
                                    seenAt = true;
                                    bufferCodePoints = arrayFrom(buffer);
                                    for (
                                        var i = 0;
                                        i < bufferCodePoints.length;
                                        i++
                                    ) {
                                        var codePoint = bufferCodePoints[i];
                                        if (
                                            codePoint == ":" &&
                                            !seenPasswordToken
                                        ) {
                                            seenPasswordToken = true;
                                            continue;
                                        }
                                        var encodedCodePoints = percentEncode(
                                            codePoint,
                                            userinfoPercentEncodeSet,
                                        );
                                        if (seenPasswordToken)
                                            url.password += encodedCodePoints;
                                        else url.username += encodedCodePoints;
                                    }
                                    buffer = "";
                                } else if (
                                    char == EOF ||
                                    char == "/" ||
                                    char == "?" ||
                                    char == "#" ||
                                    (char == "\\" && isSpecial(url))
                                ) {
                                    if (seenAt && buffer == "")
                                        return INVALID_AUTHORITY;
                                    pointer -= arrayFrom(buffer).length + 1;
                                    buffer = "";
                                    state = HOST;
                                } else buffer += char;
                                break;

                            case HOST:
                            case HOSTNAME:
                                if (stateOverride && url.scheme == "file") {
                                    state = FILE_HOST;
                                    continue;
                                } else if (char == ":" && !seenBracket) {
                                    if (buffer == "") return INVALID_HOST;
                                    failure = parseHost(url, buffer);
                                    if (failure) return failure;
                                    buffer = "";
                                    state = PORT;
                                    if (stateOverride == HOSTNAME) return;
                                } else if (
                                    char == EOF ||
                                    char == "/" ||
                                    char == "?" ||
                                    char == "#" ||
                                    (char == "\\" && isSpecial(url))
                                ) {
                                    if (isSpecial(url) && buffer == "")
                                        return INVALID_HOST;
                                    if (
                                        stateOverride &&
                                        buffer == "" &&
                                        (includesCredentials(url) ||
                                            url.port !== null)
                                    )
                                        return;
                                    failure = parseHost(url, buffer);
                                    if (failure) return failure;
                                    buffer = "";
                                    state = PATH_START;
                                    if (stateOverride) return;
                                    continue;
                                } else {
                                    if (char == "[") seenBracket = true;
                                    else if (char == "]") seenBracket = false;
                                    buffer += char;
                                }
                                break;

                            case PORT:
                                if (DIGIT.test(char)) {
                                    buffer += char;
                                } else if (
                                    char == EOF ||
                                    char == "/" ||
                                    char == "?" ||
                                    char == "#" ||
                                    (char == "\\" && isSpecial(url)) ||
                                    stateOverride
                                ) {
                                    if (buffer != "") {
                                        var port = parseInt(buffer, 10);
                                        if (port > 0xffff) return INVALID_PORT;
                                        url.port =
                                            isSpecial(url) &&
                                            port === specialSchemes[url.scheme]
                                                ? null
                                                : port;
                                        buffer = "";
                                    }
                                    if (stateOverride) return;
                                    state = PATH_START;
                                    continue;
                                } else return INVALID_PORT;
                                break;

                            case FILE:
                                url.scheme = "file";
                                if (char == "/" || char == "\\")
                                    state = FILE_SLASH;
                                else if (base && base.scheme == "file") {
                                    if (char == EOF) {
                                        url.host = base.host;
                                        url.path = base.path.slice();
                                        url.query = base.query;
                                    } else if (char == "?") {
                                        url.host = base.host;
                                        url.path = base.path.slice();
                                        url.query = "";
                                        state = QUERY;
                                    } else if (char == "#") {
                                        url.host = base.host;
                                        url.path = base.path.slice();
                                        url.query = base.query;
                                        url.fragment = "";
                                        state = FRAGMENT;
                                    } else {
                                        if (
                                            !startsWithWindowsDriveLetter(
                                                codePoints
                                                    .slice(pointer)
                                                    .join(""),
                                            )
                                        ) {
                                            url.host = base.host;
                                            url.path = base.path.slice();
                                            shortenURLsPath(url);
                                        }
                                        state = PATH;
                                        continue;
                                    }
                                } else {
                                    state = PATH;
                                    continue;
                                }
                                break;

                            case FILE_SLASH:
                                if (char == "/" || char == "\\") {
                                    state = FILE_HOST;
                                    break;
                                }
                                if (
                                    base &&
                                    base.scheme == "file" &&
                                    !startsWithWindowsDriveLetter(
                                        codePoints.slice(pointer).join(""),
                                    )
                                ) {
                                    if (
                                        isWindowsDriveLetter(base.path[0], true)
                                    )
                                        url.path.push(base.path[0]);
                                    else url.host = base.host;
                                }
                                state = PATH;
                                continue;

                            case FILE_HOST:
                                if (
                                    char == EOF ||
                                    char == "/" ||
                                    char == "\\" ||
                                    char == "?" ||
                                    char == "#"
                                ) {
                                    if (
                                        !stateOverride &&
                                        isWindowsDriveLetter(buffer)
                                    ) {
                                        state = PATH;
                                    } else if (buffer == "") {
                                        url.host = "";
                                        if (stateOverride) return;
                                        state = PATH_START;
                                    } else {
                                        failure = parseHost(url, buffer);
                                        if (failure) return failure;
                                        if (url.host == "localhost")
                                            url.host = "";
                                        if (stateOverride) return;
                                        buffer = "";
                                        state = PATH_START;
                                    }
                                    continue;
                                } else buffer += char;
                                break;

                            case PATH_START:
                                if (isSpecial(url)) {
                                    state = PATH;
                                    if (char != "/" && char != "\\") continue;
                                } else if (!stateOverride && char == "?") {
                                    url.query = "";
                                    state = QUERY;
                                } else if (!stateOverride && char == "#") {
                                    url.fragment = "";
                                    state = FRAGMENT;
                                } else if (char != EOF) {
                                    state = PATH;
                                    if (char != "/") continue;
                                }
                                break;

                            case PATH:
                                if (
                                    char == EOF ||
                                    char == "/" ||
                                    (char == "\\" && isSpecial(url)) ||
                                    (!stateOverride &&
                                        (char == "?" || char == "#"))
                                ) {
                                    if (isDoubleDot(buffer)) {
                                        shortenURLsPath(url);
                                        if (
                                            char != "/" &&
                                            !(char == "\\" && isSpecial(url))
                                        ) {
                                            url.path.push("");
                                        }
                                    } else if (isSingleDot(buffer)) {
                                        if (
                                            char != "/" &&
                                            !(char == "\\" && isSpecial(url))
                                        ) {
                                            url.path.push("");
                                        }
                                    } else {
                                        if (
                                            url.scheme == "file" &&
                                            !url.path.length &&
                                            isWindowsDriveLetter(buffer)
                                        ) {
                                            if (url.host) url.host = "";
                                            buffer = buffer.charAt(0) + ":"; // normalize windows drive letter
                                        }
                                        url.path.push(buffer);
                                    }
                                    buffer = "";
                                    if (
                                        url.scheme == "file" &&
                                        (char == EOF ||
                                            char == "?" ||
                                            char == "#")
                                    ) {
                                        while (
                                            url.path.length > 1 &&
                                            url.path[0] === ""
                                        ) {
                                            url.path.shift();
                                        }
                                    }
                                    if (char == "?") {
                                        url.query = "";
                                        state = QUERY;
                                    } else if (char == "#") {
                                        url.fragment = "";
                                        state = FRAGMENT;
                                    }
                                } else {
                                    buffer += percentEncode(
                                        char,
                                        pathPercentEncodeSet,
                                    );
                                }
                                break;

                            case CANNOT_BE_A_BASE_URL_PATH:
                                if (char == "?") {
                                    url.query = "";
                                    state = QUERY;
                                } else if (char == "#") {
                                    url.fragment = "";
                                    state = FRAGMENT;
                                } else if (char != EOF) {
                                    url.path[0] += percentEncode(
                                        char,
                                        C0ControlPercentEncodeSet,
                                    );
                                }
                                break;

                            case QUERY:
                                if (!stateOverride && char == "#") {
                                    url.fragment = "";
                                    state = FRAGMENT;
                                } else if (char != EOF) {
                                    if (char == "'" && isSpecial(url))
                                        url.query += "%27";
                                    else if (char == "#") url.query += "%23";
                                    else
                                        url.query += percentEncode(
                                            char,
                                            C0ControlPercentEncodeSet,
                                        );
                                }
                                break;

                            case FRAGMENT:
                                if (char != EOF)
                                    url.fragment += percentEncode(
                                        char,
                                        fragmentPercentEncodeSet,
                                    );
                                break;
                        }

                        pointer++;
                    }
                };

                // `URL` constructor
                // https://url.spec.whatwg.org/#url-class
                var URLConstructor = function URL(url /* , base */) {
                    var that = anInstance(this, URLConstructor, "URL");
                    var base = arguments.length > 1 ? arguments[1] : undefined;
                    var urlString = String(url);
                    var state = setInternalState(that, { type: "URL" });
                    var baseState, failure;
                    if (base !== undefined) {
                        if (base instanceof URLConstructor)
                            baseState = getInternalURLState(base);
                        else {
                            failure = parseURL((baseState = {}), String(base));
                            if (failure) throw TypeError(failure);
                        }
                    }
                    failure = parseURL(state, urlString, null, baseState);
                    if (failure) throw TypeError(failure);
                    var searchParams = (state.searchParams = new URLSearchParams());
                    var searchParamsState = getInternalSearchParamsState(
                        searchParams,
                    );
                    searchParamsState.updateSearchParams(state.query);
                    searchParamsState.updateURL = function() {
                        state.query = String(searchParams) || null;
                    };
                    if (!DESCRIPTORS) {
                        that.href = serializeURL.call(that);
                        that.origin = getOrigin.call(that);
                        that.protocol = getProtocol.call(that);
                        that.username = getUsername.call(that);
                        that.password = getPassword.call(that);
                        that.host = getHost.call(that);
                        that.hostname = getHostname.call(that);
                        that.port = getPort.call(that);
                        that.pathname = getPathname.call(that);
                        that.search = getSearch.call(that);
                        that.searchParams = getSearchParams.call(that);
                        that.hash = getHash.call(that);
                    }
                };

                var URLPrototype = URLConstructor.prototype;

                var serializeURL = function() {
                    var url = getInternalURLState(this);
                    var scheme = url.scheme;
                    var username = url.username;
                    var password = url.password;
                    var host = url.host;
                    var port = url.port;
                    var path = url.path;
                    var query = url.query;
                    var fragment = url.fragment;
                    var output = scheme + ":";
                    if (host !== null) {
                        output += "//";
                        if (includesCredentials(url)) {
                            output +=
                                username +
                                (password ? ":" + password : "") +
                                "@";
                        }
                        output += serializeHost(host);
                        if (port !== null) output += ":" + port;
                    } else if (scheme == "file") output += "//";
                    output += url.cannotBeABaseURL
                        ? path[0]
                        : path.length
                        ? "/" + path.join("/")
                        : "";
                    if (query !== null) output += "?" + query;
                    if (fragment !== null) output += "#" + fragment;
                    return output;
                };

                var getOrigin = function() {
                    var url = getInternalURLState(this);
                    var scheme = url.scheme;
                    var port = url.port;
                    if (scheme == "blob")
                        try {
                            return new URL(scheme.path[0]).origin;
                        } catch (error) {
                            return "null";
                        }
                    if (scheme == "file" || !isSpecial(url)) return "null";
                    return (
                        scheme +
                        "://" +
                        serializeHost(url.host) +
                        (port !== null ? ":" + port : "")
                    );
                };

                var getProtocol = function() {
                    return getInternalURLState(this).scheme + ":";
                };

                var getUsername = function() {
                    return getInternalURLState(this).username;
                };

                var getPassword = function() {
                    return getInternalURLState(this).password;
                };

                var getHost = function() {
                    var url = getInternalURLState(this);
                    var host = url.host;
                    var port = url.port;
                    return host === null
                        ? ""
                        : port === null
                        ? serializeHost(host)
                        : serializeHost(host) + ":" + port;
                };

                var getHostname = function() {
                    var host = getInternalURLState(this).host;
                    return host === null ? "" : serializeHost(host);
                };

                var getPort = function() {
                    var port = getInternalURLState(this).port;
                    return port === null ? "" : String(port);
                };

                var getPathname = function() {
                    var url = getInternalURLState(this);
                    var path = url.path;
                    return url.cannotBeABaseURL
                        ? path[0]
                        : path.length
                        ? "/" + path.join("/")
                        : "";
                };

                var getSearch = function() {
                    var query = getInternalURLState(this).query;
                    return query ? "?" + query : "";
                };

                var getSearchParams = function() {
                    return getInternalURLState(this).searchParams;
                };

                var getHash = function() {
                    var fragment = getInternalURLState(this).fragment;
                    return fragment ? "#" + fragment : "";
                };

                var accessorDescriptor = function(getter, setter) {
                    return {
                        get: getter,
                        set: setter,
                        configurable: true,
                        enumerable: true,
                    };
                };

                if (DESCRIPTORS) {
                    defineProperties(URLPrototype, {
                        // `URL.prototype.href` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-href
                        href: accessorDescriptor(serializeURL, function(href) {
                            var url = getInternalURLState(this);
                            var urlString = String(href);
                            var failure = parseURL(url, urlString);
                            if (failure) throw TypeError(failure);
                            getInternalSearchParamsState(
                                url.searchParams,
                            ).updateSearchParams(url.query);
                        }),
                        // `URL.prototype.origin` getter
                        // https://url.spec.whatwg.org/#dom-url-origin
                        origin: accessorDescriptor(getOrigin),
                        // `URL.prototype.protocol` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-protocol
                        protocol: accessorDescriptor(getProtocol, function(
                            protocol,
                        ) {
                            var url = getInternalURLState(this);
                            parseURL(url, String(protocol) + ":", SCHEME_START);
                        }),
                        // `URL.prototype.username` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-username
                        username: accessorDescriptor(getUsername, function(
                            username,
                        ) {
                            var url = getInternalURLState(this);
                            var codePoints = arrayFrom(String(username));
                            if (cannotHaveUsernamePasswordPort(url)) return;
                            url.username = "";
                            for (var i = 0; i < codePoints.length; i++) {
                                url.username += percentEncode(
                                    codePoints[i],
                                    userinfoPercentEncodeSet,
                                );
                            }
                        }),
                        // `URL.prototype.password` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-password
                        password: accessorDescriptor(getPassword, function(
                            password,
                        ) {
                            var url = getInternalURLState(this);
                            var codePoints = arrayFrom(String(password));
                            if (cannotHaveUsernamePasswordPort(url)) return;
                            url.password = "";
                            for (var i = 0; i < codePoints.length; i++) {
                                url.password += percentEncode(
                                    codePoints[i],
                                    userinfoPercentEncodeSet,
                                );
                            }
                        }),
                        // `URL.prototype.host` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-host
                        host: accessorDescriptor(getHost, function(host) {
                            var url = getInternalURLState(this);
                            if (url.cannotBeABaseURL) return;
                            parseURL(url, String(host), HOST);
                        }),
                        // `URL.prototype.hostname` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-hostname
                        hostname: accessorDescriptor(getHostname, function(
                            hostname,
                        ) {
                            var url = getInternalURLState(this);
                            if (url.cannotBeABaseURL) return;
                            parseURL(url, String(hostname), HOSTNAME);
                        }),
                        // `URL.prototype.port` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-port
                        port: accessorDescriptor(getPort, function(port) {
                            var url = getInternalURLState(this);
                            if (cannotHaveUsernamePasswordPort(url)) return;
                            port = String(port);
                            if (port == "") url.port = null;
                            else parseURL(url, port, PORT);
                        }),
                        // `URL.prototype.pathname` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-pathname
                        pathname: accessorDescriptor(getPathname, function(
                            pathname,
                        ) {
                            var url = getInternalURLState(this);
                            if (url.cannotBeABaseURL) return;
                            url.path = [];
                            parseURL(url, pathname + "", PATH_START);
                        }),
                        // `URL.prototype.search` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-search
                        search: accessorDescriptor(getSearch, function(search) {
                            var url = getInternalURLState(this);
                            search = String(search);
                            if (search == "") {
                                url.query = null;
                            } else {
                                if ("?" == search.charAt(0))
                                    search = search.slice(1);
                                url.query = "";
                                parseURL(url, search, QUERY);
                            }
                            getInternalSearchParamsState(
                                url.searchParams,
                            ).updateSearchParams(url.query);
                        }),
                        // `URL.prototype.searchParams` getter
                        // https://url.spec.whatwg.org/#dom-url-searchparams
                        searchParams: accessorDescriptor(getSearchParams),
                        // `URL.prototype.hash` accessors pair
                        // https://url.spec.whatwg.org/#dom-url-hash
                        hash: accessorDescriptor(getHash, function(hash) {
                            var url = getInternalURLState(this);
                            hash = String(hash);
                            if (hash == "") {
                                url.fragment = null;
                                return;
                            }
                            if ("#" == hash.charAt(0)) hash = hash.slice(1);
                            url.fragment = "";
                            parseURL(url, hash, FRAGMENT);
                        }),
                    });
                }

                // `URL.prototype.toJSON` method
                // https://url.spec.whatwg.org/#dom-url-tojson
                redefine(
                    URLPrototype,
                    "toJSON",
                    function toJSON() {
                        return serializeURL.call(this);
                    },
                    { enumerable: true },
                );

                // `URL.prototype.toString` method
                // https://url.spec.whatwg.org/#URL-stringification-behavior
                redefine(
                    URLPrototype,
                    "toString",
                    function toString() {
                        return serializeURL.call(this);
                    },
                    { enumerable: true },
                );

                if (NativeURL) {
                    var nativeCreateObjectURL = NativeURL.createObjectURL;
                    var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
                    // `URL.createObjectURL` method
                    // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
                    // eslint-disable-next-line no-unused-vars
                    if (nativeCreateObjectURL)
                        redefine(
                            URLConstructor,
                            "createObjectURL",
                            function createObjectURL(blob) {
                                return nativeCreateObjectURL.apply(
                                    NativeURL,
                                    arguments,
                                );
                            },
                        );
                    // `URL.revokeObjectURL` method
                    // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
                    // eslint-disable-next-line no-unused-vars
                    if (nativeRevokeObjectURL)
                        redefine(
                            URLConstructor,
                            "revokeObjectURL",
                            function revokeObjectURL(url) {
                                return nativeRevokeObjectURL.apply(
                                    NativeURL,
                                    arguments,
                                );
                            },
                        );
                }

                setToStringTag(URLConstructor, "URL");

                $(
                    {
                        global: true,
                        forced: !USE_NATIVE_URL,
                        sham: !DESCRIPTORS,
                    },
                    {
                        URL: URLConstructor,
                    },
                );
            },
            {
                "../internals/an-instance": 41,
                "../internals/array-from": 48,
                "../internals/descriptors": 75,
                "../internals/export": 79,
                "../internals/global": 92,
                "../internals/has": 93,
                "../internals/internal-state": 101,
                "../internals/native-url": 120,
                "../internals/object-assign": 125,
                "../internals/object-define-properties": 127,
                "../internals/punycode-to-ascii": 146,
                "../internals/redefine": 148,
                "../internals/set-to-string-tag": 156,
                "../internals/string-multibyte": 162,
                "../modules/es.string.iterator": 321,
                "../modules/web.url-search-params": 396,
            },
        ],
        398: [
            function(require, module, exports) {
                "use strict";
                var $ = require("../internals/export");

                // `URL.prototype.toJSON` method
                // https://url.spec.whatwg.org/#dom-url-tojson
                $(
                    { target: "URL", proto: true, enumerable: true },
                    {
                        toJSON: function toJSON() {
                            return URL.prototype.toString.call(this);
                        },
                    },
                );
            },
            { "../internals/export": 79 },
        ],
        399: [
            function(require, module, exports) {
                require("../es");
                require("../web");

                module.exports = require("../internals/path");
            },
            { "../es": 36, "../internals/path": 143, "../web": 400 },
        ],
        400: [
            function(require, module, exports) {
                require("../modules/web.dom-collections.for-each");
                require("../modules/web.dom-collections.iterator");
                require("../modules/web.immediate");
                require("../modules/web.queue-microtask");
                require("../modules/web.timers");
                require("../modules/web.url");
                require("../modules/web.url.to-json");
                require("../modules/web.url-search-params");

                module.exports = require("../internals/path");
            },
            {
                "../internals/path": 143,
                "../modules/web.dom-collections.for-each": 391,
                "../modules/web.dom-collections.iterator": 392,
                "../modules/web.immediate": 393,
                "../modules/web.queue-microtask": 394,
                "../modules/web.timers": 395,
                "../modules/web.url": 397,
                "../modules/web.url-search-params": 396,
                "../modules/web.url.to-json": 398,
            },
        ],
        401: [
            function(require, module, exports) {
                exports.read = function(buffer, offset, isLE, mLen, nBytes) {
                    var e, m;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var nBits = -7;
                    var i = isLE ? nBytes - 1 : 0;
                    var d = isLE ? -1 : 1;
                    var s = buffer[offset + i];

                    i += d;

                    e = s & ((1 << -nBits) - 1);
                    s >>= -nBits;
                    nBits += eLen;
                    for (
                        ;
                        nBits > 0;
                        e = e * 256 + buffer[offset + i], i += d, nBits -= 8
                    ) {}

                    m = e & ((1 << -nBits) - 1);
                    e >>= -nBits;
                    nBits += mLen;
                    for (
                        ;
                        nBits > 0;
                        m = m * 256 + buffer[offset + i], i += d, nBits -= 8
                    ) {}

                    if (e === 0) {
                        e = 1 - eBias;
                    } else if (e === eMax) {
                        return m ? NaN : (s ? -1 : 1) * Infinity;
                    } else {
                        m = m + Math.pow(2, mLen);
                        e = e - eBias;
                    }
                    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                };

                exports.write = function(
                    buffer,
                    value,
                    offset,
                    isLE,
                    mLen,
                    nBytes,
                ) {
                    var e, m, c;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var rt =
                        mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                    var i = isLE ? 0 : nBytes - 1;
                    var d = isLE ? 1 : -1;
                    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

                    value = Math.abs(value);

                    if (isNaN(value) || value === Infinity) {
                        m = isNaN(value) ? 1 : 0;
                        e = eMax;
                    } else {
                        e = Math.floor(Math.log(value) / Math.LN2);
                        if (value * (c = Math.pow(2, -e)) < 1) {
                            e--;
                            c *= 2;
                        }
                        if (e + eBias >= 1) {
                            value += rt / c;
                        } else {
                            value += rt * Math.pow(2, 1 - eBias);
                        }
                        if (value * c >= 2) {
                            e++;
                            c /= 2;
                        }

                        if (e + eBias >= eMax) {
                            m = 0;
                            e = eMax;
                        } else if (e + eBias >= 1) {
                            m = (value * c - 1) * Math.pow(2, mLen);
                            e = e + eBias;
                        } else {
                            m =
                                value *
                                Math.pow(2, eBias - 1) *
                                Math.pow(2, mLen);
                            e = 0;
                        }
                    }

                    for (
                        ;
                        mLen >= 8;
                        buffer[offset + i] = m & 0xff,
                            i += d,
                            m /= 256,
                            mLen -= 8
                    ) {}

                    e = (e << mLen) | m;
                    eLen += mLen;
                    for (
                        ;
                        eLen > 0;
                        buffer[offset + i] = e & 0xff,
                            i += d,
                            e /= 256,
                            eLen -= 8
                    ) {}

                    buffer[offset + i - d] |= s * 128;
                };
            },
            {},
        ],
        402: [
            function(require, module, exports) {
                (function(global, Buffer) {
                    (function(f) {
                        if (
                            typeof exports === "object" &&
                            typeof module !== "undefined"
                        ) {
                            module.exports = f();
                        } else if (typeof define === "function" && define.amd) {
                            define([], f);
                        } else {
                            var g;
                            if (typeof window !== "undefined") {
                                g = window;
                            } else if (typeof global !== "undefined") {
                                g = global;
                            } else if (typeof self !== "undefined") {
                                g = self;
                            } else {
                                g = this;
                            }
                            g.realisticStructuredClone = f();
                        }
                    })(function() {
                        var define, module, exports;
                        return (function() {
                            function e(t, n, r) {
                                function s(o, u) {
                                    if (!n[o]) {
                                        if (!t[o]) {
                                            var a =
                                                typeof require == "function" &&
                                                require;
                                            if (!u && a) return a(o, !0);
                                            if (i) return i(o, !0);
                                            var f = new Error(
                                                "Cannot find module '" +
                                                    o +
                                                    "'",
                                            );
                                            throw ((f.code =
                                                "MODULE_NOT_FOUND"),
                                            f);
                                        }
                                        var l = (n[o] = { exports: {} });
                                        t[o][0].call(
                                            l.exports,
                                            function(e) {
                                                var n = t[o][1][e];
                                                return s(n ? n : e);
                                            },
                                            l,
                                            l.exports,
                                            e,
                                            t,
                                            n,
                                            r,
                                        );
                                    }
                                    return n[o].exports;
                                }
                                var i = typeof require == "function" && require;
                                for (var o = 0; o < r.length; o++) s(r[o]);
                                return s;
                            }
                            return e;
                        })()(
                            {
                                1: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        _dereq_("core-js/fn/array/includes");
                                        _dereq_("core-js/fn/object/values");
                                        var DOMException = _dereq_(
                                            "domexception",
                                        );
                                        var Typeson = _dereq_("typeson");
                                        var structuredCloningThrowing = _dereq_(
                                            "typeson-registry/dist/presets/structured-cloning-throwing",
                                        );

                                        // http://stackoverflow.com/a/33268326/786644 - works in browser, worker, and Node.js
                                        var globalVar =
                                            typeof window !== "undefined"
                                                ? window
                                                : typeof WorkerGlobalScope !==
                                                  "undefined"
                                                ? self
                                                : typeof global !== "undefined"
                                                ? global
                                                : Function("return this;")();

                                        if (!globalVar.DOMException) {
                                            globalVar.DOMException = DOMException;
                                        }

                                        var TSON = new Typeson().register(
                                            structuredCloningThrowing,
                                        );

                                        function realisticStructuredClone(obj) {
                                            return TSON.revive(
                                                TSON.encapsulate(obj),
                                            );
                                        }

                                        module.exports = realisticStructuredClone;
                                    },
                                    {
                                        "core-js/fn/array/includes": 2,
                                        "core-js/fn/object/values": 3,
                                        domexception: 44,
                                        typeson: 47,
                                        "typeson-registry/dist/presets/structured-cloning-throwing": 46,
                                    },
                                ],
                                2: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        _dereq_(
                                            "../../modules/es7.array.includes",
                                        );
                                        module.exports = _dereq_(
                                            "../../modules/_core",
                                        ).Array.includes;
                                    },
                                    {
                                        "../../modules/_core": 9,
                                        "../../modules/es7.array.includes": 39,
                                    },
                                ],
                                3: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        _dereq_(
                                            "../../modules/es7.object.values",
                                        );
                                        module.exports = _dereq_(
                                            "../../modules/_core",
                                        ).Object.values;
                                    },
                                    {
                                        "../../modules/_core": 9,
                                        "../../modules/es7.object.values": 40,
                                    },
                                ],
                                4: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        module.exports = function(it) {
                                            if (typeof it != "function")
                                                throw TypeError(
                                                    it + " is not a function!",
                                                );
                                            return it;
                                        };
                                    },
                                    {},
                                ],
                                5: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // 22.1.3.31 Array.prototype[@@unscopables]
                                        var UNSCOPABLES = _dereq_("./_wks")(
                                            "unscopables",
                                        );
                                        var ArrayProto = Array.prototype;
                                        if (
                                            ArrayProto[UNSCOPABLES] == undefined
                                        )
                                            _dereq_("./_hide")(
                                                ArrayProto,
                                                UNSCOPABLES,
                                                {},
                                            );
                                        module.exports = function(key) {
                                            ArrayProto[UNSCOPABLES][key] = true;
                                        };
                                    },
                                    { "./_hide": 19, "./_wks": 38 },
                                ],
                                6: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var isObject = _dereq_("./_is-object");
                                        module.exports = function(it) {
                                            if (!isObject(it))
                                                throw TypeError(
                                                    it + " is not an object!",
                                                );
                                            return it;
                                        };
                                    },
                                    { "./_is-object": 22 },
                                ],
                                7: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // false -> Array#indexOf
                                        // true  -> Array#includes
                                        var toIObject = _dereq_(
                                            "./_to-iobject",
                                        );
                                        var toLength = _dereq_("./_to-length");
                                        var toAbsoluteIndex = _dereq_(
                                            "./_to-absolute-index",
                                        );
                                        module.exports = function(IS_INCLUDES) {
                                            return function(
                                                $this,
                                                el,
                                                fromIndex,
                                            ) {
                                                var O = toIObject($this);
                                                var length = toLength(O.length);
                                                var index = toAbsoluteIndex(
                                                    fromIndex,
                                                    length,
                                                );
                                                var value;
                                                // Array#includes uses SameValueZero equality algorithm
                                                // eslint-disable-next-line no-self-compare
                                                if (IS_INCLUDES && el != el)
                                                    while (length > index) {
                                                        value = O[index++];
                                                        // eslint-disable-next-line no-self-compare
                                                        if (value != value)
                                                            return true;
                                                        // Array#indexOf ignores holes, Array#includes - not
                                                    }
                                                else
                                                    for (
                                                        ;
                                                        length > index;
                                                        index++
                                                    ) {
                                                        if (
                                                            IS_INCLUDES ||
                                                            index in O
                                                        ) {
                                                            if (O[index] === el)
                                                                return (
                                                                    IS_INCLUDES ||
                                                                    index ||
                                                                    0
                                                                );
                                                        }
                                                    }
                                                return !IS_INCLUDES && -1;
                                            };
                                        };
                                    },
                                    {
                                        "./_to-absolute-index": 32,
                                        "./_to-iobject": 34,
                                        "./_to-length": 35,
                                    },
                                ],
                                8: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var toString = {}.toString;

                                        module.exports = function(it) {
                                            return toString
                                                .call(it)
                                                .slice(8, -1);
                                        };
                                    },
                                    {},
                                ],
                                9: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var core = (module.exports = {
                                            version: "2.5.3",
                                        });
                                        if (typeof __e == "number") __e = core; // eslint-disable-line no-undef
                                    },
                                    {},
                                ],
                                10: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // optional / simple context binding
                                        var aFunction = _dereq_(
                                            "./_a-function",
                                        );
                                        module.exports = function(
                                            fn,
                                            that,
                                            length,
                                        ) {
                                            aFunction(fn);
                                            if (that === undefined) return fn;
                                            switch (length) {
                                                case 1:
                                                    return function(a) {
                                                        return fn.call(that, a);
                                                    };
                                                case 2:
                                                    return function(a, b) {
                                                        return fn.call(
                                                            that,
                                                            a,
                                                            b,
                                                        );
                                                    };
                                                case 3:
                                                    return function(a, b, c) {
                                                        return fn.call(
                                                            that,
                                                            a,
                                                            b,
                                                            c,
                                                        );
                                                    };
                                            }
                                            return function() /* ...args */ {
                                                return fn.apply(
                                                    that,
                                                    arguments,
                                                );
                                            };
                                        };
                                    },
                                    { "./_a-function": 4 },
                                ],
                                11: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // 7.2.1 RequireObjectCoercible(argument)
                                        module.exports = function(it) {
                                            if (it == undefined)
                                                throw TypeError(
                                                    "Can't call method on  " +
                                                        it,
                                                );
                                            return it;
                                        };
                                    },
                                    {},
                                ],
                                12: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // Thank's IE8 for his funny defineProperty
                                        module.exports = !_dereq_("./_fails")(
                                            function() {
                                                return (
                                                    Object.defineProperty(
                                                        {},
                                                        "a",
                                                        {
                                                            get: function get() {
                                                                return 7;
                                                            },
                                                        },
                                                    ).a != 7
                                                );
                                            },
                                        );
                                    },
                                    { "./_fails": 16 },
                                ],
                                13: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var isObject = _dereq_("./_is-object");
                                        var document = _dereq_("./_global")
                                            .document;
                                        // typeof document.createElement is 'object' in old IE
                                        var is =
                                            isObject(document) &&
                                            isObject(document.createElement);
                                        module.exports = function(it) {
                                            return is
                                                ? document.createElement(it)
                                                : {};
                                        };
                                    },
                                    { "./_global": 17, "./_is-object": 22 },
                                ],
                                14: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // IE 8- don't enum bug keys
                                        module.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(
                                            ",",
                                        );
                                    },
                                    {},
                                ],
                                15: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var global = _dereq_("./_global");
                                        var core = _dereq_("./_core");
                                        var hide = _dereq_("./_hide");
                                        var redefine = _dereq_("./_redefine");
                                        var ctx = _dereq_("./_ctx");
                                        var PROTOTYPE = "prototype";

                                        var $export = function $export(
                                            type,
                                            name,
                                            source,
                                        ) {
                                            var IS_FORCED = type & $export.F;
                                            var IS_GLOBAL = type & $export.G;
                                            var IS_STATIC = type & $export.S;
                                            var IS_PROTO = type & $export.P;
                                            var IS_BIND = type & $export.B;
                                            var target = IS_GLOBAL
                                                ? global
                                                : IS_STATIC
                                                ? global[name] ||
                                                  (global[name] = {})
                                                : (global[name] || {})[
                                                      PROTOTYPE
                                                  ];
                                            var exports = IS_GLOBAL
                                                ? core
                                                : core[name] ||
                                                  (core[name] = {});
                                            var expProto =
                                                exports[PROTOTYPE] ||
                                                (exports[PROTOTYPE] = {});
                                            var key, own, out, exp;
                                            if (IS_GLOBAL) source = name;
                                            for (key in source) {
                                                // contains in native
                                                own =
                                                    !IS_FORCED &&
                                                    target &&
                                                    target[key] !== undefined;
                                                // export native or passed
                                                out = (own ? target : source)[
                                                    key
                                                ];
                                                // bind timers to global for call from export context
                                                exp =
                                                    IS_BIND && own
                                                        ? ctx(out, global)
                                                        : IS_PROTO &&
                                                          typeof out ==
                                                              "function"
                                                        ? ctx(
                                                              Function.call,
                                                              out,
                                                          )
                                                        : out;
                                                // extend global
                                                if (target)
                                                    redefine(
                                                        target,
                                                        key,
                                                        out,
                                                        type & $export.U,
                                                    );
                                                // export
                                                if (exports[key] != out)
                                                    hide(exports, key, exp);
                                                if (
                                                    IS_PROTO &&
                                                    expProto[key] != out
                                                )
                                                    expProto[key] = out;
                                            }
                                        };
                                        global.core = core;
                                        // type bitmap
                                        $export.F = 1; // forced
                                        $export.G = 2; // global
                                        $export.S = 4; // static
                                        $export.P = 8; // proto
                                        $export.B = 16; // bind
                                        $export.W = 32; // wrap
                                        $export.U = 64; // safe
                                        $export.R = 128; // real proto method for `library`
                                        module.exports = $export;
                                    },
                                    {
                                        "./_core": 9,
                                        "./_ctx": 10,
                                        "./_global": 17,
                                        "./_hide": 19,
                                        "./_redefine": 29,
                                    },
                                ],
                                16: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        module.exports = function(exec) {
                                            try {
                                                return !!exec();
                                            } catch (e) {
                                                return true;
                                            }
                                        };
                                    },
                                    {},
                                ],
                                17: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                                        var global = (module.exports =
                                            typeof window != "undefined" &&
                                            window.Math == Math
                                                ? window
                                                : typeof self != "undefined" &&
                                                  self.Math == Math
                                                ? self
                                                : // eslint-disable-next-line no-new-func
                                                  Function("return this")());
                                        if (typeof __g == "number")
                                            __g = global; // eslint-disable-line no-undef
                                    },
                                    {},
                                ],
                                18: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var hasOwnProperty = {}.hasOwnProperty;
                                        module.exports = function(it, key) {
                                            return hasOwnProperty.call(it, key);
                                        };
                                    },
                                    {},
                                ],
                                19: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var dP = _dereq_("./_object-dp");
                                        var createDesc = _dereq_(
                                            "./_property-desc",
                                        );
                                        module.exports = _dereq_(
                                            "./_descriptors",
                                        )
                                            ? function(object, key, value) {
                                                  return dP.f(
                                                      object,
                                                      key,
                                                      createDesc(1, value),
                                                  );
                                              }
                                            : function(object, key, value) {
                                                  object[key] = value;
                                                  return object;
                                              };
                                    },
                                    {
                                        "./_descriptors": 12,
                                        "./_object-dp": 23,
                                        "./_property-desc": 28,
                                    },
                                ],
                                20: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        module.exports =
                                            !_dereq_("./_descriptors") &&
                                            !_dereq_("./_fails")(function() {
                                                return (
                                                    Object.defineProperty(
                                                        _dereq_(
                                                            "./_dom-create",
                                                        )("div"),
                                                        "a",
                                                        {
                                                            get: function get() {
                                                                return 7;
                                                            },
                                                        },
                                                    ).a != 7
                                                );
                                            });
                                    },
                                    {
                                        "./_descriptors": 12,
                                        "./_dom-create": 13,
                                        "./_fails": 16,
                                    },
                                ],
                                21: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // fallback for non-array-like ES3 and non-enumerable old V8 strings
                                        var cof = _dereq_("./_cof");
                                        // eslint-disable-next-line no-prototype-builtins
                                        module.exports = Object(
                                            "z",
                                        ).propertyIsEnumerable(0)
                                            ? Object
                                            : function(it) {
                                                  return cof(it) == "String"
                                                      ? it.split("")
                                                      : Object(it);
                                              };
                                    },
                                    { "./_cof": 8 },
                                ],
                                22: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var _typeof =
                                            typeof Symbol === "function" &&
                                            typeof Symbol.iterator === "symbol"
                                                ? function(obj) {
                                                      return typeof obj;
                                                  }
                                                : function(obj) {
                                                      return obj &&
                                                          typeof Symbol ===
                                                              "function" &&
                                                          obj.constructor ===
                                                              Symbol &&
                                                          obj !==
                                                              Symbol.prototype
                                                          ? "symbol"
                                                          : typeof obj;
                                                  };

                                        module.exports = function(it) {
                                            return (typeof it === "undefined"
                                                ? "undefined"
                                                : _typeof(it)) === "object"
                                                ? it !== null
                                                : typeof it === "function";
                                        };
                                    },
                                    {},
                                ],
                                23: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var anObject = _dereq_("./_an-object");
                                        var IE8_DOM_DEFINE = _dereq_(
                                            "./_ie8-dom-define",
                                        );
                                        var toPrimitive = _dereq_(
                                            "./_to-primitive",
                                        );
                                        var dP = Object.defineProperty;

                                        exports.f = _dereq_("./_descriptors")
                                            ? Object.defineProperty
                                            : function defineProperty(
                                                  O,
                                                  P,
                                                  Attributes,
                                              ) {
                                                  anObject(O);
                                                  P = toPrimitive(P, true);
                                                  anObject(Attributes);
                                                  if (IE8_DOM_DEFINE)
                                                      try {
                                                          return dP(
                                                              O,
                                                              P,
                                                              Attributes,
                                                          );
                                                      } catch (e) {
                                                          /* empty */
                                                      }
                                                  if (
                                                      "get" in Attributes ||
                                                      "set" in Attributes
                                                  )
                                                      throw TypeError(
                                                          "Accessors not supported!",
                                                      );
                                                  if ("value" in Attributes)
                                                      O[P] = Attributes.value;
                                                  return O;
                                              };
                                    },
                                    {
                                        "./_an-object": 6,
                                        "./_descriptors": 12,
                                        "./_ie8-dom-define": 20,
                                        "./_to-primitive": 36,
                                    },
                                ],
                                24: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var has = _dereq_("./_has");
                                        var toIObject = _dereq_(
                                            "./_to-iobject",
                                        );
                                        var arrayIndexOf = _dereq_(
                                            "./_array-includes",
                                        )(false);
                                        var IE_PROTO = _dereq_("./_shared-key")(
                                            "IE_PROTO",
                                        );

                                        module.exports = function(
                                            object,
                                            names,
                                        ) {
                                            var O = toIObject(object);
                                            var i = 0;
                                            var result = [];
                                            var key;
                                            for (key in O) {
                                                if (key != IE_PROTO)
                                                    has(O, key) &&
                                                        result.push(key);
                                            } // Don't enum bug & hidden keys
                                            while (names.length > i) {
                                                if (
                                                    has(O, (key = names[i++]))
                                                ) {
                                                    ~arrayIndexOf(
                                                        result,
                                                        key,
                                                    ) || result.push(key);
                                                }
                                            }
                                            return result;
                                        };
                                    },
                                    {
                                        "./_array-includes": 7,
                                        "./_has": 18,
                                        "./_shared-key": 30,
                                        "./_to-iobject": 34,
                                    },
                                ],
                                25: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // 19.1.2.14 / 15.2.3.14 Object.keys(O)
                                        var $keys = _dereq_(
                                            "./_object-keys-internal",
                                        );
                                        var enumBugKeys = _dereq_(
                                            "./_enum-bug-keys",
                                        );

                                        module.exports =
                                            Object.keys ||
                                            function keys(O) {
                                                return $keys(O, enumBugKeys);
                                            };
                                    },
                                    {
                                        "./_enum-bug-keys": 14,
                                        "./_object-keys-internal": 24,
                                    },
                                ],
                                26: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        exports.f = {}.propertyIsEnumerable;
                                    },
                                    {},
                                ],
                                27: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var getKeys = _dereq_("./_object-keys");
                                        var toIObject = _dereq_(
                                            "./_to-iobject",
                                        );
                                        var isEnum = _dereq_("./_object-pie").f;
                                        module.exports = function(isEntries) {
                                            return function(it) {
                                                var O = toIObject(it);
                                                var keys = getKeys(O);
                                                var length = keys.length;
                                                var i = 0;
                                                var result = [];
                                                var key;
                                                while (length > i) {
                                                    if (
                                                        isEnum.call(
                                                            O,
                                                            (key = keys[i++]),
                                                        )
                                                    ) {
                                                        result.push(
                                                            isEntries
                                                                ? [key, O[key]]
                                                                : O[key],
                                                        );
                                                    }
                                                }
                                                return result;
                                            };
                                        };
                                    },
                                    {
                                        "./_object-keys": 25,
                                        "./_object-pie": 26,
                                        "./_to-iobject": 34,
                                    },
                                ],
                                28: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        module.exports = function(
                                            bitmap,
                                            value,
                                        ) {
                                            return {
                                                enumerable: !(bitmap & 1),
                                                configurable: !(bitmap & 2),
                                                writable: !(bitmap & 4),
                                                value: value,
                                            };
                                        };
                                    },
                                    {},
                                ],
                                29: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var global = _dereq_("./_global");
                                        var hide = _dereq_("./_hide");
                                        var has = _dereq_("./_has");
                                        var SRC = _dereq_("./_uid")("src");
                                        var TO_STRING = "toString";
                                        var $toString = Function[TO_STRING];
                                        var TPL = ("" + $toString).split(
                                            TO_STRING,
                                        );

                                        _dereq_(
                                            "./_core",
                                        ).inspectSource = function(it) {
                                            return $toString.call(it);
                                        };

                                        (module.exports = function(
                                            O,
                                            key,
                                            val,
                                            safe,
                                        ) {
                                            var isFunction =
                                                typeof val == "function";
                                            if (isFunction)
                                                has(val, "name") ||
                                                    hide(val, "name", key);
                                            if (O[key] === val) return;
                                            if (isFunction)
                                                has(val, SRC) ||
                                                    hide(
                                                        val,
                                                        SRC,
                                                        O[key]
                                                            ? "" + O[key]
                                                            : TPL.join(
                                                                  String(key),
                                                              ),
                                                    );
                                            if (O === global) {
                                                O[key] = val;
                                            } else if (!safe) {
                                                delete O[key];
                                                hide(O, key, val);
                                            } else if (O[key]) {
                                                O[key] = val;
                                            } else {
                                                hide(O, key, val);
                                            }
                                            // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
                                        })(
                                            Function.prototype,
                                            TO_STRING,
                                            function toString() {
                                                return (
                                                    (typeof this ==
                                                        "function" &&
                                                        this[SRC]) ||
                                                    $toString.call(this)
                                                );
                                            },
                                        );
                                    },
                                    {
                                        "./_core": 9,
                                        "./_global": 17,
                                        "./_has": 18,
                                        "./_hide": 19,
                                        "./_uid": 37,
                                    },
                                ],
                                30: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var shared = _dereq_("./_shared")(
                                            "keys",
                                        );
                                        var uid = _dereq_("./_uid");
                                        module.exports = function(key) {
                                            return (
                                                shared[key] ||
                                                (shared[key] = uid(key))
                                            );
                                        };
                                    },
                                    { "./_shared": 31, "./_uid": 37 },
                                ],
                                31: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var global = _dereq_("./_global");
                                        var SHARED = "__core-js_shared__";
                                        var store =
                                            global[SHARED] ||
                                            (global[SHARED] = {});
                                        module.exports = function(key) {
                                            return (
                                                store[key] || (store[key] = {})
                                            );
                                        };
                                    },
                                    { "./_global": 17 },
                                ],
                                32: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var toInteger = _dereq_(
                                            "./_to-integer",
                                        );
                                        var max = Math.max;
                                        var min = Math.min;
                                        module.exports = function(
                                            index,
                                            length,
                                        ) {
                                            index = toInteger(index);
                                            return index < 0
                                                ? max(index + length, 0)
                                                : min(index, length);
                                        };
                                    },
                                    { "./_to-integer": 33 },
                                ],
                                33: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // 7.1.4 ToInteger
                                        var ceil = Math.ceil;
                                        var floor = Math.floor;
                                        module.exports = function(it) {
                                            return isNaN((it = +it))
                                                ? 0
                                                : (it > 0 ? floor : ceil)(it);
                                        };
                                    },
                                    {},
                                ],
                                34: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // to indexed object, toObject with fallback for non-array-like ES3 strings
                                        var IObject = _dereq_("./_iobject");
                                        var defined = _dereq_("./_defined");
                                        module.exports = function(it) {
                                            return IObject(defined(it));
                                        };
                                    },
                                    { "./_defined": 11, "./_iobject": 21 },
                                ],
                                35: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // 7.1.15 ToLength
                                        var toInteger = _dereq_(
                                            "./_to-integer",
                                        );
                                        var min = Math.min;
                                        module.exports = function(it) {
                                            return it > 0
                                                ? min(
                                                      toInteger(it),
                                                      0x1fffffffffffff,
                                                  )
                                                : 0; // pow(2, 53) - 1 == 9007199254740991
                                        };
                                    },
                                    { "./_to-integer": 33 },
                                ],
                                36: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // 7.1.1 ToPrimitive(input [, PreferredType])
                                        var isObject = _dereq_("./_is-object");
                                        // instead of the ES6 spec version, we didn't implement @@toPrimitive case
                                        // and the second argument - flag - preferred type is a string
                                        module.exports = function(it, S) {
                                            if (!isObject(it)) return it;
                                            var fn, val;
                                            if (
                                                S &&
                                                typeof (fn = it.toString) ==
                                                    "function" &&
                                                !isObject((val = fn.call(it)))
                                            )
                                                return val;
                                            if (
                                                typeof (fn = it.valueOf) ==
                                                    "function" &&
                                                !isObject((val = fn.call(it)))
                                            )
                                                return val;
                                            if (
                                                !S &&
                                                typeof (fn = it.toString) ==
                                                    "function" &&
                                                !isObject((val = fn.call(it)))
                                            )
                                                return val;
                                            throw TypeError(
                                                "Can't convert object to primitive value",
                                            );
                                        };
                                    },
                                    { "./_is-object": 22 },
                                ],
                                37: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var id = 0;
                                        var px = Math.random();
                                        module.exports = function(key) {
                                            return "Symbol(".concat(
                                                key === undefined ? "" : key,
                                                ")_",
                                                (++id + px).toString(36),
                                            );
                                        };
                                    },
                                    {},
                                ],
                                38: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var store = _dereq_("./_shared")("wks");
                                        var uid = _dereq_("./_uid");
                                        var _Symbol = _dereq_("./_global")
                                            .Symbol;
                                        var USE_SYMBOL =
                                            typeof _Symbol == "function";

                                        var $exports = (module.exports = function(
                                            name,
                                        ) {
                                            return (
                                                store[name] ||
                                                (store[name] =
                                                    (USE_SYMBOL &&
                                                        _Symbol[name]) ||
                                                    (USE_SYMBOL
                                                        ? _Symbol
                                                        : uid)(
                                                        "Symbol." + name,
                                                    ))
                                            );
                                        });

                                        $exports.store = store;
                                    },
                                    {
                                        "./_global": 17,
                                        "./_shared": 31,
                                        "./_uid": 37,
                                    },
                                ],
                                39: [
                                    function(_dereq_, module, exports) {
                                        "use strict";
                                        // https://github.com/tc39/Array.prototype.includes

                                        var $export = _dereq_("./_export");
                                        var $includes = _dereq_(
                                            "./_array-includes",
                                        )(true);

                                        $export($export.P, "Array", {
                                            includes: function includes(
                                                el /* , fromIndex = 0 */,
                                            ) {
                                                return $includes(
                                                    this,
                                                    el,
                                                    arguments.length > 1
                                                        ? arguments[1]
                                                        : undefined,
                                                );
                                            },
                                        });

                                        _dereq_("./_add-to-unscopables")(
                                            "includes",
                                        );
                                    },
                                    {
                                        "./_add-to-unscopables": 5,
                                        "./_array-includes": 7,
                                        "./_export": 15,
                                    },
                                ],
                                40: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // https://github.com/tc39/proposal-object-values-entries
                                        var $export = _dereq_("./_export");
                                        var $values = _dereq_(
                                            "./_object-to-array",
                                        )(false);

                                        $export($export.S, "Object", {
                                            values: function values(it) {
                                                return $values(it);
                                            },
                                        });
                                    },
                                    {
                                        "./_export": 15,
                                        "./_object-to-array": 27,
                                    },
                                ],
                                41: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var _slicedToArray = (function() {
                                            function sliceIterator(arr, i) {
                                                var _arr = [];
                                                var _n = true;
                                                var _d = false;
                                                var _e = undefined;
                                                try {
                                                    for (
                                                        var _i = arr[
                                                                Symbol.iterator
                                                            ](),
                                                            _s;
                                                        !(_n = (_s = _i.next())
                                                            .done);
                                                        _n = true
                                                    ) {
                                                        _arr.push(_s.value);
                                                        if (
                                                            i &&
                                                            _arr.length === i
                                                        )
                                                            break;
                                                    }
                                                } catch (err) {
                                                    _d = true;
                                                    _e = err;
                                                } finally {
                                                    try {
                                                        if (!_n && _i["return"])
                                                            _i["return"]();
                                                    } finally {
                                                        if (_d) throw _e;
                                                    }
                                                }
                                                return _arr;
                                            }
                                            return function(arr, i) {
                                                if (Array.isArray(arr)) {
                                                    return arr;
                                                } else if (
                                                    Symbol.iterator in
                                                    Object(arr)
                                                ) {
                                                    return sliceIterator(
                                                        arr,
                                                        i,
                                                    );
                                                } else {
                                                    throw new TypeError(
                                                        "Invalid attempt to destructure non-iterable instance",
                                                    );
                                                }
                                            };
                                        })();

                                        var _createClass = (function() {
                                            function defineProperties(
                                                target,
                                                props,
                                            ) {
                                                for (
                                                    var i = 0;
                                                    i < props.length;
                                                    i++
                                                ) {
                                                    var descriptor = props[i];
                                                    descriptor.enumerable =
                                                        descriptor.enumerable ||
                                                        false;
                                                    descriptor.configurable = true;
                                                    if ("value" in descriptor)
                                                        descriptor.writable = true;
                                                    Object.defineProperty(
                                                        target,
                                                        descriptor.key,
                                                        descriptor,
                                                    );
                                                }
                                            }
                                            return function(
                                                Constructor,
                                                protoProps,
                                                staticProps,
                                            ) {
                                                if (protoProps)
                                                    defineProperties(
                                                        Constructor.prototype,
                                                        protoProps,
                                                    );
                                                if (staticProps)
                                                    defineProperties(
                                                        Constructor,
                                                        staticProps,
                                                    );
                                                return Constructor;
                                            };
                                        })();

                                        function _classCallCheck(
                                            instance,
                                            Constructor,
                                        ) {
                                            if (
                                                !(
                                                    instance instanceof
                                                    Constructor
                                                )
                                            ) {
                                                throw new TypeError(
                                                    "Cannot call a class as a function",
                                                );
                                            }
                                        }

                                        var legacyErrorCodes = _dereq_(
                                            "./legacy-error-codes.json",
                                        );
                                        var idlUtils = _dereq_("./utils.js");

                                        exports.implementation = (function() {
                                            function DOMExceptionImpl(_ref) {
                                                var _ref2 = _slicedToArray(
                                                        _ref,
                                                        2,
                                                    ),
                                                    message = _ref2[0],
                                                    name = _ref2[1];

                                                _classCallCheck(
                                                    this,
                                                    DOMExceptionImpl,
                                                );

                                                this.name = name;
                                                this.message = message;
                                            }

                                            _createClass(DOMExceptionImpl, [
                                                {
                                                    key: "code",
                                                    get: function get() {
                                                        return (
                                                            legacyErrorCodes[
                                                                this.name
                                                            ] || 0
                                                        );
                                                    },
                                                },
                                            ]);

                                            return DOMExceptionImpl;
                                        })();

                                        // A proprietary V8 extension that causes the stack property to appear.
                                        exports.init = function(impl) {
                                            if (Error.captureStackTrace) {
                                                var wrapper = idlUtils.wrapperForImpl(
                                                    impl,
                                                );
                                                Error.captureStackTrace(
                                                    wrapper,
                                                    wrapper.constructor,
                                                );
                                            }
                                        };
                                    },
                                    {
                                        "./legacy-error-codes.json": 43,
                                        "./utils.js": 45,
                                    },
                                ],
                                42: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var conversions = _dereq_(
                                            "webidl-conversions",
                                        );
                                        var utils = _dereq_("./utils.js");

                                        var impl = utils.implSymbol;

                                        function DOMException() {
                                            var args = [];
                                            for (
                                                var i = 0;
                                                i < arguments.length && i < 2;
                                                ++i
                                            ) {
                                                args[i] = arguments[i];
                                            }

                                            if (args[0] !== undefined) {
                                                args[0] = conversions[
                                                    "DOMString"
                                                ](args[0], {
                                                    context:
                                                        "Failed to construct 'DOMException': parameter 1",
                                                });
                                            } else {
                                                args[0] = "";
                                            }

                                            if (args[1] !== undefined) {
                                                args[1] = conversions[
                                                    "DOMString"
                                                ](args[1], {
                                                    context:
                                                        "Failed to construct 'DOMException': parameter 2",
                                                });
                                            } else {
                                                args[1] = "Error";
                                            }

                                            iface.setup(this, args);
                                        }

                                        Object.defineProperty(
                                            DOMException,
                                            "prototype",
                                            {
                                                value: DOMException.prototype,
                                                writable: false,
                                                enumerable: false,
                                                configurable: false,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "name",
                                            {
                                                get: function get() {
                                                    return this[impl]["name"];
                                                },

                                                enumerable: true,
                                                configurable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "message",
                                            {
                                                get: function get() {
                                                    return this[impl][
                                                        "message"
                                                    ];
                                                },

                                                enumerable: true,
                                                configurable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "code",
                                            {
                                                get: function get() {
                                                    return this[impl]["code"];
                                                },

                                                enumerable: true,
                                                configurable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "INDEX_SIZE_ERR",
                                            {
                                                value: 1,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "INDEX_SIZE_ERR",
                                            {
                                                value: 1,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "DOMSTRING_SIZE_ERR",
                                            {
                                                value: 2,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "DOMSTRING_SIZE_ERR",
                                            {
                                                value: 2,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "HIERARCHY_REQUEST_ERR",
                                            {
                                                value: 3,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "HIERARCHY_REQUEST_ERR",
                                            {
                                                value: 3,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "WRONG_DOCUMENT_ERR",
                                            {
                                                value: 4,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "WRONG_DOCUMENT_ERR",
                                            {
                                                value: 4,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "INVALID_CHARACTER_ERR",
                                            {
                                                value: 5,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "INVALID_CHARACTER_ERR",
                                            {
                                                value: 5,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "NO_DATA_ALLOWED_ERR",
                                            {
                                                value: 6,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "NO_DATA_ALLOWED_ERR",
                                            {
                                                value: 6,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "NO_MODIFICATION_ALLOWED_ERR",
                                            {
                                                value: 7,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "NO_MODIFICATION_ALLOWED_ERR",
                                            {
                                                value: 7,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "NOT_FOUND_ERR",
                                            {
                                                value: 8,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "NOT_FOUND_ERR",
                                            {
                                                value: 8,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "NOT_SUPPORTED_ERR",
                                            {
                                                value: 9,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "NOT_SUPPORTED_ERR",
                                            {
                                                value: 9,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "INUSE_ATTRIBUTE_ERR",
                                            {
                                                value: 10,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "INUSE_ATTRIBUTE_ERR",
                                            {
                                                value: 10,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "INVALID_STATE_ERR",
                                            {
                                                value: 11,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "INVALID_STATE_ERR",
                                            {
                                                value: 11,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "SYNTAX_ERR",
                                            {
                                                value: 12,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "SYNTAX_ERR",
                                            {
                                                value: 12,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "INVALID_MODIFICATION_ERR",
                                            {
                                                value: 13,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "INVALID_MODIFICATION_ERR",
                                            {
                                                value: 13,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "NAMESPACE_ERR",
                                            {
                                                value: 14,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "NAMESPACE_ERR",
                                            {
                                                value: 14,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "INVALID_ACCESS_ERR",
                                            {
                                                value: 15,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "INVALID_ACCESS_ERR",
                                            {
                                                value: 15,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "VALIDATION_ERR",
                                            {
                                                value: 16,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "VALIDATION_ERR",
                                            {
                                                value: 16,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "TYPE_MISMATCH_ERR",
                                            {
                                                value: 17,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "TYPE_MISMATCH_ERR",
                                            {
                                                value: 17,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "SECURITY_ERR",
                                            {
                                                value: 18,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "SECURITY_ERR",
                                            {
                                                value: 18,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "NETWORK_ERR",
                                            {
                                                value: 19,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "NETWORK_ERR",
                                            {
                                                value: 19,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "ABORT_ERR",
                                            {
                                                value: 20,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "ABORT_ERR",
                                            {
                                                value: 20,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "URL_MISMATCH_ERR",
                                            {
                                                value: 21,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "URL_MISMATCH_ERR",
                                            {
                                                value: 21,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "QUOTA_EXCEEDED_ERR",
                                            {
                                                value: 22,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "QUOTA_EXCEEDED_ERR",
                                            {
                                                value: 22,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "TIMEOUT_ERR",
                                            {
                                                value: 23,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "TIMEOUT_ERR",
                                            {
                                                value: 23,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "INVALID_NODE_TYPE_ERR",
                                            {
                                                value: 24,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "INVALID_NODE_TYPE_ERR",
                                            {
                                                value: 24,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException,
                                            "DATA_CLONE_ERR",
                                            {
                                                value: 25,
                                                enumerable: true,
                                            },
                                        );
                                        Object.defineProperty(
                                            DOMException.prototype,
                                            "DATA_CLONE_ERR",
                                            {
                                                value: 25,
                                                enumerable: true,
                                            },
                                        );

                                        Object.defineProperty(
                                            DOMException.prototype,
                                            Symbol.toStringTag,
                                            {
                                                value: "DOMException",
                                                writable: false,
                                                enumerable: false,
                                                configurable: true,
                                            },
                                        );

                                        var iface = {
                                            mixedInto: [],
                                            is: function is(obj) {
                                                if (obj) {
                                                    if (
                                                        obj[impl] instanceof
                                                        Impl.implementation
                                                    ) {
                                                        return true;
                                                    }
                                                    for (
                                                        var i = 0;
                                                        i <
                                                        module.exports.mixedInto
                                                            .length;
                                                        ++i
                                                    ) {
                                                        if (
                                                            obj instanceof
                                                            module.exports
                                                                .mixedInto[i]
                                                        ) {
                                                            return true;
                                                        }
                                                    }
                                                }
                                                return false;
                                            },
                                            isImpl: function isImpl(obj) {
                                                if (obj) {
                                                    if (
                                                        obj instanceof
                                                        Impl.implementation
                                                    ) {
                                                        return true;
                                                    }

                                                    var wrapper = utils.wrapperForImpl(
                                                        obj,
                                                    );
                                                    for (
                                                        var i = 0;
                                                        i <
                                                        module.exports.mixedInto
                                                            .length;
                                                        ++i
                                                    ) {
                                                        if (
                                                            wrapper instanceof
                                                            module.exports
                                                                .mixedInto[i]
                                                        ) {
                                                            return true;
                                                        }
                                                    }
                                                }
                                                return false;
                                            },
                                            convert: function convert(obj) {
                                                var _ref =
                                                        arguments.length > 1 &&
                                                        arguments[1] !==
                                                            undefined
                                                            ? arguments[1]
                                                            : {},
                                                    _ref$context = _ref.context,
                                                    context =
                                                        _ref$context ===
                                                        undefined
                                                            ? "The provided value"
                                                            : _ref$context;

                                                if (module.exports.is(obj)) {
                                                    return utils.implForWrapper(
                                                        obj,
                                                    );
                                                }
                                                throw new TypeError(
                                                    context +
                                                        " is not of type 'DOMException'.",
                                                );
                                            },
                                            create: function create(
                                                constructorArgs,
                                                privateData,
                                            ) {
                                                var obj = Object.create(
                                                    DOMException.prototype,
                                                );
                                                this.setup(
                                                    obj,
                                                    constructorArgs,
                                                    privateData,
                                                );
                                                return obj;
                                            },
                                            createImpl: function createImpl(
                                                constructorArgs,
                                                privateData,
                                            ) {
                                                var obj = Object.create(
                                                    DOMException.prototype,
                                                );
                                                this.setup(
                                                    obj,
                                                    constructorArgs,
                                                    privateData,
                                                );
                                                return utils.implForWrapper(
                                                    obj,
                                                );
                                            },
                                            _internalSetup: function _internalSetup(
                                                obj,
                                            ) {},
                                            setup: function setup(
                                                obj,
                                                constructorArgs,
                                                privateData,
                                            ) {
                                                if (!privateData)
                                                    privateData = {};

                                                privateData.wrapper = obj;

                                                this._internalSetup(obj);
                                                Object.defineProperty(
                                                    obj,
                                                    impl,
                                                    {
                                                        value: new Impl.implementation(
                                                            constructorArgs,
                                                            privateData,
                                                        ),
                                                        writable: false,
                                                        enumerable: false,
                                                        configurable: true,
                                                    },
                                                );
                                                obj[impl][
                                                    utils.wrapperSymbol
                                                ] = obj;
                                                if (Impl.init) {
                                                    Impl.init(
                                                        obj[impl],
                                                        privateData,
                                                    );
                                                }
                                            },

                                            interface: DOMException,
                                            expose: {
                                                Window: {
                                                    DOMException: DOMException,
                                                },
                                                Worker: {
                                                    DOMException: DOMException,
                                                },
                                            },
                                        }; // iface
                                        module.exports = iface;

                                        var Impl = _dereq_(
                                            ".//DOMException-impl.js",
                                        );
                                    },
                                    {
                                        ".//DOMException-impl.js": 41,
                                        "./utils.js": 45,
                                        "webidl-conversions": 48,
                                    },
                                ],
                                43: [
                                    function(_dereq_, module, exports) {
                                        module.exports = {
                                            IndexSizeError: 1,
                                            DOMStringSizeError: 2,
                                            HierarchyRequestError: 3,
                                            WrongDocumentError: 4,
                                            InvalidCharacterError: 5,
                                            NoDataAllowedError: 6,
                                            NoModificationAllowedError: 7,
                                            NotFoundError: 8,
                                            NotSupportedError: 9,
                                            InUseAttributeError: 10,
                                            InvalidStateError: 11,
                                            SyntaxError: 12,
                                            InvalidModificationError: 13,
                                            NamespaceError: 14,
                                            InvalidAccessError: 15,
                                            ValidationError: 16,
                                            TypeMismatchError: 17,
                                            SecurityError: 18,
                                            NetworkError: 19,
                                            AbortError: 20,
                                            URLMismatchError: 21,
                                            QuotaExceededError: 22,
                                            TimeoutError: 23,
                                            InvalidNodeTypeError: 24,
                                            DataCloneError: 25,
                                        };
                                    },
                                    {},
                                ],
                                44: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        module.exports = _dereq_(
                                            "./DOMException",
                                        ).interface;

                                        Object.setPrototypeOf(
                                            module.exports.prototype,
                                            Error.prototype,
                                        );
                                    },
                                    { "./DOMException": 42 },
                                ],
                                45: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        // Returns "Type(value) is Object" in ES terminology.

                                        var _typeof =
                                            typeof Symbol === "function" &&
                                            typeof Symbol.iterator === "symbol"
                                                ? function(obj) {
                                                      return typeof obj;
                                                  }
                                                : function(obj) {
                                                      return obj &&
                                                          typeof Symbol ===
                                                              "function" &&
                                                          obj.constructor ===
                                                              Symbol &&
                                                          obj !==
                                                              Symbol.prototype
                                                          ? "symbol"
                                                          : typeof obj;
                                                  };

                                        function isObject(value) {
                                            return (
                                                ((typeof value === "undefined"
                                                    ? "undefined"
                                                    : _typeof(value)) ===
                                                    "object" &&
                                                    value !== null) ||
                                                typeof value === "function"
                                            );
                                        }

                                        function getReferenceToBytes(
                                            bufferSource,
                                        ) {
                                            // Node.js' Buffer does not allow subclassing for now, so we can get away with a prototype object check for perf.
                                            if (
                                                Object.getPrototypeOf(
                                                    bufferSource,
                                                ) === Buffer.prototype
                                            ) {
                                                return bufferSource;
                                            }
                                            if (
                                                bufferSource instanceof
                                                ArrayBuffer
                                            ) {
                                                return Buffer.from(
                                                    bufferSource,
                                                );
                                            }
                                            return Buffer.from(
                                                bufferSource.buffer,
                                                bufferSource.byteOffset,
                                                bufferSource.byteLength,
                                            );
                                        }

                                        function getCopyToBytes(bufferSource) {
                                            return Buffer.from(
                                                getReferenceToBytes(
                                                    bufferSource,
                                                ),
                                            );
                                        }

                                        function mixin(target, source) {
                                            var keys = Object.getOwnPropertyNames(
                                                source,
                                            );
                                            for (
                                                var i = 0;
                                                i < keys.length;
                                                ++i
                                            ) {
                                                if (keys[i] in target) {
                                                    continue;
                                                }

                                                Object.defineProperty(
                                                    target,
                                                    keys[i],
                                                    Object.getOwnPropertyDescriptor(
                                                        source,
                                                        keys[i],
                                                    ),
                                                );
                                            }
                                        }

                                        var wrapperSymbol = Symbol("wrapper");
                                        var implSymbol = Symbol("impl");
                                        var sameObjectCaches = Symbol(
                                            "SameObject caches",
                                        );

                                        function getSameObject(
                                            wrapper,
                                            prop,
                                            creator,
                                        ) {
                                            if (!wrapper[sameObjectCaches]) {
                                                wrapper[
                                                    sameObjectCaches
                                                ] = Object.create(null);
                                            }

                                            if (
                                                prop in
                                                wrapper[sameObjectCaches]
                                            ) {
                                                return wrapper[
                                                    sameObjectCaches
                                                ][prop];
                                            }

                                            wrapper[sameObjectCaches][
                                                prop
                                            ] = creator();
                                            return wrapper[sameObjectCaches][
                                                prop
                                            ];
                                        }

                                        function wrapperForImpl(impl) {
                                            return impl
                                                ? impl[wrapperSymbol]
                                                : null;
                                        }

                                        function implForWrapper(wrapper) {
                                            return wrapper
                                                ? wrapper[implSymbol]
                                                : null;
                                        }

                                        function tryWrapperForImpl(impl) {
                                            var wrapper = wrapperForImpl(impl);
                                            return wrapper ? wrapper : impl;
                                        }

                                        function tryImplForWrapper(wrapper) {
                                            var impl = implForWrapper(wrapper);
                                            return impl ? impl : wrapper;
                                        }

                                        var iterInternalSymbol = Symbol(
                                            "internal",
                                        );
                                        var IteratorPrototype = Object.getPrototypeOf(
                                            Object.getPrototypeOf(
                                                [][Symbol.iterator](),
                                            ),
                                        );

                                        module.exports = exports = {
                                            isObject: isObject,
                                            getReferenceToBytes: getReferenceToBytes,
                                            getCopyToBytes: getCopyToBytes,
                                            mixin: mixin,
                                            wrapperSymbol: wrapperSymbol,
                                            implSymbol: implSymbol,
                                            getSameObject: getSameObject,
                                            wrapperForImpl: wrapperForImpl,
                                            implForWrapper: implForWrapper,
                                            tryWrapperForImpl: tryWrapperForImpl,
                                            tryImplForWrapper: tryImplForWrapper,
                                            iterInternalSymbol: iterInternalSymbol,
                                            IteratorPrototype: IteratorPrototype,
                                        };
                                    },
                                    {},
                                ],
                                46: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var _typeof =
                                            typeof Symbol === "function" &&
                                            typeof Symbol.iterator === "symbol"
                                                ? function(obj) {
                                                      return typeof obj;
                                                  }
                                                : function(obj) {
                                                      return obj &&
                                                          typeof Symbol ===
                                                              "function" &&
                                                          obj.constructor ===
                                                              Symbol &&
                                                          obj !==
                                                              Symbol.prototype
                                                          ? "symbol"
                                                          : typeof obj;
                                                  };

                                        !(function(e, t) {
                                            "object" ==
                                                (typeof exports === "undefined"
                                                    ? "undefined"
                                                    : _typeof(exports)) &&
                                            "undefined" != typeof module
                                                ? (module.exports = t())
                                                : "function" == typeof define &&
                                                  define.amd
                                                ? define(t)
                                                : ((e.Typeson =
                                                      e.Typeson || {}),
                                                  (e.Typeson.presets =
                                                      e.Typeson.presets || {}),
                                                  (e.Typeson.presets.structuredCloningThrowing = t()));
                                        })(undefined, function() {
                                            "use strict";
                                            var e =
                                                    "function" ==
                                                        typeof Symbol &&
                                                    "symbol" ==
                                                        _typeof(Symbol.iterator)
                                                        ? function(e) {
                                                              return typeof e ===
                                                                  "undefined"
                                                                  ? "undefined"
                                                                  : _typeof(e);
                                                          }
                                                        : function(e) {
                                                              return e &&
                                                                  "function" ==
                                                                      typeof Symbol &&
                                                                  e.constructor ===
                                                                      Symbol &&
                                                                  e !==
                                                                      Symbol.prototype
                                                                  ? "symbol"
                                                                  : typeof e ===
                                                                    "undefined"
                                                                  ? "undefined"
                                                                  : _typeof(e);
                                                          },
                                                t = (function() {
                                                    return function(e, t) {
                                                        if (Array.isArray(e))
                                                            return e;
                                                        if (
                                                            Symbol.iterator in
                                                            Object(e)
                                                        )
                                                            return (function sliceIterator(
                                                                e,
                                                                t,
                                                            ) {
                                                                var n = [],
                                                                    r = !0,
                                                                    i = !1,
                                                                    o = void 0;
                                                                try {
                                                                    for (
                                                                        var s,
                                                                            a = e[
                                                                                Symbol
                                                                                    .iterator
                                                                            ]();
                                                                        !(r = (s = a.next())
                                                                            .done) &&
                                                                        (n.push(
                                                                            s.value,
                                                                        ),
                                                                        !t ||
                                                                            n.length !==
                                                                                t);
                                                                        r = !0
                                                                    ) {}
                                                                } catch (e) {
                                                                    (i = !0),
                                                                        (o = e);
                                                                } finally {
                                                                    try {
                                                                        !r &&
                                                                            a.return &&
                                                                            a.return();
                                                                    } finally {
                                                                        if (i)
                                                                            throw o;
                                                                    }
                                                                }
                                                                return n;
                                                            })(e, t);
                                                        throw new TypeError(
                                                            "Invalid attempt to destructure non-iterable instance",
                                                        );
                                                    };
                                                })(),
                                                n = function n(e) {
                                                    if (Array.isArray(e)) {
                                                        for (
                                                            var t = 0,
                                                                n = Array(
                                                                    e.length,
                                                                );
                                                            t < e.length;
                                                            t++
                                                        ) {
                                                            n[t] = e[t];
                                                        }
                                                        return n;
                                                    }
                                                    return Array.from(e);
                                                },
                                                r = Object.keys,
                                                i = Array.isArray,
                                                o = {}.toString,
                                                s = Object.getPrototypeOf,
                                                a = {}.hasOwnProperty,
                                                c = a.toString,
                                                u = [
                                                    "type",
                                                    "replaced",
                                                    "iterateIn",
                                                    "iterateUnsetNumeric",
                                                ];
                                            function isThenable(e, t) {
                                                return (
                                                    Typeson.isObject(e) &&
                                                    "function" ==
                                                        typeof e.then &&
                                                    (!t ||
                                                        "function" ==
                                                            typeof e.catch)
                                                );
                                            }
                                            function toStringTag(e) {
                                                return o.call(e).slice(8, -1);
                                            }
                                            function hasConstructorOf(t, n) {
                                                if (
                                                    !t ||
                                                    "object" !==
                                                        (void 0 === t
                                                            ? "undefined"
                                                            : e(t))
                                                )
                                                    return !1;
                                                var r = s(t);
                                                if (!r) return !1;
                                                var i =
                                                    a.call(r, "constructor") &&
                                                    r.constructor;
                                                return "function" != typeof i
                                                    ? null === n
                                                    : "function" == typeof i &&
                                                          null !== n &&
                                                          c.call(i) ===
                                                              c.call(n);
                                            }
                                            function isPlainObject(e) {
                                                return (
                                                    !(
                                                        !e ||
                                                        "Object" !==
                                                            toStringTag(e)
                                                    ) &&
                                                    (!s(e) ||
                                                        hasConstructorOf(
                                                            e,
                                                            Object,
                                                        ))
                                                );
                                            }
                                            function isObject(t) {
                                                return (
                                                    t &&
                                                    "object" ===
                                                        (void 0 === t
                                                            ? "undefined"
                                                            : e(t))
                                                );
                                            }
                                            function Typeson(o) {
                                                var s = [],
                                                    a = [],
                                                    c = {},
                                                    f = (this.types = {}),
                                                    p = (this.stringify = function(
                                                        e,
                                                        t,
                                                        n,
                                                        r,
                                                    ) {
                                                        r = Object.assign(
                                                            {},
                                                            o,
                                                            r,
                                                            {
                                                                stringification: !0,
                                                            },
                                                        );
                                                        var s = y(e, null, r);
                                                        return i(s)
                                                            ? JSON.stringify(
                                                                  s[0],
                                                                  t,
                                                                  n,
                                                              )
                                                            : s.then(function(
                                                                  e,
                                                              ) {
                                                                  return JSON.stringify(
                                                                      e,
                                                                      t,
                                                                      n,
                                                                  );
                                                              });
                                                    });
                                                (this.stringifySync = function(
                                                    e,
                                                    t,
                                                    n,
                                                    r,
                                                ) {
                                                    return p(
                                                        e,
                                                        t,
                                                        n,
                                                        Object.assign(
                                                            {},
                                                            {
                                                                throwOnBadSyncType: !0,
                                                            },
                                                            r,
                                                            { sync: !0 },
                                                        ),
                                                    );
                                                }),
                                                    (this.stringifyAsync = function(
                                                        e,
                                                        t,
                                                        n,
                                                        r,
                                                    ) {
                                                        return p(
                                                            e,
                                                            t,
                                                            n,
                                                            Object.assign(
                                                                {},
                                                                {
                                                                    throwOnBadSyncType: !0,
                                                                },
                                                                r,
                                                                { sync: !1 },
                                                            ),
                                                        );
                                                    });
                                                var l = (this.parse = function(
                                                    e,
                                                    t,
                                                    n,
                                                ) {
                                                    return (
                                                        (n = Object.assign(
                                                            {},
                                                            o,
                                                            n,
                                                            { parse: !0 },
                                                        )),
                                                        v(JSON.parse(e, t), n)
                                                    );
                                                });
                                                (this.parseSync = function(
                                                    e,
                                                    t,
                                                    n,
                                                ) {
                                                    return l(
                                                        e,
                                                        t,
                                                        Object.assign(
                                                            {},
                                                            {
                                                                throwOnBadSyncType: !0,
                                                            },
                                                            n,
                                                            { sync: !0 },
                                                        ),
                                                    );
                                                }),
                                                    (this.parseAsync = function(
                                                        e,
                                                        t,
                                                        n,
                                                    ) {
                                                        return l(
                                                            e,
                                                            t,
                                                            Object.assign(
                                                                {},
                                                                {
                                                                    throwOnBadSyncType: !0,
                                                                },
                                                                n,
                                                                { sync: !1 },
                                                            ),
                                                        );
                                                    }),
                                                    (this.specialTypeNames = function(
                                                        e,
                                                        t,
                                                    ) {
                                                        var n =
                                                            arguments.length >
                                                                2 &&
                                                            void 0 !==
                                                                arguments[2]
                                                                ? arguments[2]
                                                                : {};
                                                        return (
                                                            (n.returnTypeNames = !0),
                                                            this.encapsulate(
                                                                e,
                                                                t,
                                                                n,
                                                            )
                                                        );
                                                    }),
                                                    (this.rootTypeName = function(
                                                        e,
                                                        t,
                                                    ) {
                                                        var n =
                                                            arguments.length >
                                                                2 &&
                                                            void 0 !==
                                                                arguments[2]
                                                                ? arguments[2]
                                                                : {};
                                                        return (
                                                            (n.iterateNone = !0),
                                                            this.encapsulate(
                                                                e,
                                                                t,
                                                                n,
                                                            )
                                                        );
                                                    });
                                                var y = (this.encapsulate = function(
                                                    f,
                                                    p,
                                                    l,
                                                ) {
                                                    var y = (l = Object.assign(
                                                            { sync: !0 },
                                                            o,
                                                            l,
                                                        )).sync,
                                                        v = {},
                                                        d = [],
                                                        h = [],
                                                        b = [],
                                                        g =
                                                            !(
                                                                l &&
                                                                "cyclic" in l
                                                            ) || l.cyclic,
                                                        m =
                                                            l.encapsulateObserver,
                                                        T = _encapsulate(
                                                            "",
                                                            f,
                                                            g,
                                                            p || {},
                                                            b,
                                                        );
                                                    function finish(e) {
                                                        var t = Object.values(
                                                            v,
                                                        );
                                                        if (l.iterateNone)
                                                            return t.length
                                                                ? t[0]
                                                                : Typeson.getJSONType(
                                                                      e,
                                                                  );
                                                        if (t.length) {
                                                            if (
                                                                l.returnTypeNames
                                                            )
                                                                return [].concat(
                                                                    n(
                                                                        new Set(
                                                                            t,
                                                                        ),
                                                                    ),
                                                                );
                                                            e &&
                                                            isPlainObject(e) &&
                                                            !e.hasOwnProperty(
                                                                "$types",
                                                            )
                                                                ? (e.$types = v)
                                                                : (e = {
                                                                      $: e,
                                                                      $types: {
                                                                          $: v,
                                                                      },
                                                                  });
                                                        } else
                                                            isObject(e) &&
                                                                e.hasOwnProperty(
                                                                    "$types",
                                                                ) &&
                                                                (e = {
                                                                    $: e,
                                                                    $types: !0,
                                                                });
                                                        return (
                                                            !l.returnTypeNames &&
                                                            e
                                                        );
                                                    }
                                                    return b.length
                                                        ? y &&
                                                          l.throwOnBadSyncType
                                                            ? (function() {
                                                                  throw new TypeError(
                                                                      "Sync method requested but async result obtained",
                                                                  );
                                                              })()
                                                            : Promise.resolve(
                                                                  (function checkPromises(
                                                                      e,
                                                                      n,
                                                                  ) {
                                                                      return Promise.all(
                                                                          n.map(
                                                                              function(
                                                                                  e,
                                                                              ) {
                                                                                  return e[1]
                                                                                      .p;
                                                                              },
                                                                          ),
                                                                      )
                                                                          .then(
                                                                              function(
                                                                                  r,
                                                                              ) {
                                                                                  return Promise.all(
                                                                                      r.map(
                                                                                          function(
                                                                                              r,
                                                                                          ) {
                                                                                              var i = [],
                                                                                                  o = n.splice(
                                                                                                      0,
                                                                                                      1,
                                                                                                  )[0],
                                                                                                  s = t(
                                                                                                      o,
                                                                                                      7,
                                                                                                  ),
                                                                                                  a =
                                                                                                      s[0],
                                                                                                  c =
                                                                                                      s[2],
                                                                                                  u =
                                                                                                      s[3],
                                                                                                  f =
                                                                                                      s[4],
                                                                                                  p =
                                                                                                      s[5],
                                                                                                  l =
                                                                                                      s[6],
                                                                                                  y = _encapsulate(
                                                                                                      a,
                                                                                                      r,
                                                                                                      c,
                                                                                                      u,
                                                                                                      i,
                                                                                                      !0,
                                                                                                      l,
                                                                                                  ),
                                                                                                  v = hasConstructorOf(
                                                                                                      y,
                                                                                                      TypesonPromise,
                                                                                                  );
                                                                                              return a &&
                                                                                                  v
                                                                                                  ? y.p.then(
                                                                                                        function(
                                                                                                            t,
                                                                                                        ) {
                                                                                                            return (
                                                                                                                (f[
                                                                                                                    p
                                                                                                                ] = t),
                                                                                                                checkPromises(
                                                                                                                    e,
                                                                                                                    i,
                                                                                                                )
                                                                                                            );
                                                                                                        },
                                                                                                    )
                                                                                                  : (a
                                                                                                        ? (f[
                                                                                                              p
                                                                                                          ] = y)
                                                                                                        : (e = v
                                                                                                              ? y.p
                                                                                                              : y),
                                                                                                    checkPromises(
                                                                                                        e,
                                                                                                        i,
                                                                                                    ));
                                                                                          },
                                                                                      ),
                                                                                  );
                                                                              },
                                                                          )
                                                                          .then(
                                                                              function() {
                                                                                  return e;
                                                                              },
                                                                          );
                                                                  })(T, b),
                                                              ).then(finish)
                                                        : !y &&
                                                          l.throwOnBadSyncType
                                                        ? (function() {
                                                              throw new TypeError(
                                                                  "Async method requested but sync result obtained",
                                                              );
                                                          })()
                                                        : l.stringification && y
                                                        ? [finish(T)]
                                                        : y
                                                        ? finish(T)
                                                        : Promise.resolve(
                                                              finish(T),
                                                          );
                                                    function _adaptBuiltinStateObjectProperties(
                                                        e,
                                                        t,
                                                        n,
                                                    ) {
                                                        Object.assign(e, t);
                                                        var r = u.map(function(
                                                            t,
                                                        ) {
                                                            var n = e[t];
                                                            return (
                                                                delete e[t], n
                                                            );
                                                        });
                                                        n(),
                                                            u.forEach(function(
                                                                t,
                                                                n,
                                                            ) {
                                                                e[t] = r[n];
                                                            });
                                                    }
                                                    function _encapsulate(
                                                        t,
                                                        n,
                                                        o,
                                                        a,
                                                        c,
                                                        u,
                                                        f,
                                                    ) {
                                                        var p = void 0,
                                                            y = {},
                                                            b =
                                                                void 0 === n
                                                                    ? "undefined"
                                                                    : e(n),
                                                            g = m
                                                                ? function(e) {
                                                                      var r =
                                                                          f ||
                                                                          a.type ||
                                                                          Typeson.getJSONType(
                                                                              n,
                                                                          );
                                                                      m(
                                                                          Object.assign(
                                                                              e ||
                                                                                  y,
                                                                              {
                                                                                  keypath: t,
                                                                                  value: n,
                                                                                  cyclic: o,
                                                                                  stateObj: a,
                                                                                  promisesData: c,
                                                                                  resolvingTypesonPromise: u,
                                                                                  awaitingTypesonPromise: hasConstructorOf(
                                                                                      n,
                                                                                      TypesonPromise,
                                                                                  ),
                                                                              },
                                                                              void 0 !==
                                                                                  r
                                                                                  ? {
                                                                                        type: r,
                                                                                    }
                                                                                  : {},
                                                                          ),
                                                                      );
                                                                  }
                                                                : null;
                                                        if (
                                                            b in
                                                            {
                                                                string: 1,
                                                                boolean: 1,
                                                                number: 1,
                                                                undefined: 1,
                                                            }
                                                        )
                                                            return (
                                                                void 0 === n ||
                                                                ("number" ===
                                                                    b &&
                                                                    (isNaN(n) ||
                                                                        n ===
                                                                            -1 /
                                                                                0 ||
                                                                        n ===
                                                                            1 /
                                                                                0))
                                                                    ? (p = replace(
                                                                          t,
                                                                          n,
                                                                          a,
                                                                          c,
                                                                          !1,
                                                                          u,
                                                                          g,
                                                                      )) !==
                                                                          n &&
                                                                      (y = {
                                                                          replaced: p,
                                                                      })
                                                                    : (p = n),
                                                                g && g(),
                                                                p
                                                            );
                                                        if (null === n)
                                                            return g && g(), n;
                                                        if (
                                                            o &&
                                                            !a.iterateIn &&
                                                            !a.iterateUnsetNumeric
                                                        ) {
                                                            var T = d.indexOf(
                                                                n,
                                                            );
                                                            if (!(T < 0))
                                                                return (
                                                                    (v[t] =
                                                                        "#"),
                                                                    g &&
                                                                        g({
                                                                            cyclicKeypath:
                                                                                h[
                                                                                    T
                                                                                ],
                                                                        }),
                                                                    "#" + h[T]
                                                                );
                                                            !0 === o &&
                                                                (d.push(n),
                                                                h.push(t));
                                                        }
                                                        var O = isPlainObject(
                                                                n,
                                                            ),
                                                            w = i(n),
                                                            S =
                                                                ((O || w) &&
                                                                    (!s.length ||
                                                                        a.replaced)) ||
                                                                a.iterateIn
                                                                    ? n
                                                                    : replace(
                                                                          t,
                                                                          n,
                                                                          a,
                                                                          c,
                                                                          O ||
                                                                              w,
                                                                          null,
                                                                          g,
                                                                      ),
                                                            P = void 0;
                                                        if (
                                                            (S !== n
                                                                ? ((p = S),
                                                                  (y = {
                                                                      replaced: S,
                                                                  }))
                                                                : w ||
                                                                  "array" ===
                                                                      a.iterateIn
                                                                ? ((P = new Array(
                                                                      n.length,
                                                                  )),
                                                                  (y = {
                                                                      clone: P,
                                                                  }))
                                                                : O ||
                                                                  "object" ===
                                                                      a.iterateIn
                                                                ? (y = {
                                                                      clone: (P = {}),
                                                                  })
                                                                : "" === t &&
                                                                  hasConstructorOf(
                                                                      n,
                                                                      TypesonPromise,
                                                                  )
                                                                ? (c.push([
                                                                      t,
                                                                      n,
                                                                      o,
                                                                      a,
                                                                      void 0,
                                                                      void 0,
                                                                      a.type,
                                                                  ]),
                                                                  (p = n))
                                                                : (p = n),
                                                            g && g(),
                                                            l.iterateNone)
                                                        )
                                                            return P || p;
                                                        if (!P) return p;
                                                        if (a.iterateIn) {
                                                            var j = function _loop(
                                                                e,
                                                            ) {
                                                                var r = {
                                                                    ownKeys: n.hasOwnProperty(
                                                                        e,
                                                                    ),
                                                                };
                                                                _adaptBuiltinStateObjectProperties(
                                                                    a,
                                                                    r,
                                                                    function() {
                                                                        var r =
                                                                                t +
                                                                                (t
                                                                                    ? "."
                                                                                    : "") +
                                                                                escapeKeyPathComponent(
                                                                                    e,
                                                                                ),
                                                                            i = _encapsulate(
                                                                                r,
                                                                                n[
                                                                                    e
                                                                                ],
                                                                                !!o,
                                                                                a,
                                                                                c,
                                                                                u,
                                                                            );
                                                                        hasConstructorOf(
                                                                            i,
                                                                            TypesonPromise,
                                                                        )
                                                                            ? c.push(
                                                                                  [
                                                                                      r,
                                                                                      i,
                                                                                      !!o,
                                                                                      a,
                                                                                      P,
                                                                                      e,
                                                                                      a.type,
                                                                                  ],
                                                                              )
                                                                            : void 0 !==
                                                                                  i &&
                                                                              (P[
                                                                                  e
                                                                              ] = i);
                                                                    },
                                                                );
                                                            };
                                                            for (var A in n) {
                                                                j(A);
                                                            }
                                                            g &&
                                                                g({
                                                                    endIterateIn: !0,
                                                                    end: !0,
                                                                });
                                                        } else
                                                            r(n).forEach(
                                                                function(e) {
                                                                    var r =
                                                                        t +
                                                                        (t
                                                                            ? "."
                                                                            : "") +
                                                                        escapeKeyPathComponent(
                                                                            e,
                                                                        );
                                                                    _adaptBuiltinStateObjectProperties(
                                                                        a,
                                                                        {
                                                                            ownKeys: !0,
                                                                        },
                                                                        function() {
                                                                            var t = _encapsulate(
                                                                                r,
                                                                                n[
                                                                                    e
                                                                                ],
                                                                                !!o,
                                                                                a,
                                                                                c,
                                                                                u,
                                                                            );
                                                                            hasConstructorOf(
                                                                                t,
                                                                                TypesonPromise,
                                                                            )
                                                                                ? c.push(
                                                                                      [
                                                                                          r,
                                                                                          t,
                                                                                          !!o,
                                                                                          a,
                                                                                          P,
                                                                                          e,
                                                                                          a.type,
                                                                                      ],
                                                                                  )
                                                                                : void 0 !==
                                                                                      t &&
                                                                                  (P[
                                                                                      e
                                                                                  ] = t);
                                                                        },
                                                                    );
                                                                },
                                                            ),
                                                                g &&
                                                                    g({
                                                                        endIterateOwn: !0,
                                                                        end: !0,
                                                                    });
                                                        if (
                                                            a.iterateUnsetNumeric
                                                        ) {
                                                            for (
                                                                var C =
                                                                        n.length,
                                                                    N = function _loop2(
                                                                        e,
                                                                    ) {
                                                                        if (
                                                                            !(
                                                                                e in
                                                                                n
                                                                            )
                                                                        ) {
                                                                            var r =
                                                                                t +
                                                                                (t
                                                                                    ? "."
                                                                                    : "") +
                                                                                e;
                                                                            _adaptBuiltinStateObjectProperties(
                                                                                a,
                                                                                {
                                                                                    ownKeys: !1,
                                                                                },
                                                                                function() {
                                                                                    var t = _encapsulate(
                                                                                        r,
                                                                                        void 0,
                                                                                        !!o,
                                                                                        a,
                                                                                        c,
                                                                                        u,
                                                                                    );
                                                                                    hasConstructorOf(
                                                                                        t,
                                                                                        TypesonPromise,
                                                                                    )
                                                                                        ? c.push(
                                                                                              [
                                                                                                  r,
                                                                                                  t,
                                                                                                  !!o,
                                                                                                  a,
                                                                                                  P,
                                                                                                  e,
                                                                                                  a.type,
                                                                                              ],
                                                                                          )
                                                                                        : void 0 !==
                                                                                              t &&
                                                                                          (P[
                                                                                              e
                                                                                          ] = t);
                                                                                },
                                                                            );
                                                                        }
                                                                    },
                                                                    B = 0;
                                                                B < C;
                                                                B++
                                                            ) {
                                                                N(B);
                                                            }
                                                            g &&
                                                                g({
                                                                    endIterateUnsetNumeric: !0,
                                                                    end: !0,
                                                                });
                                                        }
                                                        return P;
                                                    }
                                                    function replace(
                                                        e,
                                                        t,
                                                        n,
                                                        r,
                                                        i,
                                                        o,
                                                        u,
                                                    ) {
                                                        for (
                                                            var f = i ? s : a,
                                                                p = f.length;
                                                            p--;

                                                        ) {
                                                            var l = f[p];
                                                            if (l.test(t, n)) {
                                                                var d = l.type;
                                                                if (c[d]) {
                                                                    var h =
                                                                        v[e];
                                                                    v[e] = h
                                                                        ? [
                                                                              d,
                                                                          ].concat(
                                                                              h,
                                                                          )
                                                                        : d;
                                                                }
                                                                return (
                                                                    Object.assign(
                                                                        n,
                                                                        {
                                                                            type: d,
                                                                            replaced: !0,
                                                                        },
                                                                    ),
                                                                    (!y &&
                                                                        l.replaceAsync) ||
                                                                    l.replace
                                                                        ? (u &&
                                                                              u(
                                                                                  {
                                                                                      replacing: !0,
                                                                                  },
                                                                              ),
                                                                          _encapsulate(
                                                                              e,
                                                                              l[
                                                                                  y ||
                                                                                  !l.replaceAsync
                                                                                      ? "replace"
                                                                                      : "replaceAsync"
                                                                              ](
                                                                                  t,
                                                                                  n,
                                                                              ),
                                                                              g &&
                                                                                  "readonly",
                                                                              n,
                                                                              r,
                                                                              o,
                                                                              d,
                                                                          ))
                                                                        : (u &&
                                                                              u(
                                                                                  {
                                                                                      typeDetected: !0,
                                                                                  },
                                                                              ),
                                                                          _encapsulate(
                                                                              e,
                                                                              t,
                                                                              g &&
                                                                                  "readonly",
                                                                              n,
                                                                              r,
                                                                              o,
                                                                              d,
                                                                          ))
                                                                );
                                                            }
                                                        }
                                                        return t;
                                                    }
                                                });
                                                (this.encapsulateSync = function(
                                                    e,
                                                    t,
                                                    n,
                                                ) {
                                                    return y(
                                                        e,
                                                        t,
                                                        Object.assign(
                                                            {},
                                                            {
                                                                throwOnBadSyncType: !0,
                                                            },
                                                            n,
                                                            { sync: !0 },
                                                        ),
                                                    );
                                                }),
                                                    (this.encapsulateAsync = function(
                                                        e,
                                                        t,
                                                        n,
                                                    ) {
                                                        return y(
                                                            e,
                                                            t,
                                                            Object.assign(
                                                                {},
                                                                {
                                                                    throwOnBadSyncType: !0,
                                                                },
                                                                n,
                                                                { sync: !1 },
                                                            ),
                                                        );
                                                    });
                                                var v = (this.revive = function(
                                                    e,
                                                    n,
                                                ) {
                                                    var s = (n = Object.assign(
                                                            { sync: !0 },
                                                            o,
                                                            n,
                                                        )).sync,
                                                        a = e && e.$types,
                                                        u = !0;
                                                    if (!a) return e;
                                                    if (!0 === a) return e.$;
                                                    a.$ &&
                                                        isPlainObject(a.$) &&
                                                        ((e = e.$),
                                                        (a = a.$),
                                                        (u = !1));
                                                    var f = [],
                                                        p = {},
                                                        l = (function _revive(
                                                            e,
                                                            n,
                                                            o,
                                                            s,
                                                            l,
                                                            y,
                                                        ) {
                                                            if (
                                                                u &&
                                                                "$types" === e
                                                            )
                                                                return;
                                                            var v = a[e];
                                                            if (
                                                                i(n) ||
                                                                isPlainObject(n)
                                                            ) {
                                                                var d = i(n)
                                                                    ? new Array(
                                                                          n.length,
                                                                      )
                                                                    : {};
                                                                for (
                                                                    r(
                                                                        n,
                                                                    ).forEach(
                                                                        function(
                                                                            t,
                                                                        ) {
                                                                            var r = _revive(
                                                                                e +
                                                                                    (e
                                                                                        ? "."
                                                                                        : "") +
                                                                                    escapeKeyPathComponent(
                                                                                        t,
                                                                                    ),
                                                                                n[
                                                                                    t
                                                                                ],
                                                                                o ||
                                                                                    d,
                                                                                s,
                                                                                d,
                                                                                t,
                                                                            );
                                                                            hasConstructorOf(
                                                                                r,
                                                                                Undefined,
                                                                            )
                                                                                ? (d[
                                                                                      t
                                                                                  ] = void 0)
                                                                                : void 0 !==
                                                                                      r &&
                                                                                  (d[
                                                                                      t
                                                                                  ] = r);
                                                                        },
                                                                    ),
                                                                        n = d;
                                                                    f.length;

                                                                ) {
                                                                    var h = t(
                                                                            f[0],
                                                                            4,
                                                                        ),
                                                                        b =
                                                                            h[0],
                                                                        g =
                                                                            h[1],
                                                                        m =
                                                                            h[2],
                                                                        T =
                                                                            h[3],
                                                                        O = getByKeyPath(
                                                                            b,
                                                                            g,
                                                                        );
                                                                    if (
                                                                        hasConstructorOf(
                                                                            O,
                                                                            Undefined,
                                                                        )
                                                                    )
                                                                        m[
                                                                            T
                                                                        ] = void 0;
                                                                    else {
                                                                        if (
                                                                            void 0 ===
                                                                            O
                                                                        )
                                                                            break;
                                                                        m[
                                                                            T
                                                                        ] = O;
                                                                    }
                                                                    f.splice(
                                                                        0,
                                                                        1,
                                                                    );
                                                                }
                                                            }
                                                            if (!v) return n;
                                                            if ("#" === v) {
                                                                var w = getByKeyPath(
                                                                    o,
                                                                    n.substr(1),
                                                                );
                                                                return (
                                                                    void 0 ===
                                                                        w &&
                                                                        f.push([
                                                                            o,
                                                                            n.substr(
                                                                                1,
                                                                            ),
                                                                            l,
                                                                            y,
                                                                        ]),
                                                                    w
                                                                );
                                                            }
                                                            var S = s.sync;
                                                            return []
                                                                .concat(v)
                                                                .reduce(
                                                                    function(
                                                                        e,
                                                                        t,
                                                                    ) {
                                                                        var n =
                                                                            c[
                                                                                t
                                                                            ];
                                                                        if (!n)
                                                                            throw new Error(
                                                                                "Unregistered type: " +
                                                                                    t,
                                                                            );
                                                                        return n[
                                                                            S &&
                                                                            n.revive
                                                                                ? "revive"
                                                                                : !S &&
                                                                                  n.reviveAsync
                                                                                ? "reviveAsync"
                                                                                : "revive"
                                                                        ](e, p);
                                                                    },
                                                                    n,
                                                                );
                                                        })("", e, null, n);
                                                    return isThenable(
                                                        (l = hasConstructorOf(
                                                            l,
                                                            Undefined,
                                                        )
                                                            ? void 0
                                                            : l),
                                                    )
                                                        ? s &&
                                                          n.throwOnBadSyncType
                                                            ? (function() {
                                                                  throw new TypeError(
                                                                      "Sync method requested but async result obtained",
                                                                  );
                                                              })()
                                                            : l
                                                        : !s &&
                                                          n.throwOnBadSyncType
                                                        ? (function() {
                                                              throw new TypeError(
                                                                  "Async method requested but sync result obtained",
                                                              );
                                                          })()
                                                        : s
                                                        ? l
                                                        : Promise.resolve(l);
                                                });
                                                (this.reviveSync = function(
                                                    e,
                                                    t,
                                                ) {
                                                    return v(
                                                        e,
                                                        Object.assign(
                                                            {},
                                                            {
                                                                throwOnBadSyncType: !0,
                                                            },
                                                            t,
                                                            { sync: !0 },
                                                        ),
                                                    );
                                                }),
                                                    (this.reviveAsync = function(
                                                        e,
                                                        t,
                                                    ) {
                                                        return v(
                                                            e,
                                                            Object.assign(
                                                                {},
                                                                {
                                                                    throwOnBadSyncType: !0,
                                                                },
                                                                t,
                                                                { sync: !1 },
                                                            ),
                                                        );
                                                    }),
                                                    (this.register = function(
                                                        e,
                                                        t,
                                                    ) {
                                                        return (
                                                            (t = t || {}),
                                                            []
                                                                .concat(e)
                                                                .forEach(
                                                                    function R(
                                                                        e,
                                                                    ) {
                                                                        if (
                                                                            i(e)
                                                                        )
                                                                            return e.map(
                                                                                R,
                                                                            );
                                                                        e &&
                                                                            r(
                                                                                e,
                                                                            ).forEach(
                                                                                function(
                                                                                    n,
                                                                                ) {
                                                                                    if (
                                                                                        "#" ===
                                                                                        n
                                                                                    )
                                                                                        throw new TypeError(
                                                                                            "# cannot be used as a type name as it is reserved for cyclic objects",
                                                                                        );
                                                                                    if (
                                                                                        Typeson.JSON_TYPES.includes(
                                                                                            n,
                                                                                        )
                                                                                    )
                                                                                        throw new TypeError(
                                                                                            "Plain JSON object types are reserved as type names",
                                                                                        );
                                                                                    var r =
                                                                                            e[
                                                                                                n
                                                                                            ],
                                                                                        o = r.testPlainObjects
                                                                                            ? s
                                                                                            : a,
                                                                                        u = o.filter(
                                                                                            function(
                                                                                                e,
                                                                                            ) {
                                                                                                return (
                                                                                                    e.type ===
                                                                                                    n
                                                                                                );
                                                                                            },
                                                                                        );
                                                                                    if (
                                                                                        (u.length &&
                                                                                            (o.splice(
                                                                                                o.indexOf(
                                                                                                    u[0],
                                                                                                ),
                                                                                                1,
                                                                                            ),
                                                                                            delete c[
                                                                                                n
                                                                                            ],
                                                                                            delete f[
                                                                                                n
                                                                                            ]),
                                                                                        r)
                                                                                    ) {
                                                                                        if (
                                                                                            "function" ==
                                                                                            typeof r
                                                                                        ) {
                                                                                            var p = r;
                                                                                            r = {
                                                                                                test: function test(
                                                                                                    e,
                                                                                                ) {
                                                                                                    return (
                                                                                                        e &&
                                                                                                        e.constructor ===
                                                                                                            p
                                                                                                    );
                                                                                                },
                                                                                                replace: function replace(
                                                                                                    e,
                                                                                                ) {
                                                                                                    return assign(
                                                                                                        {},
                                                                                                        e,
                                                                                                    );
                                                                                                },
                                                                                                revive: function revive(
                                                                                                    e,
                                                                                                ) {
                                                                                                    return assign(
                                                                                                        Object.create(
                                                                                                            p.prototype,
                                                                                                        ),
                                                                                                        e,
                                                                                                    );
                                                                                                },
                                                                                            };
                                                                                        } else
                                                                                            i(
                                                                                                r,
                                                                                            ) &&
                                                                                                (r = {
                                                                                                    test:
                                                                                                        r[0],
                                                                                                    replace:
                                                                                                        r[1],
                                                                                                    revive:
                                                                                                        r[2],
                                                                                                });
                                                                                        var l = {
                                                                                            type: n,
                                                                                            test: r.test.bind(
                                                                                                r,
                                                                                            ),
                                                                                        };
                                                                                        r.replace &&
                                                                                            (l.replace = r.replace.bind(
                                                                                                r,
                                                                                            )),
                                                                                            r.replaceAsync &&
                                                                                                (l.replaceAsync = r.replaceAsync.bind(
                                                                                                    r,
                                                                                                ));
                                                                                        var y =
                                                                                            "number" ==
                                                                                            typeof t.fallback
                                                                                                ? t.fallback
                                                                                                : t.fallback
                                                                                                ? 0
                                                                                                : 1 /
                                                                                                  0;
                                                                                        if (
                                                                                            (r.testPlainObjects
                                                                                                ? s.splice(
                                                                                                      y,
                                                                                                      0,
                                                                                                      l,
                                                                                                  )
                                                                                                : a.splice(
                                                                                                      y,
                                                                                                      0,
                                                                                                      l,
                                                                                                  ),
                                                                                            r.revive ||
                                                                                                r.reviveAsync)
                                                                                        ) {
                                                                                            var v = {};
                                                                                            r.revive &&
                                                                                                (v.revive = r.revive.bind(
                                                                                                    r,
                                                                                                )),
                                                                                                r.reviveAsync &&
                                                                                                    (v.reviveAsync = r.reviveAsync.bind(
                                                                                                        r,
                                                                                                    )),
                                                                                                (c[
                                                                                                    n
                                                                                                ] = v);
                                                                                        }
                                                                                        f[
                                                                                            n
                                                                                        ] = r;
                                                                                    }
                                                                                },
                                                                            );
                                                                    },
                                                                ),
                                                            this
                                                        );
                                                    });
                                            }
                                            function assign(e, t) {
                                                return (
                                                    r(t).map(function(n) {
                                                        e[n] = t[n];
                                                    }),
                                                    e
                                                );
                                            }
                                            function escapeKeyPathComponent(e) {
                                                return e
                                                    .replace(/~/g, "~0")
                                                    .replace(/\./g, "~1");
                                            }
                                            function unescapeKeyPathComponent(
                                                e,
                                            ) {
                                                return e
                                                    .replace(/~1/g, ".")
                                                    .replace(/~0/g, "~");
                                            }
                                            function getByKeyPath(e, t) {
                                                if ("" === t) return e;
                                                var n = t.indexOf(".");
                                                if (n > -1) {
                                                    var r =
                                                        e[
                                                            unescapeKeyPathComponent(
                                                                t.substr(0, n),
                                                            )
                                                        ];
                                                    return void 0 === r
                                                        ? void 0
                                                        : getByKeyPath(
                                                              r,
                                                              t.substr(n + 1),
                                                          );
                                                }
                                                return e[
                                                    unescapeKeyPathComponent(t)
                                                ];
                                            }
                                            function Undefined() {}
                                            function TypesonPromise(e) {
                                                this.p = new Promise(e);
                                            }
                                            (TypesonPromise.prototype.then = function(
                                                e,
                                                t,
                                            ) {
                                                var n = this;
                                                return new TypesonPromise(
                                                    function(r, i) {
                                                        n.p.then(
                                                            function(t) {
                                                                r(e ? e(t) : t);
                                                            },
                                                            function(e) {
                                                                n.p
                                                                    .catch(
                                                                        function(
                                                                            e,
                                                                        ) {
                                                                            return t
                                                                                ? t(
                                                                                      e,
                                                                                  )
                                                                                : Promise.reject(
                                                                                      e,
                                                                                  );
                                                                        },
                                                                    )
                                                                    .then(r, i);
                                                            },
                                                        );
                                                    },
                                                );
                                            }),
                                                (TypesonPromise.prototype.catch = function(
                                                    e,
                                                ) {
                                                    return this.then(null, e);
                                                }),
                                                (TypesonPromise.resolve = function(
                                                    e,
                                                ) {
                                                    return new TypesonPromise(
                                                        function(t) {
                                                            t(e);
                                                        },
                                                    );
                                                }),
                                                (TypesonPromise.reject = function(
                                                    e,
                                                ) {
                                                    return new TypesonPromise(
                                                        function(t, n) {
                                                            n(e);
                                                        },
                                                    );
                                                }),
                                                ["all", "race"].map(function(
                                                    e,
                                                ) {
                                                    TypesonPromise[
                                                        e
                                                    ] = function(t) {
                                                        return new TypesonPromise(
                                                            function(n, r) {
                                                                Promise[e](
                                                                    t.map(
                                                                        function(
                                                                            e,
                                                                        ) {
                                                                            return e.p;
                                                                        },
                                                                    ),
                                                                ).then(n, r);
                                                            },
                                                        );
                                                    };
                                                }),
                                                (Typeson.Undefined = Undefined),
                                                (Typeson.Promise = TypesonPromise),
                                                (Typeson.isThenable = isThenable),
                                                (Typeson.toStringTag = toStringTag),
                                                (Typeson.hasConstructorOf = hasConstructorOf),
                                                (Typeson.isObject = isObject),
                                                (Typeson.isPlainObject = isPlainObject),
                                                (Typeson.isUserObject = function isUserObject(
                                                    e,
                                                ) {
                                                    if (
                                                        !e ||
                                                        "Object" !==
                                                            toStringTag(e)
                                                    )
                                                        return !1;
                                                    var t = s(e);
                                                    return (
                                                        !t ||
                                                        hasConstructorOf(
                                                            e,
                                                            Object,
                                                        ) ||
                                                        isUserObject(t)
                                                    );
                                                }),
                                                (Typeson.escapeKeyPathComponent = escapeKeyPathComponent),
                                                (Typeson.unescapeKeyPathComponent = unescapeKeyPathComponent),
                                                (Typeson.getByKeyPath = getByKeyPath),
                                                (Typeson.getJSONType = function(
                                                    t,
                                                ) {
                                                    return null === t
                                                        ? "null"
                                                        : i(t)
                                                        ? "array"
                                                        : void 0 === t
                                                        ? "undefined"
                                                        : e(t);
                                                }),
                                                (Typeson.JSON_TYPES = [
                                                    "null",
                                                    "boolean",
                                                    "number",
                                                    "string",
                                                    "array",
                                                    "object",
                                                ]);
                                            for (
                                                var f = {
                                                        userObject: {
                                                            test: function test(
                                                                e,
                                                                t,
                                                            ) {
                                                                return Typeson.isUserObject(
                                                                    e,
                                                                );
                                                            },
                                                            replace: function replace(
                                                                e,
                                                            ) {
                                                                return Object.assign(
                                                                    {},
                                                                    e,
                                                                );
                                                            },
                                                            revive: function revive(
                                                                e,
                                                            ) {
                                                                return e;
                                                            },
                                                        },
                                                    },
                                                    p = [
                                                        [
                                                            {
                                                                sparseArrays: {
                                                                    testPlainObjects: !0,
                                                                    test: function test(
                                                                        e,
                                                                    ) {
                                                                        return Array.isArray(
                                                                            e,
                                                                        );
                                                                    },
                                                                    replace: function replace(
                                                                        e,
                                                                        t,
                                                                    ) {
                                                                        return (
                                                                            (t.iterateUnsetNumeric = !0),
                                                                            e
                                                                        );
                                                                    },
                                                                },
                                                            },
                                                            {
                                                                sparseUndefined: {
                                                                    test: function test(
                                                                        e,
                                                                        t,
                                                                    ) {
                                                                        return (
                                                                            void 0 ===
                                                                                e &&
                                                                            !1 ===
                                                                                t.ownKeys
                                                                        );
                                                                    },
                                                                    replace: function replace(
                                                                        e,
                                                                    ) {
                                                                        return null;
                                                                    },
                                                                    revive: function revive(
                                                                        e,
                                                                    ) {},
                                                                },
                                                            },
                                                        ],
                                                        {
                                                            undef: {
                                                                test: function test(
                                                                    e,
                                                                    t,
                                                                ) {
                                                                    return (
                                                                        void 0 ===
                                                                            e &&
                                                                        (t.ownKeys ||
                                                                            !(
                                                                                "ownKeys" in
                                                                                t
                                                                            ))
                                                                    );
                                                                },
                                                                replace: function replace(
                                                                    e,
                                                                ) {
                                                                    return null;
                                                                },
                                                                revive: function revive(
                                                                    e,
                                                                ) {
                                                                    return new Typeson.Undefined();
                                                                },
                                                            },
                                                        },
                                                    ],
                                                    l = {
                                                        StringObject: {
                                                            test: function test(
                                                                t,
                                                            ) {
                                                                return (
                                                                    "String" ===
                                                                        Typeson.toStringTag(
                                                                            t,
                                                                        ) &&
                                                                    "object" ===
                                                                        (void 0 ===
                                                                        t
                                                                            ? "undefined"
                                                                            : e(
                                                                                  t,
                                                                              ))
                                                                );
                                                            },
                                                            replace: function replace(
                                                                e,
                                                            ) {
                                                                return String(
                                                                    e,
                                                                );
                                                            },
                                                            revive: function revive(
                                                                e,
                                                            ) {
                                                                return new String(
                                                                    e,
                                                                );
                                                            },
                                                        },
                                                        BooleanObject: {
                                                            test: function test(
                                                                t,
                                                            ) {
                                                                return (
                                                                    "Boolean" ===
                                                                        Typeson.toStringTag(
                                                                            t,
                                                                        ) &&
                                                                    "object" ===
                                                                        (void 0 ===
                                                                        t
                                                                            ? "undefined"
                                                                            : e(
                                                                                  t,
                                                                              ))
                                                                );
                                                            },
                                                            replace: function replace(
                                                                e,
                                                            ) {
                                                                return Boolean(
                                                                    e,
                                                                );
                                                            },
                                                            revive: function revive(
                                                                e,
                                                            ) {
                                                                return new Boolean(
                                                                    e,
                                                                );
                                                            },
                                                        },
                                                        NumberObject: {
                                                            test: function test(
                                                                t,
                                                            ) {
                                                                return (
                                                                    "Number" ===
                                                                        Typeson.toStringTag(
                                                                            t,
                                                                        ) &&
                                                                    "object" ===
                                                                        (void 0 ===
                                                                        t
                                                                            ? "undefined"
                                                                            : e(
                                                                                  t,
                                                                              ))
                                                                );
                                                            },
                                                            replace: function replace(
                                                                e,
                                                            ) {
                                                                return Number(
                                                                    e,
                                                                );
                                                            },
                                                            revive: function revive(
                                                                e,
                                                            ) {
                                                                return new Number(
                                                                    e,
                                                                );
                                                            },
                                                        },
                                                    },
                                                    y = [
                                                        {
                                                            nan: {
                                                                test: function test(
                                                                    e,
                                                                ) {
                                                                    return (
                                                                        "number" ==
                                                                            typeof e &&
                                                                        isNaN(e)
                                                                    );
                                                                },
                                                                replace: function replace(
                                                                    e,
                                                                ) {
                                                                    return "NaN";
                                                                },
                                                                revive: function revive(
                                                                    e,
                                                                ) {
                                                                    return NaN;
                                                                },
                                                            },
                                                        },
                                                        {
                                                            infinity: {
                                                                test: function test(
                                                                    e,
                                                                ) {
                                                                    return (
                                                                        e ===
                                                                        1 / 0
                                                                    );
                                                                },
                                                                replace: function replace(
                                                                    e,
                                                                ) {
                                                                    return "Infinity";
                                                                },
                                                                revive: function revive(
                                                                    e,
                                                                ) {
                                                                    return (
                                                                        1 / 0
                                                                    );
                                                                },
                                                            },
                                                        },
                                                        {
                                                            negativeInfinity: {
                                                                test: function test(
                                                                    e,
                                                                ) {
                                                                    return (
                                                                        e ===
                                                                        -1 / 0
                                                                    );
                                                                },
                                                                replace: function replace(
                                                                    e,
                                                                ) {
                                                                    return "-Infinity";
                                                                },
                                                                revive: function revive(
                                                                    e,
                                                                ) {
                                                                    return (
                                                                        -1 / 0
                                                                    );
                                                                },
                                                            },
                                                        },
                                                    ],
                                                    v = {
                                                        date: {
                                                            test: function test(
                                                                e,
                                                            ) {
                                                                return (
                                                                    "Date" ===
                                                                    Typeson.toStringTag(
                                                                        e,
                                                                    )
                                                                );
                                                            },
                                                            replace: function replace(
                                                                e,
                                                            ) {
                                                                var t = e.getTime();
                                                                return isNaN(t)
                                                                    ? "NaN"
                                                                    : t;
                                                            },
                                                            revive: function revive(
                                                                e,
                                                            ) {
                                                                return "NaN" ===
                                                                    e
                                                                    ? new Date(
                                                                          NaN,
                                                                      )
                                                                    : new Date(
                                                                          e,
                                                                      );
                                                            },
                                                        },
                                                    },
                                                    d = {
                                                        regexp: {
                                                            test: function test(
                                                                e,
                                                            ) {
                                                                return (
                                                                    "RegExp" ===
                                                                    Typeson.toStringTag(
                                                                        e,
                                                                    )
                                                                );
                                                            },
                                                            replace: function replace(
                                                                e,
                                                            ) {
                                                                return {
                                                                    source:
                                                                        e.source,
                                                                    flags:
                                                                        (e.global
                                                                            ? "g"
                                                                            : "") +
                                                                        (e.ignoreCase
                                                                            ? "i"
                                                                            : "") +
                                                                        (e.multiline
                                                                            ? "m"
                                                                            : "") +
                                                                        (e.sticky
                                                                            ? "y"
                                                                            : "") +
                                                                        (e.unicode
                                                                            ? "u"
                                                                            : ""),
                                                                };
                                                            },
                                                            revive: function revive(
                                                                e,
                                                            ) {
                                                                var t =
                                                                        e.source,
                                                                    n = e.flags;
                                                                return new RegExp(
                                                                    t,
                                                                    n,
                                                                );
                                                            },
                                                        },
                                                    },
                                                    h = {
                                                        map: {
                                                            test: function test(
                                                                e,
                                                            ) {
                                                                return (
                                                                    "Map" ===
                                                                    Typeson.toStringTag(
                                                                        e,
                                                                    )
                                                                );
                                                            },
                                                            replace: function replace(
                                                                e,
                                                            ) {
                                                                return Array.from(
                                                                    e.entries(),
                                                                );
                                                            },
                                                            revive: function revive(
                                                                e,
                                                            ) {
                                                                return new Map(
                                                                    e,
                                                                );
                                                            },
                                                        },
                                                    },
                                                    b = {
                                                        set: {
                                                            test: function test(
                                                                e,
                                                            ) {
                                                                return (
                                                                    "Set" ===
                                                                    Typeson.toStringTag(
                                                                        e,
                                                                    )
                                                                );
                                                            },
                                                            replace: function replace(
                                                                e,
                                                            ) {
                                                                return Array.from(
                                                                    e.values(),
                                                                );
                                                            },
                                                            revive: function revive(
                                                                e,
                                                            ) {
                                                                return new Set(
                                                                    e,
                                                                );
                                                            },
                                                        },
                                                    },
                                                    g =
                                                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
                                                    m = new Uint8Array(256),
                                                    T = 0;
                                                T < g.length;
                                                T++
                                            ) {
                                                m[g.charCodeAt(T)] = T;
                                            }
                                            var O = function encode(e, t, n) {
                                                    for (
                                                        var r = new Uint8Array(
                                                                e,
                                                                t,
                                                                n,
                                                            ),
                                                            i = r.length,
                                                            o = "",
                                                            s = 0;
                                                        s < i;
                                                        s += 3
                                                    ) {
                                                        (o += g[r[s] >> 2]),
                                                            (o +=
                                                                g[
                                                                    ((3 &
                                                                        r[s]) <<
                                                                        4) |
                                                                        (r[
                                                                            s +
                                                                                1
                                                                        ] >>
                                                                            4)
                                                                ]),
                                                            (o +=
                                                                g[
                                                                    ((15 &
                                                                        r[
                                                                            s +
                                                                                1
                                                                        ]) <<
                                                                        2) |
                                                                        (r[
                                                                            s +
                                                                                2
                                                                        ] >>
                                                                            6)
                                                                ]),
                                                            (o +=
                                                                g[
                                                                    63 &
                                                                        r[s + 2]
                                                                ]);
                                                    }
                                                    return (
                                                        i % 3 == 2
                                                            ? (o =
                                                                  o.substring(
                                                                      0,
                                                                      o.length -
                                                                          1,
                                                                  ) + "=")
                                                            : i % 3 == 1 &&
                                                              (o =
                                                                  o.substring(
                                                                      0,
                                                                      o.length -
                                                                          2,
                                                                  ) + "=="),
                                                        o
                                                    );
                                                },
                                                w = function decode(e) {
                                                    var t = e.length,
                                                        n = 0.75 * e.length,
                                                        r = 0,
                                                        i = void 0,
                                                        o = void 0,
                                                        s = void 0,
                                                        a = void 0;
                                                    "=" === e[e.length - 1] &&
                                                        (n--,
                                                        "=" ===
                                                            e[e.length - 2] &&
                                                            n--);
                                                    for (
                                                        var c = new ArrayBuffer(
                                                                n,
                                                            ),
                                                            u = new Uint8Array(
                                                                c,
                                                            ),
                                                            f = 0;
                                                        f < t;
                                                        f += 4
                                                    ) {
                                                        (i =
                                                            m[e.charCodeAt(f)]),
                                                            (o =
                                                                m[
                                                                    e.charCodeAt(
                                                                        f + 1,
                                                                    )
                                                                ]),
                                                            (s =
                                                                m[
                                                                    e.charCodeAt(
                                                                        f + 2,
                                                                    )
                                                                ]),
                                                            (a =
                                                                m[
                                                                    e.charCodeAt(
                                                                        f + 3,
                                                                    )
                                                                ]),
                                                            (u[r++] =
                                                                (i << 2) |
                                                                (o >> 4)),
                                                            (u[r++] =
                                                                ((15 & o) <<
                                                                    4) |
                                                                (s >> 2)),
                                                            (u[r++] =
                                                                ((3 & s) << 6) |
                                                                (63 & a));
                                                    }
                                                    return c;
                                                },
                                                S = {
                                                    arraybuffer: {
                                                        test: function test(e) {
                                                            return (
                                                                "ArrayBuffer" ===
                                                                Typeson.toStringTag(
                                                                    e,
                                                                )
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                            t,
                                                        ) {
                                                            t.buffers ||
                                                                (t.buffers = []);
                                                            var n = t.buffers.indexOf(
                                                                e,
                                                            );
                                                            return n > -1
                                                                ? { index: n }
                                                                : (t.buffers.push(
                                                                      e,
                                                                  ),
                                                                  O(e));
                                                        },
                                                        revive: function revive(
                                                            t,
                                                            n,
                                                        ) {
                                                            if (
                                                                (n.buffers ||
                                                                    (n.buffers = []),
                                                                "object" ===
                                                                    (void 0 ===
                                                                    t
                                                                        ? "undefined"
                                                                        : e(t)))
                                                            )
                                                                return n
                                                                    .buffers[
                                                                    t.index
                                                                ];
                                                            var r = w(t);
                                                            return (
                                                                n.buffers.push(
                                                                    r,
                                                                ),
                                                                r
                                                            );
                                                        },
                                                    },
                                                },
                                                P =
                                                    "undefined" == typeof self
                                                        ? global
                                                        : self,
                                                j = {};
                                            [
                                                "Int8Array",
                                                "Uint8Array",
                                                "Uint8ClampedArray",
                                                "Int16Array",
                                                "Uint16Array",
                                                "Int32Array",
                                                "Uint32Array",
                                                "Float32Array",
                                                "Float64Array",
                                            ].forEach(function(e) {
                                                var t = e,
                                                    n = P[t];
                                                n &&
                                                    (j[e.toLowerCase()] = {
                                                        test: function test(e) {
                                                            return (
                                                                Typeson.toStringTag(
                                                                    e,
                                                                ) === t
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                            t,
                                                        ) {
                                                            var n = e.buffer,
                                                                r =
                                                                    e.byteOffset,
                                                                i = e.length;
                                                            t.buffers ||
                                                                (t.buffers = []);
                                                            var o = t.buffers.indexOf(
                                                                n,
                                                            );
                                                            return o > -1
                                                                ? {
                                                                      index: o,
                                                                      byteOffset: r,
                                                                      length: i,
                                                                  }
                                                                : (t.buffers.push(
                                                                      n,
                                                                  ),
                                                                  {
                                                                      encoded: O(
                                                                          n,
                                                                      ),
                                                                      byteOffset: r,
                                                                      length: i,
                                                                  });
                                                        },
                                                        revive: function revive(
                                                            e,
                                                            t,
                                                        ) {
                                                            t.buffers ||
                                                                (t.buffers = []);
                                                            var r =
                                                                    e.byteOffset,
                                                                i = e.length,
                                                                o = e.encoded,
                                                                s = e.index,
                                                                a = void 0;
                                                            return (
                                                                "index" in e
                                                                    ? (a =
                                                                          t
                                                                              .buffers[
                                                                              s
                                                                          ])
                                                                    : ((a = w(
                                                                          o,
                                                                      )),
                                                                      t.buffers.push(
                                                                          a,
                                                                      )),
                                                                new n(a, r, i)
                                                            );
                                                        },
                                                    });
                                            });
                                            var A = {
                                                    dataview: {
                                                        test: function test(e) {
                                                            return (
                                                                "DataView" ===
                                                                Typeson.toStringTag(
                                                                    e,
                                                                )
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                            t,
                                                        ) {
                                                            var n = e.buffer,
                                                                r =
                                                                    e.byteOffset,
                                                                i =
                                                                    e.byteLength;
                                                            t.buffers ||
                                                                (t.buffers = []);
                                                            var o = t.buffers.indexOf(
                                                                n,
                                                            );
                                                            return o > -1
                                                                ? {
                                                                      index: o,
                                                                      byteOffset: r,
                                                                      byteLength: i,
                                                                  }
                                                                : (t.buffers.push(
                                                                      n,
                                                                  ),
                                                                  {
                                                                      encoded: O(
                                                                          n,
                                                                      ),
                                                                      byteOffset: r,
                                                                      byteLength: i,
                                                                  });
                                                        },
                                                        revive: function revive(
                                                            e,
                                                            t,
                                                        ) {
                                                            t.buffers ||
                                                                (t.buffers = []);
                                                            var n =
                                                                    e.byteOffset,
                                                                r =
                                                                    e.byteLength,
                                                                i = e.encoded,
                                                                o = e.index,
                                                                s = void 0;
                                                            return (
                                                                "index" in e
                                                                    ? (s =
                                                                          t
                                                                              .buffers[
                                                                              o
                                                                          ])
                                                                    : ((s = w(
                                                                          i,
                                                                      )),
                                                                      t.buffers.push(
                                                                          s,
                                                                      )),
                                                                new DataView(
                                                                    s,
                                                                    n,
                                                                    r,
                                                                )
                                                            );
                                                        },
                                                    },
                                                },
                                                C = {
                                                    IntlCollator: {
                                                        test: function test(e) {
                                                            return Typeson.hasConstructorOf(
                                                                e,
                                                                Intl.Collator,
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                        ) {
                                                            return e.resolvedOptions();
                                                        },
                                                        revive: function revive(
                                                            e,
                                                        ) {
                                                            return new Intl.Collator(
                                                                e.locale,
                                                                e,
                                                            );
                                                        },
                                                    },
                                                    IntlDateTimeFormat: {
                                                        test: function test(e) {
                                                            return Typeson.hasConstructorOf(
                                                                e,
                                                                Intl.DateTimeFormat,
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                        ) {
                                                            return e.resolvedOptions();
                                                        },
                                                        revive: function revive(
                                                            e,
                                                        ) {
                                                            return new Intl.DateTimeFormat(
                                                                e.locale,
                                                                e,
                                                            );
                                                        },
                                                    },
                                                    IntlNumberFormat: {
                                                        test: function test(e) {
                                                            return Typeson.hasConstructorOf(
                                                                e,
                                                                Intl.NumberFormat,
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                        ) {
                                                            return e.resolvedOptions();
                                                        },
                                                        revive: function revive(
                                                            e,
                                                        ) {
                                                            return new Intl.NumberFormat(
                                                                e.locale,
                                                                e,
                                                            );
                                                        },
                                                    },
                                                },
                                                N = {
                                                    file: {
                                                        test: function test(e) {
                                                            return (
                                                                "File" ===
                                                                Typeson.toStringTag(
                                                                    e,
                                                                )
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                        ) {
                                                            var t = new XMLHttpRequest();
                                                            if (
                                                                (t.open(
                                                                    "GET",
                                                                    URL.createObjectURL(
                                                                        e,
                                                                    ),
                                                                    !1,
                                                                ),
                                                                200 !==
                                                                    t.status &&
                                                                    0 !==
                                                                        t.status)
                                                            )
                                                                throw new Error(
                                                                    "Bad Blob access: " +
                                                                        t.status,
                                                                );
                                                            return (
                                                                t.send(),
                                                                {
                                                                    type:
                                                                        e.type,
                                                                    stringContents:
                                                                        t.responseText,
                                                                    name:
                                                                        e.name,
                                                                    lastModified:
                                                                        e.lastModified,
                                                                }
                                                            );
                                                        },
                                                        revive: function revive(
                                                            e,
                                                        ) {
                                                            var t = e.name,
                                                                n = e.type,
                                                                r =
                                                                    e.stringContents,
                                                                i =
                                                                    e.lastModified;
                                                            return new File(
                                                                [r],
                                                                t,
                                                                {
                                                                    type: n,
                                                                    lastModified: i,
                                                                },
                                                            );
                                                        },
                                                        replaceAsync: function replaceAsync(
                                                            e,
                                                        ) {
                                                            return new Typeson.Promise(
                                                                function(t, n) {
                                                                    if (
                                                                        e.isClosed
                                                                    )
                                                                        n(
                                                                            new Error(
                                                                                "The File is closed",
                                                                            ),
                                                                        );
                                                                    else {
                                                                        var r = new FileReader();
                                                                        r.addEventListener(
                                                                            "load",
                                                                            function() {
                                                                                t(
                                                                                    {
                                                                                        type:
                                                                                            e.type,
                                                                                        stringContents:
                                                                                            r.result,
                                                                                        name:
                                                                                            e.name,
                                                                                        lastModified:
                                                                                            e.lastModified,
                                                                                    },
                                                                                );
                                                                            },
                                                                        ),
                                                                            r.addEventListener(
                                                                                "error",
                                                                                function() {
                                                                                    n(
                                                                                        r.error,
                                                                                    );
                                                                                },
                                                                            ),
                                                                            r.readAsText(
                                                                                e,
                                                                            );
                                                                    }
                                                                },
                                                            );
                                                        },
                                                    },
                                                };
                                            return [
                                                f,
                                                p,
                                                l,
                                                y,
                                                v,
                                                d,
                                                {
                                                    imagedata: {
                                                        test: function test(e) {
                                                            return (
                                                                "ImageData" ===
                                                                Typeson.toStringTag(
                                                                    e,
                                                                )
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                        ) {
                                                            return {
                                                                array: Array.from(
                                                                    e.data,
                                                                ),
                                                                width: e.width,
                                                                height:
                                                                    e.height,
                                                            };
                                                        },
                                                        revive: function revive(
                                                            e,
                                                        ) {
                                                            return new ImageData(
                                                                new Uint8ClampedArray(
                                                                    e.array,
                                                                ),
                                                                e.width,
                                                                e.height,
                                                            );
                                                        },
                                                    },
                                                },
                                                {
                                                    imagebitmap: {
                                                        test: function test(e) {
                                                            return (
                                                                "ImageBitmap" ===
                                                                    Typeson.toStringTag(
                                                                        e,
                                                                    ) ||
                                                                (e &&
                                                                    e.dataset &&
                                                                    "ImageBitmap" ===
                                                                        e
                                                                            .dataset
                                                                            .toStringTag)
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                        ) {
                                                            var t = document.createElement(
                                                                "canvas",
                                                            );
                                                            return (
                                                                t
                                                                    .getContext(
                                                                        "2d",
                                                                    )
                                                                    .drawImage(
                                                                        e,
                                                                        0,
                                                                        0,
                                                                    ),
                                                                t.toDataURL()
                                                            );
                                                        },
                                                        revive: function revive(
                                                            e,
                                                        ) {
                                                            var t = document.createElement(
                                                                    "canvas",
                                                                ),
                                                                n = t.getContext(
                                                                    "2d",
                                                                ),
                                                                r = document.createElement(
                                                                    "img",
                                                                );
                                                            return (
                                                                (r.onload = function() {
                                                                    n.drawImage(
                                                                        r,
                                                                        0,
                                                                        0,
                                                                    );
                                                                }),
                                                                (r.src = e),
                                                                t
                                                            );
                                                        },
                                                        reviveAsync: function reviveAsync(
                                                            e,
                                                        ) {
                                                            var t = document.createElement(
                                                                    "canvas",
                                                                ),
                                                                n = t.getContext(
                                                                    "2d",
                                                                ),
                                                                r = document.createElement(
                                                                    "img",
                                                                );
                                                            return (
                                                                (r.onload = function() {
                                                                    n.drawImage(
                                                                        r,
                                                                        0,
                                                                        0,
                                                                    );
                                                                }),
                                                                (r.src = e),
                                                                createImageBitmap(
                                                                    t,
                                                                )
                                                            );
                                                        },
                                                    },
                                                },
                                                N,
                                                {
                                                    file: N.file,
                                                    filelist: {
                                                        test: function test(e) {
                                                            return (
                                                                "FileList" ===
                                                                Typeson.toStringTag(
                                                                    e,
                                                                )
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                        ) {
                                                            for (
                                                                var t = [],
                                                                    n = 0;
                                                                n < e.length;
                                                                n++
                                                            ) {
                                                                t[n] = e.item(
                                                                    n,
                                                                );
                                                            }
                                                            return t;
                                                        },
                                                        revive: function revive(
                                                            e,
                                                        ) {
                                                            function FileList() {
                                                                (this._files =
                                                                    arguments[0]),
                                                                    (this.length = this._files.length);
                                                            }
                                                            return (
                                                                (FileList.prototype.item = function(
                                                                    e,
                                                                ) {
                                                                    return this
                                                                        ._files[
                                                                        e
                                                                    ];
                                                                }),
                                                                (FileList.prototype[
                                                                    Symbol.toStringTag
                                                                ] = "FileList"),
                                                                new FileList(e)
                                                            );
                                                        },
                                                    },
                                                },
                                                {
                                                    blob: {
                                                        test: function test(e) {
                                                            return (
                                                                "Blob" ===
                                                                Typeson.toStringTag(
                                                                    e,
                                                                )
                                                            );
                                                        },
                                                        replace: function replace(
                                                            e,
                                                        ) {
                                                            var t = new XMLHttpRequest();
                                                            if (
                                                                (t.open(
                                                                    "GET",
                                                                    URL.createObjectURL(
                                                                        e,
                                                                    ),
                                                                    !1,
                                                                ),
                                                                200 !==
                                                                    t.status &&
                                                                    0 !==
                                                                        t.status)
                                                            )
                                                                throw new Error(
                                                                    "Bad Blob access: " +
                                                                        t.status,
                                                                );
                                                            return (
                                                                t.send(),
                                                                {
                                                                    type:
                                                                        e.type,
                                                                    stringContents:
                                                                        t.responseText,
                                                                }
                                                            );
                                                        },
                                                        revive: function revive(
                                                            e,
                                                        ) {
                                                            var t = e.type,
                                                                n =
                                                                    e.stringContents;
                                                            return new Blob(
                                                                [n],
                                                                { type: t },
                                                            );
                                                        },
                                                        replaceAsync: function replaceAsync(
                                                            e,
                                                        ) {
                                                            return new Typeson.Promise(
                                                                function(t, n) {
                                                                    if (
                                                                        e.isClosed
                                                                    )
                                                                        n(
                                                                            new Error(
                                                                                "The Blob is closed",
                                                                            ),
                                                                        );
                                                                    else {
                                                                        var r = new FileReader();
                                                                        r.addEventListener(
                                                                            "load",
                                                                            function() {
                                                                                t(
                                                                                    {
                                                                                        type:
                                                                                            e.type,
                                                                                        stringContents:
                                                                                            r.result,
                                                                                    },
                                                                                );
                                                                            },
                                                                        ),
                                                                            r.addEventListener(
                                                                                "error",
                                                                                function() {
                                                                                    n(
                                                                                        r.error,
                                                                                    );
                                                                                },
                                                                            ),
                                                                            r.readAsText(
                                                                                e,
                                                                            );
                                                                    }
                                                                },
                                                            );
                                                        },
                                                    },
                                                },
                                            ]
                                                .concat(
                                                    "function" == typeof Map
                                                        ? h
                                                        : [],
                                                    "function" == typeof Set
                                                        ? b
                                                        : [],
                                                    "function" ==
                                                        typeof ArrayBuffer
                                                        ? S
                                                        : [],
                                                    "function" ==
                                                        typeof Uint8Array
                                                        ? j
                                                        : [],
                                                    "function" ==
                                                        typeof DataView
                                                        ? A
                                                        : [],
                                                    "undefined" != typeof Intl
                                                        ? C
                                                        : [],
                                                )
                                                .concat({
                                                    checkDataCloneException: [
                                                        function(t) {
                                                            var n = {}.toString
                                                                .call(t)
                                                                .slice(8, -1);
                                                            if (
                                                                [
                                                                    "symbol",
                                                                    "function",
                                                                ].includes(
                                                                    void 0 === t
                                                                        ? "undefined"
                                                                        : e(t),
                                                                ) ||
                                                                [
                                                                    "Arguments",
                                                                    "Module",
                                                                    "Error",
                                                                    "Promise",
                                                                    "WeakMap",
                                                                    "WeakSet",
                                                                ].includes(n) ||
                                                                t ===
                                                                    Object.prototype ||
                                                                (("Blob" ===
                                                                    n ||
                                                                    "File" ===
                                                                        n) &&
                                                                    t.isClosed) ||
                                                                (t &&
                                                                    "object" ===
                                                                        (void 0 ===
                                                                        t
                                                                            ? "undefined"
                                                                            : e(
                                                                                  t,
                                                                              )) &&
                                                                    "number" ==
                                                                        typeof t.nodeType &&
                                                                    "function" ==
                                                                        typeof t.insertBefore)
                                                            )
                                                                throw new DOMException(
                                                                    "The object cannot be cloned.",
                                                                    "DataCloneError",
                                                                );
                                                            return !1;
                                                        },
                                                    ],
                                                });
                                        });
                                    },
                                    {},
                                ],
                                47: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var _typeof2 =
                                            typeof Symbol === "function" &&
                                            typeof Symbol.iterator === "symbol"
                                                ? function(obj) {
                                                      return typeof obj;
                                                  }
                                                : function(obj) {
                                                      return obj &&
                                                          typeof Symbol ===
                                                              "function" &&
                                                          obj.constructor ===
                                                              Symbol &&
                                                          obj !==
                                                              Symbol.prototype
                                                          ? "symbol"
                                                          : typeof obj;
                                                  };

                                        var _typeof =
                                                "function" == typeof Symbol &&
                                                "symbol" ==
                                                    _typeof2(Symbol.iterator)
                                                    ? function(e) {
                                                          return typeof e ===
                                                              "undefined"
                                                              ? "undefined"
                                                              : _typeof2(e);
                                                      }
                                                    : function(e) {
                                                          return e &&
                                                              "function" ==
                                                                  typeof Symbol &&
                                                              e.constructor ===
                                                                  Symbol &&
                                                              e !==
                                                                  Symbol.prototype
                                                              ? "symbol"
                                                              : typeof e ===
                                                                "undefined"
                                                              ? "undefined"
                                                              : _typeof2(e);
                                                      },
                                            slicedToArray = (function() {
                                                return function(e, n) {
                                                    if (Array.isArray(e))
                                                        return e;
                                                    if (
                                                        Symbol.iterator in
                                                        Object(e)
                                                    )
                                                        return (function sliceIterator(
                                                            e,
                                                            n,
                                                        ) {
                                                            var t = [],
                                                                r = !0,
                                                                i = !1,
                                                                o = void 0;
                                                            try {
                                                                for (
                                                                    var s,
                                                                        a = e[
                                                                            Symbol
                                                                                .iterator
                                                                        ]();
                                                                    !(r = (s = a.next())
                                                                        .done) &&
                                                                    (t.push(
                                                                        s.value,
                                                                    ),
                                                                    !n ||
                                                                        t.length !==
                                                                            n);
                                                                    r = !0
                                                                ) {}
                                                            } catch (e) {
                                                                (i = !0),
                                                                    (o = e);
                                                            } finally {
                                                                try {
                                                                    !r &&
                                                                        a.return &&
                                                                        a.return();
                                                                } finally {
                                                                    if (i)
                                                                        throw o;
                                                                }
                                                            }
                                                            return t;
                                                        })(e, n);
                                                    throw new TypeError(
                                                        "Invalid attempt to destructure non-iterable instance",
                                                    );
                                                };
                                            })(),
                                            toConsumableArray = function toConsumableArray(
                                                e,
                                            ) {
                                                if (Array.isArray(e)) {
                                                    for (
                                                        var n = 0,
                                                            t = Array(e.length);
                                                        n < e.length;
                                                        n++
                                                    ) {
                                                        t[n] = e[n];
                                                    }
                                                    return t;
                                                }
                                                return Array.from(e);
                                            },
                                            keys = Object.keys,
                                            isArray = Array.isArray,
                                            toString = {}.toString,
                                            getProto = Object.getPrototypeOf,
                                            hasOwn = {}.hasOwnProperty,
                                            fnToString = hasOwn.toString,
                                            internalStateObjPropsToIgnore = [
                                                "type",
                                                "replaced",
                                                "iterateIn",
                                                "iterateUnsetNumeric",
                                            ];
                                        function isThenable(e, n) {
                                            return (
                                                Typeson.isObject(e) &&
                                                "function" == typeof e.then &&
                                                (!n ||
                                                    "function" ==
                                                        typeof e.catch)
                                            );
                                        }
                                        function toStringTag(e) {
                                            return toString
                                                .call(e)
                                                .slice(8, -1);
                                        }
                                        function hasConstructorOf(e, n) {
                                            if (
                                                !e ||
                                                "object" !==
                                                    (void 0 === e
                                                        ? "undefined"
                                                        : _typeof(e))
                                            )
                                                return !1;
                                            var t = getProto(e);
                                            if (!t) return !1;
                                            var r =
                                                hasOwn.call(t, "constructor") &&
                                                t.constructor;
                                            return "function" != typeof r
                                                ? null === n
                                                : "function" == typeof r &&
                                                      null !== n &&
                                                      fnToString.call(r) ===
                                                          fnToString.call(n);
                                        }
                                        function isPlainObject(e) {
                                            return (
                                                !(
                                                    !e ||
                                                    "Object" !== toStringTag(e)
                                                ) &&
                                                (!getProto(e) ||
                                                    hasConstructorOf(e, Object))
                                            );
                                        }
                                        function isUserObject(e) {
                                            if (
                                                !e ||
                                                "Object" !== toStringTag(e)
                                            )
                                                return !1;
                                            var n = getProto(e);
                                            return (
                                                !n ||
                                                hasConstructorOf(e, Object) ||
                                                isUserObject(n)
                                            );
                                        }
                                        function isObject(e) {
                                            return (
                                                e &&
                                                "object" ===
                                                    (void 0 === e
                                                        ? "undefined"
                                                        : _typeof(e))
                                            );
                                        }
                                        function Typeson(e) {
                                            var n = [],
                                                t = [],
                                                r = {},
                                                i = (this.types = {}),
                                                o = (this.stringify = function(
                                                    n,
                                                    t,
                                                    r,
                                                    i,
                                                ) {
                                                    i = Object.assign(
                                                        {},
                                                        e,
                                                        i,
                                                        { stringification: !0 },
                                                    );
                                                    var o = a(n, null, i);
                                                    return isArray(o)
                                                        ? JSON.stringify(
                                                              o[0],
                                                              t,
                                                              r,
                                                          )
                                                        : o.then(function(e) {
                                                              return JSON.stringify(
                                                                  e,
                                                                  t,
                                                                  r,
                                                              );
                                                          });
                                                });
                                            (this.stringifySync = function(
                                                e,
                                                n,
                                                t,
                                                r,
                                            ) {
                                                return o(
                                                    e,
                                                    n,
                                                    t,
                                                    Object.assign(
                                                        {},
                                                        {
                                                            throwOnBadSyncType: !0,
                                                        },
                                                        r,
                                                        { sync: !0 },
                                                    ),
                                                );
                                            }),
                                                (this.stringifyAsync = function(
                                                    e,
                                                    n,
                                                    t,
                                                    r,
                                                ) {
                                                    return o(
                                                        e,
                                                        n,
                                                        t,
                                                        Object.assign(
                                                            {},
                                                            {
                                                                throwOnBadSyncType: !0,
                                                            },
                                                            r,
                                                            { sync: !1 },
                                                        ),
                                                    );
                                                });
                                            var s = (this.parse = function(
                                                n,
                                                t,
                                                r,
                                            ) {
                                                return (
                                                    (r = Object.assign(
                                                        {},
                                                        e,
                                                        r,
                                                        { parse: !0 },
                                                    )),
                                                    c(JSON.parse(n, t), r)
                                                );
                                            });
                                            (this.parseSync = function(
                                                e,
                                                n,
                                                t,
                                            ) {
                                                return s(
                                                    e,
                                                    n,
                                                    Object.assign(
                                                        {},
                                                        {
                                                            throwOnBadSyncType: !0,
                                                        },
                                                        t,
                                                        { sync: !0 },
                                                    ),
                                                );
                                            }),
                                                (this.parseAsync = function(
                                                    e,
                                                    n,
                                                    t,
                                                ) {
                                                    return s(
                                                        e,
                                                        n,
                                                        Object.assign(
                                                            {},
                                                            {
                                                                throwOnBadSyncType: !0,
                                                            },
                                                            t,
                                                            { sync: !1 },
                                                        ),
                                                    );
                                                }),
                                                (this.specialTypeNames = function(
                                                    e,
                                                    n,
                                                ) {
                                                    var t =
                                                        arguments.length > 2 &&
                                                        void 0 !== arguments[2]
                                                            ? arguments[2]
                                                            : {};
                                                    return (
                                                        (t.returnTypeNames = !0),
                                                        this.encapsulate(
                                                            e,
                                                            n,
                                                            t,
                                                        )
                                                    );
                                                }),
                                                (this.rootTypeName = function(
                                                    e,
                                                    n,
                                                ) {
                                                    var t =
                                                        arguments.length > 2 &&
                                                        void 0 !== arguments[2]
                                                            ? arguments[2]
                                                            : {};
                                                    return (
                                                        (t.iterateNone = !0),
                                                        this.encapsulate(
                                                            e,
                                                            n,
                                                            t,
                                                        )
                                                    );
                                                });
                                            var a = (this.encapsulate = function(
                                                i,
                                                o,
                                                s,
                                            ) {
                                                var a = (s = Object.assign(
                                                        { sync: !0 },
                                                        e,
                                                        s,
                                                    )).sync,
                                                    c = {},
                                                    u = [],
                                                    y = [],
                                                    p = [],
                                                    f =
                                                        !(s && "cyclic" in s) ||
                                                        s.cyclic,
                                                    l = s.encapsulateObserver,
                                                    h = _encapsulate(
                                                        "",
                                                        i,
                                                        f,
                                                        o || {},
                                                        p,
                                                    );
                                                function finish(e) {
                                                    var n = Object.values(c);
                                                    if (s.iterateNone)
                                                        return n.length
                                                            ? n[0]
                                                            : Typeson.getJSONType(
                                                                  e,
                                                              );
                                                    if (n.length) {
                                                        if (s.returnTypeNames)
                                                            return [].concat(
                                                                toConsumableArray(
                                                                    new Set(n),
                                                                ),
                                                            );
                                                        e &&
                                                        isPlainObject(e) &&
                                                        !e.hasOwnProperty(
                                                            "$types",
                                                        )
                                                            ? (e.$types = c)
                                                            : (e = {
                                                                  $: e,
                                                                  $types: {
                                                                      $: c,
                                                                  },
                                                              });
                                                    } else
                                                        isObject(e) &&
                                                            e.hasOwnProperty(
                                                                "$types",
                                                            ) &&
                                                            (e = {
                                                                $: e,
                                                                $types: !0,
                                                            });
                                                    return (
                                                        !s.returnTypeNames && e
                                                    );
                                                }
                                                return p.length
                                                    ? a && s.throwOnBadSyncType
                                                        ? (function() {
                                                              throw new TypeError(
                                                                  "Sync method requested but async result obtained",
                                                              );
                                                          })()
                                                        : Promise.resolve(
                                                              (function checkPromises(
                                                                  e,
                                                                  n,
                                                              ) {
                                                                  return Promise.all(
                                                                      n.map(
                                                                          function(
                                                                              e,
                                                                          ) {
                                                                              return e[1]
                                                                                  .p;
                                                                          },
                                                                      ),
                                                                  )
                                                                      .then(
                                                                          function(
                                                                              t,
                                                                          ) {
                                                                              return Promise.all(
                                                                                  t.map(
                                                                                      function(
                                                                                          t,
                                                                                      ) {
                                                                                          var r = [],
                                                                                              i = n.splice(
                                                                                                  0,
                                                                                                  1,
                                                                                              )[0],
                                                                                              o = slicedToArray(
                                                                                                  i,
                                                                                                  7,
                                                                                              ),
                                                                                              s =
                                                                                                  o[0],
                                                                                              a =
                                                                                                  o[2],
                                                                                              c =
                                                                                                  o[3],
                                                                                              u =
                                                                                                  o[4],
                                                                                              y =
                                                                                                  o[5],
                                                                                              p =
                                                                                                  o[6],
                                                                                              f = _encapsulate(
                                                                                                  s,
                                                                                                  t,
                                                                                                  a,
                                                                                                  c,
                                                                                                  r,
                                                                                                  !0,
                                                                                                  p,
                                                                                              ),
                                                                                              l = hasConstructorOf(
                                                                                                  f,
                                                                                                  TypesonPromise,
                                                                                              );
                                                                                          return s &&
                                                                                              l
                                                                                              ? f.p.then(
                                                                                                    function(
                                                                                                        n,
                                                                                                    ) {
                                                                                                        return (
                                                                                                            (u[
                                                                                                                y
                                                                                                            ] = n),
                                                                                                            checkPromises(
                                                                                                                e,
                                                                                                                r,
                                                                                                            )
                                                                                                        );
                                                                                                    },
                                                                                                )
                                                                                              : (s
                                                                                                    ? (u[
                                                                                                          y
                                                                                                      ] = f)
                                                                                                    : (e = l
                                                                                                          ? f.p
                                                                                                          : f),
                                                                                                checkPromises(
                                                                                                    e,
                                                                                                    r,
                                                                                                ));
                                                                                      },
                                                                                  ),
                                                                              );
                                                                          },
                                                                      )
                                                                      .then(
                                                                          function() {
                                                                              return e;
                                                                          },
                                                                      );
                                                              })(h, p),
                                                          ).then(finish)
                                                    : !a && s.throwOnBadSyncType
                                                    ? (function() {
                                                          throw new TypeError(
                                                              "Async method requested but sync result obtained",
                                                          );
                                                      })()
                                                    : s.stringification && a
                                                    ? [finish(h)]
                                                    : a
                                                    ? finish(h)
                                                    : Promise.resolve(
                                                          finish(h),
                                                      );
                                                function _adaptBuiltinStateObjectProperties(
                                                    e,
                                                    n,
                                                    t,
                                                ) {
                                                    Object.assign(e, n);
                                                    var r = internalStateObjPropsToIgnore.map(
                                                        function(n) {
                                                            var t = e[n];
                                                            return (
                                                                delete e[n], t
                                                            );
                                                        },
                                                    );
                                                    t(),
                                                        internalStateObjPropsToIgnore.forEach(
                                                            function(n, t) {
                                                                e[n] = r[t];
                                                            },
                                                        );
                                                }
                                                function _encapsulate(
                                                    e,
                                                    t,
                                                    r,
                                                    i,
                                                    o,
                                                    a,
                                                    p,
                                                ) {
                                                    var f = void 0,
                                                        h = {},
                                                        v =
                                                            void 0 === t
                                                                ? "undefined"
                                                                : _typeof(t),
                                                        d = l
                                                            ? function(n) {
                                                                  var s =
                                                                      p ||
                                                                      i.type ||
                                                                      Typeson.getJSONType(
                                                                          t,
                                                                      );
                                                                  l(
                                                                      Object.assign(
                                                                          n ||
                                                                              h,
                                                                          {
                                                                              keypath: e,
                                                                              value: t,
                                                                              cyclic: r,
                                                                              stateObj: i,
                                                                              promisesData: o,
                                                                              resolvingTypesonPromise: a,
                                                                              awaitingTypesonPromise: hasConstructorOf(
                                                                                  t,
                                                                                  TypesonPromise,
                                                                              ),
                                                                          },
                                                                          void 0 !==
                                                                              s
                                                                              ? {
                                                                                    type: s,
                                                                                }
                                                                              : {},
                                                                      ),
                                                                  );
                                                              }
                                                            : null;
                                                    if (
                                                        v in
                                                        {
                                                            string: 1,
                                                            boolean: 1,
                                                            number: 1,
                                                            undefined: 1,
                                                        }
                                                    )
                                                        return (
                                                            void 0 === t ||
                                                            ("number" === v &&
                                                                (isNaN(t) ||
                                                                    t ===
                                                                        -1 /
                                                                            0 ||
                                                                    t ===
                                                                        1 / 0))
                                                                ? (f = replace(
                                                                      e,
                                                                      t,
                                                                      i,
                                                                      o,
                                                                      !1,
                                                                      a,
                                                                      d,
                                                                  )) !== t &&
                                                                  (h = {
                                                                      replaced: f,
                                                                  })
                                                                : (f = t),
                                                            d && d(),
                                                            f
                                                        );
                                                    if (null === t)
                                                        return d && d(), t;
                                                    if (
                                                        r &&
                                                        !i.iterateIn &&
                                                        !i.iterateUnsetNumeric
                                                    ) {
                                                        var b = u.indexOf(t);
                                                        if (!(b < 0))
                                                            return (
                                                                (c[e] = "#"),
                                                                d &&
                                                                    d({
                                                                        cyclicKeypath:
                                                                            y[
                                                                                b
                                                                            ],
                                                                    }),
                                                                "#" + y[b]
                                                            );
                                                        !0 === r &&
                                                            (u.push(t),
                                                            y.push(e));
                                                    }
                                                    var O = isPlainObject(t),
                                                        g = isArray(t),
                                                        T =
                                                            ((O || g) &&
                                                                (!n.length ||
                                                                    i.replaced)) ||
                                                            i.iterateIn
                                                                ? t
                                                                : replace(
                                                                      e,
                                                                      t,
                                                                      i,
                                                                      o,
                                                                      O || g,
                                                                      null,
                                                                      d,
                                                                  ),
                                                        m = void 0;
                                                    if (
                                                        (T !== t
                                                            ? ((f = T),
                                                              (h = {
                                                                  replaced: T,
                                                              }))
                                                            : g ||
                                                              "array" ===
                                                                  i.iterateIn
                                                            ? ((m = new Array(
                                                                  t.length,
                                                              )),
                                                              (h = {
                                                                  clone: m,
                                                              }))
                                                            : O ||
                                                              "object" ===
                                                                  i.iterateIn
                                                            ? (h = {
                                                                  clone: (m = {}),
                                                              })
                                                            : "" === e &&
                                                              hasConstructorOf(
                                                                  t,
                                                                  TypesonPromise,
                                                              )
                                                            ? (o.push([
                                                                  e,
                                                                  t,
                                                                  r,
                                                                  i,
                                                                  void 0,
                                                                  void 0,
                                                                  i.type,
                                                              ]),
                                                              (f = t))
                                                            : (f = t),
                                                        d && d(),
                                                        s.iterateNone)
                                                    )
                                                        return m || f;
                                                    if (!m) return f;
                                                    if (i.iterateIn) {
                                                        var P = function _loop(
                                                            n,
                                                        ) {
                                                            var s = {
                                                                ownKeys: t.hasOwnProperty(
                                                                    n,
                                                                ),
                                                            };
                                                            _adaptBuiltinStateObjectProperties(
                                                                i,
                                                                s,
                                                                function() {
                                                                    var s =
                                                                            e +
                                                                            (e
                                                                                ? "."
                                                                                : "") +
                                                                            escapeKeyPathComponent(
                                                                                n,
                                                                            ),
                                                                        c = _encapsulate(
                                                                            s,
                                                                            t[
                                                                                n
                                                                            ],
                                                                            !!r,
                                                                            i,
                                                                            o,
                                                                            a,
                                                                        );
                                                                    hasConstructorOf(
                                                                        c,
                                                                        TypesonPromise,
                                                                    )
                                                                        ? o.push(
                                                                              [
                                                                                  s,
                                                                                  c,
                                                                                  !!r,
                                                                                  i,
                                                                                  m,
                                                                                  n,
                                                                                  i.type,
                                                                              ],
                                                                          )
                                                                        : void 0 !==
                                                                              c &&
                                                                          (m[
                                                                              n
                                                                          ] = c);
                                                                },
                                                            );
                                                        };
                                                        for (var j in t) {
                                                            P(j);
                                                        }
                                                        d &&
                                                            d({
                                                                endIterateIn: !0,
                                                                end: !0,
                                                            });
                                                    } else
                                                        keys(t).forEach(
                                                            function(n) {
                                                                var s =
                                                                    e +
                                                                    (e
                                                                        ? "."
                                                                        : "") +
                                                                    escapeKeyPathComponent(
                                                                        n,
                                                                    );
                                                                _adaptBuiltinStateObjectProperties(
                                                                    i,
                                                                    {
                                                                        ownKeys: !0,
                                                                    },
                                                                    function() {
                                                                        var e = _encapsulate(
                                                                            s,
                                                                            t[
                                                                                n
                                                                            ],
                                                                            !!r,
                                                                            i,
                                                                            o,
                                                                            a,
                                                                        );
                                                                        hasConstructorOf(
                                                                            e,
                                                                            TypesonPromise,
                                                                        )
                                                                            ? o.push(
                                                                                  [
                                                                                      s,
                                                                                      e,
                                                                                      !!r,
                                                                                      i,
                                                                                      m,
                                                                                      n,
                                                                                      i.type,
                                                                                  ],
                                                                              )
                                                                            : void 0 !==
                                                                                  e &&
                                                                              (m[
                                                                                  n
                                                                              ] = e);
                                                                    },
                                                                );
                                                            },
                                                        ),
                                                            d &&
                                                                d({
                                                                    endIterateOwn: !0,
                                                                    end: !0,
                                                                });
                                                    if (i.iterateUnsetNumeric) {
                                                        for (
                                                            var S = t.length,
                                                                w = function _loop2(
                                                                    n,
                                                                ) {
                                                                    if (
                                                                        !(
                                                                            n in
                                                                            t
                                                                        )
                                                                    ) {
                                                                        var s =
                                                                            e +
                                                                            (e
                                                                                ? "."
                                                                                : "") +
                                                                            n;
                                                                        _adaptBuiltinStateObjectProperties(
                                                                            i,
                                                                            {
                                                                                ownKeys: !1,
                                                                            },
                                                                            function() {
                                                                                var e = _encapsulate(
                                                                                    s,
                                                                                    void 0,
                                                                                    !!r,
                                                                                    i,
                                                                                    o,
                                                                                    a,
                                                                                );
                                                                                hasConstructorOf(
                                                                                    e,
                                                                                    TypesonPromise,
                                                                                )
                                                                                    ? o.push(
                                                                                          [
                                                                                              s,
                                                                                              e,
                                                                                              !!r,
                                                                                              i,
                                                                                              m,
                                                                                              n,
                                                                                              i.type,
                                                                                          ],
                                                                                      )
                                                                                    : void 0 !==
                                                                                          e &&
                                                                                      (m[
                                                                                          n
                                                                                      ] = e);
                                                                            },
                                                                        );
                                                                    }
                                                                },
                                                                A = 0;
                                                            A < S;
                                                            A++
                                                        ) {
                                                            w(A);
                                                        }
                                                        d &&
                                                            d({
                                                                endIterateUnsetNumeric: !0,
                                                                end: !0,
                                                            });
                                                    }
                                                    return m;
                                                }
                                                function replace(
                                                    e,
                                                    i,
                                                    o,
                                                    s,
                                                    u,
                                                    y,
                                                    p,
                                                ) {
                                                    for (
                                                        var l = u ? n : t,
                                                            h = l.length;
                                                        h--;

                                                    ) {
                                                        var v = l[h];
                                                        if (v.test(i, o)) {
                                                            var d = v.type;
                                                            if (r[d]) {
                                                                var b = c[e];
                                                                c[e] = b
                                                                    ? [
                                                                          d,
                                                                      ].concat(
                                                                          b,
                                                                      )
                                                                    : d;
                                                            }
                                                            return (
                                                                Object.assign(
                                                                    o,
                                                                    {
                                                                        type: d,
                                                                        replaced: !0,
                                                                    },
                                                                ),
                                                                (!a &&
                                                                    v.replaceAsync) ||
                                                                v.replace
                                                                    ? (p &&
                                                                          p({
                                                                              replacing: !0,
                                                                          }),
                                                                      _encapsulate(
                                                                          e,
                                                                          v[
                                                                              a ||
                                                                              !v.replaceAsync
                                                                                  ? "replace"
                                                                                  : "replaceAsync"
                                                                          ](
                                                                              i,
                                                                              o,
                                                                          ),
                                                                          f &&
                                                                              "readonly",
                                                                          o,
                                                                          s,
                                                                          y,
                                                                          d,
                                                                      ))
                                                                    : (p &&
                                                                          p({
                                                                              typeDetected: !0,
                                                                          }),
                                                                      _encapsulate(
                                                                          e,
                                                                          i,
                                                                          f &&
                                                                              "readonly",
                                                                          o,
                                                                          s,
                                                                          y,
                                                                          d,
                                                                      ))
                                                            );
                                                        }
                                                    }
                                                    return i;
                                                }
                                            });
                                            (this.encapsulateSync = function(
                                                e,
                                                n,
                                                t,
                                            ) {
                                                return a(
                                                    e,
                                                    n,
                                                    Object.assign(
                                                        {},
                                                        {
                                                            throwOnBadSyncType: !0,
                                                        },
                                                        t,
                                                        { sync: !0 },
                                                    ),
                                                );
                                            }),
                                                (this.encapsulateAsync = function(
                                                    e,
                                                    n,
                                                    t,
                                                ) {
                                                    return a(
                                                        e,
                                                        n,
                                                        Object.assign(
                                                            {},
                                                            {
                                                                throwOnBadSyncType: !0,
                                                            },
                                                            t,
                                                            { sync: !1 },
                                                        ),
                                                    );
                                                });
                                            var c = (this.revive = function(
                                                n,
                                                t,
                                            ) {
                                                var i = (t = Object.assign(
                                                        { sync: !0 },
                                                        e,
                                                        t,
                                                    )).sync,
                                                    o = n && n.$types,
                                                    s = !0;
                                                if (!o) return n;
                                                if (!0 === o) return n.$;
                                                o.$ &&
                                                    isPlainObject(o.$) &&
                                                    ((n = n.$),
                                                    (o = o.$),
                                                    (s = !1));
                                                var a = [],
                                                    c = {},
                                                    u = (function _revive(
                                                        e,
                                                        n,
                                                        t,
                                                        i,
                                                        u,
                                                        y,
                                                    ) {
                                                        if (s && "$types" === e)
                                                            return;
                                                        var p = o[e];
                                                        if (
                                                            isArray(n) ||
                                                            isPlainObject(n)
                                                        ) {
                                                            var f = isArray(n)
                                                                ? new Array(
                                                                      n.length,
                                                                  )
                                                                : {};
                                                            for (
                                                                keys(n).forEach(
                                                                    function(
                                                                        r,
                                                                    ) {
                                                                        var o = _revive(
                                                                            e +
                                                                                (e
                                                                                    ? "."
                                                                                    : "") +
                                                                                escapeKeyPathComponent(
                                                                                    r,
                                                                                ),
                                                                            n[
                                                                                r
                                                                            ],
                                                                            t ||
                                                                                f,
                                                                            i,
                                                                            f,
                                                                            r,
                                                                        );
                                                                        hasConstructorOf(
                                                                            o,
                                                                            Undefined,
                                                                        )
                                                                            ? (f[
                                                                                  r
                                                                              ] = void 0)
                                                                            : void 0 !==
                                                                                  o &&
                                                                              (f[
                                                                                  r
                                                                              ] = o);
                                                                    },
                                                                ),
                                                                    n = f;
                                                                a.length;

                                                            ) {
                                                                var l = slicedToArray(
                                                                        a[0],
                                                                        4,
                                                                    ),
                                                                    h = l[0],
                                                                    v = l[1],
                                                                    d = l[2],
                                                                    b = l[3],
                                                                    O = getByKeyPath(
                                                                        h,
                                                                        v,
                                                                    );
                                                                if (
                                                                    hasConstructorOf(
                                                                        O,
                                                                        Undefined,
                                                                    )
                                                                )
                                                                    d[
                                                                        b
                                                                    ] = void 0;
                                                                else {
                                                                    if (
                                                                        void 0 ===
                                                                        O
                                                                    )
                                                                        break;
                                                                    d[b] = O;
                                                                }
                                                                a.splice(0, 1);
                                                            }
                                                        }
                                                        if (!p) return n;
                                                        if ("#" === p) {
                                                            var g = getByKeyPath(
                                                                t,
                                                                n.substr(1),
                                                            );
                                                            return (
                                                                void 0 === g &&
                                                                    a.push([
                                                                        t,
                                                                        n.substr(
                                                                            1,
                                                                        ),
                                                                        u,
                                                                        y,
                                                                    ]),
                                                                g
                                                            );
                                                        }
                                                        var T = i.sync;
                                                        return []
                                                            .concat(p)
                                                            .reduce(function(
                                                                e,
                                                                n,
                                                            ) {
                                                                var t = r[n];
                                                                if (!t)
                                                                    throw new Error(
                                                                        "Unregistered type: " +
                                                                            n,
                                                                    );
                                                                return t[
                                                                    T &&
                                                                    t.revive
                                                                        ? "revive"
                                                                        : !T &&
                                                                          t.reviveAsync
                                                                        ? "reviveAsync"
                                                                        : "revive"
                                                                ](e, c);
                                                            },
                                                            n);
                                                    })("", n, null, t);
                                                return isThenable(
                                                    (u = hasConstructorOf(
                                                        u,
                                                        Undefined,
                                                    )
                                                        ? void 0
                                                        : u),
                                                )
                                                    ? i && t.throwOnBadSyncType
                                                        ? (function() {
                                                              throw new TypeError(
                                                                  "Sync method requested but async result obtained",
                                                              );
                                                          })()
                                                        : u
                                                    : !i && t.throwOnBadSyncType
                                                    ? (function() {
                                                          throw new TypeError(
                                                              "Async method requested but sync result obtained",
                                                          );
                                                      })()
                                                    : i
                                                    ? u
                                                    : Promise.resolve(u);
                                            });
                                            (this.reviveSync = function(e, n) {
                                                return c(
                                                    e,
                                                    Object.assign(
                                                        {},
                                                        {
                                                            throwOnBadSyncType: !0,
                                                        },
                                                        n,
                                                        { sync: !0 },
                                                    ),
                                                );
                                            }),
                                                (this.reviveAsync = function(
                                                    e,
                                                    n,
                                                ) {
                                                    return c(
                                                        e,
                                                        Object.assign(
                                                            {},
                                                            {
                                                                throwOnBadSyncType: !0,
                                                            },
                                                            n,
                                                            { sync: !1 },
                                                        ),
                                                    );
                                                }),
                                                (this.register = function(
                                                    e,
                                                    o,
                                                ) {
                                                    return (
                                                        (o = o || {}),
                                                        []
                                                            .concat(e)
                                                            .forEach(function R(
                                                                e,
                                                            ) {
                                                                if (isArray(e))
                                                                    return e.map(
                                                                        R,
                                                                    );
                                                                e &&
                                                                    keys(
                                                                        e,
                                                                    ).forEach(
                                                                        function(
                                                                            s,
                                                                        ) {
                                                                            if (
                                                                                "#" ===
                                                                                s
                                                                            )
                                                                                throw new TypeError(
                                                                                    "# cannot be used as a type name as it is reserved for cyclic objects",
                                                                                );
                                                                            if (
                                                                                Typeson.JSON_TYPES.includes(
                                                                                    s,
                                                                                )
                                                                            )
                                                                                throw new TypeError(
                                                                                    "Plain JSON object types are reserved as type names",
                                                                                );
                                                                            var a =
                                                                                    e[
                                                                                        s
                                                                                    ],
                                                                                c = a.testPlainObjects
                                                                                    ? n
                                                                                    : t,
                                                                                u = c.filter(
                                                                                    function(
                                                                                        e,
                                                                                    ) {
                                                                                        return (
                                                                                            e.type ===
                                                                                            s
                                                                                        );
                                                                                    },
                                                                                );
                                                                            if (
                                                                                (u.length &&
                                                                                    (c.splice(
                                                                                        c.indexOf(
                                                                                            u[0],
                                                                                        ),
                                                                                        1,
                                                                                    ),
                                                                                    delete r[
                                                                                        s
                                                                                    ],
                                                                                    delete i[
                                                                                        s
                                                                                    ]),
                                                                                a)
                                                                            ) {
                                                                                if (
                                                                                    "function" ==
                                                                                    typeof a
                                                                                ) {
                                                                                    var y = a;
                                                                                    a = {
                                                                                        test: function test(
                                                                                            e,
                                                                                        ) {
                                                                                            return (
                                                                                                e &&
                                                                                                e.constructor ===
                                                                                                    y
                                                                                            );
                                                                                        },
                                                                                        replace: function replace(
                                                                                            e,
                                                                                        ) {
                                                                                            return assign(
                                                                                                {},
                                                                                                e,
                                                                                            );
                                                                                        },
                                                                                        revive: function revive(
                                                                                            e,
                                                                                        ) {
                                                                                            return assign(
                                                                                                Object.create(
                                                                                                    y.prototype,
                                                                                                ),
                                                                                                e,
                                                                                            );
                                                                                        },
                                                                                    };
                                                                                } else
                                                                                    isArray(
                                                                                        a,
                                                                                    ) &&
                                                                                        (a = {
                                                                                            test:
                                                                                                a[0],
                                                                                            replace:
                                                                                                a[1],
                                                                                            revive:
                                                                                                a[2],
                                                                                        });
                                                                                var p = {
                                                                                    type: s,
                                                                                    test: a.test.bind(
                                                                                        a,
                                                                                    ),
                                                                                };
                                                                                a.replace &&
                                                                                    (p.replace = a.replace.bind(
                                                                                        a,
                                                                                    )),
                                                                                    a.replaceAsync &&
                                                                                        (p.replaceAsync = a.replaceAsync.bind(
                                                                                            a,
                                                                                        ));
                                                                                var f =
                                                                                    "number" ==
                                                                                    typeof o.fallback
                                                                                        ? o.fallback
                                                                                        : o.fallback
                                                                                        ? 0
                                                                                        : 1 /
                                                                                          0;
                                                                                if (
                                                                                    (a.testPlainObjects
                                                                                        ? n.splice(
                                                                                              f,
                                                                                              0,
                                                                                              p,
                                                                                          )
                                                                                        : t.splice(
                                                                                              f,
                                                                                              0,
                                                                                              p,
                                                                                          ),
                                                                                    a.revive ||
                                                                                        a.reviveAsync)
                                                                                ) {
                                                                                    var l = {};
                                                                                    a.revive &&
                                                                                        (l.revive = a.revive.bind(
                                                                                            a,
                                                                                        )),
                                                                                        a.reviveAsync &&
                                                                                            (l.reviveAsync = a.reviveAsync.bind(
                                                                                                a,
                                                                                            )),
                                                                                        (r[
                                                                                            s
                                                                                        ] = l);
                                                                                }
                                                                                i[
                                                                                    s
                                                                                ] = a;
                                                                            }
                                                                        },
                                                                    );
                                                            }),
                                                        this
                                                    );
                                                });
                                        }
                                        function assign(e, n) {
                                            return (
                                                keys(n).map(function(t) {
                                                    e[t] = n[t];
                                                }),
                                                e
                                            );
                                        }
                                        function escapeKeyPathComponent(e) {
                                            return e
                                                .replace(/~/g, "~0")
                                                .replace(/\./g, "~1");
                                        }
                                        function unescapeKeyPathComponent(e) {
                                            return e
                                                .replace(/~1/g, ".")
                                                .replace(/~0/g, "~");
                                        }
                                        function getByKeyPath(e, n) {
                                            if ("" === n) return e;
                                            var t = n.indexOf(".");
                                            if (t > -1) {
                                                var r =
                                                    e[
                                                        unescapeKeyPathComponent(
                                                            n.substr(0, t),
                                                        )
                                                    ];
                                                return void 0 === r
                                                    ? void 0
                                                    : getByKeyPath(
                                                          r,
                                                          n.substr(t + 1),
                                                      );
                                            }
                                            return e[
                                                unescapeKeyPathComponent(n)
                                            ];
                                        }
                                        function Undefined() {}
                                        function TypesonPromise(e) {
                                            this.p = new Promise(e);
                                        }
                                        (TypesonPromise.prototype.then = function(
                                            e,
                                            n,
                                        ) {
                                            var t = this;
                                            return new TypesonPromise(function(
                                                r,
                                                i,
                                            ) {
                                                t.p.then(
                                                    function(n) {
                                                        r(e ? e(n) : n);
                                                    },
                                                    function(e) {
                                                        t.p
                                                            .catch(function(e) {
                                                                return n
                                                                    ? n(e)
                                                                    : Promise.reject(
                                                                          e,
                                                                      );
                                                            })
                                                            .then(r, i);
                                                    },
                                                );
                                            });
                                        }),
                                            (TypesonPromise.prototype.catch = function(
                                                e,
                                            ) {
                                                return this.then(null, e);
                                            }),
                                            (TypesonPromise.resolve = function(
                                                e,
                                            ) {
                                                return new TypesonPromise(
                                                    function(n) {
                                                        n(e);
                                                    },
                                                );
                                            }),
                                            (TypesonPromise.reject = function(
                                                e,
                                            ) {
                                                return new TypesonPromise(
                                                    function(n, t) {
                                                        t(e);
                                                    },
                                                );
                                            }),
                                            ["all", "race"].map(function(e) {
                                                TypesonPromise[e] = function(
                                                    n,
                                                ) {
                                                    return new TypesonPromise(
                                                        function(t, r) {
                                                            Promise[e](
                                                                n.map(function(
                                                                    e,
                                                                ) {
                                                                    return e.p;
                                                                }),
                                                            ).then(t, r);
                                                        },
                                                    );
                                                };
                                            }),
                                            (Typeson.Undefined = Undefined),
                                            (Typeson.Promise = TypesonPromise),
                                            (Typeson.isThenable = isThenable),
                                            (Typeson.toStringTag = toStringTag),
                                            (Typeson.hasConstructorOf = hasConstructorOf),
                                            (Typeson.isObject = isObject),
                                            (Typeson.isPlainObject = isPlainObject),
                                            (Typeson.isUserObject = isUserObject),
                                            (Typeson.escapeKeyPathComponent = escapeKeyPathComponent),
                                            (Typeson.unescapeKeyPathComponent = unescapeKeyPathComponent),
                                            (Typeson.getByKeyPath = getByKeyPath),
                                            (Typeson.getJSONType = function(e) {
                                                return null === e
                                                    ? "null"
                                                    : isArray(e)
                                                    ? "array"
                                                    : void 0 === e
                                                    ? "undefined"
                                                    : _typeof(e);
                                            }),
                                            (Typeson.JSON_TYPES = [
                                                "null",
                                                "boolean",
                                                "number",
                                                "string",
                                                "array",
                                                "object",
                                            ]),
                                            (module.exports = Typeson);
                                    },
                                    {},
                                ],
                                48: [
                                    function(_dereq_, module, exports) {
                                        "use strict";

                                        var _typeof =
                                            typeof Symbol === "function" &&
                                            typeof Symbol.iterator === "symbol"
                                                ? function(obj) {
                                                      return typeof obj;
                                                  }
                                                : function(obj) {
                                                      return obj &&
                                                          typeof Symbol ===
                                                              "function" &&
                                                          obj.constructor ===
                                                              Symbol &&
                                                          obj !==
                                                              Symbol.prototype
                                                          ? "symbol"
                                                          : typeof obj;
                                                  };

                                        function _(message, opts) {
                                            return (
                                                (opts && opts.context
                                                    ? opts.context
                                                    : "Value") +
                                                " " +
                                                message +
                                                "."
                                            );
                                        }

                                        function type(V) {
                                            if (V === null) {
                                                return "Null";
                                            }
                                            switch (
                                                typeof V === "undefined"
                                                    ? "undefined"
                                                    : _typeof(V)
                                            ) {
                                                case "undefined":
                                                    return "Undefined";
                                                case "boolean":
                                                    return "Boolean";
                                                case "number":
                                                    return "Number";
                                                case "string":
                                                    return "String";
                                                case "symbol":
                                                    return "Symbol";
                                                case "object":
                                                // Falls through
                                                case "function":
                                                // Falls through
                                                default:
                                                    // Per ES spec, typeof returns an implemention-defined value that is not any of the existing ones for
                                                    // uncallable non-standard exotic objects. Yet Type() which the Web IDL spec depends on returns Object for
                                                    // such cases. So treat the default case as an object.
                                                    return "Object";
                                            }
                                        }

                                        // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
                                        function evenRound(x) {
                                            // There are four cases for numbers with fractional part being .5:
                                            //
                                            // case |     x     | floor(x) | round(x) | expected | x <> 0 | x % 1 | x & 1 |   example
                                            //   1  |  2n + 0.5 |  2n      |  2n + 1  |  2n      |   >    |  0.5  |   0   |  0.5 ->  0
                                            //   2  |  2n + 1.5 |  2n + 1  |  2n + 2  |  2n + 2  |   >    |  0.5  |   1   |  1.5 ->  2
                                            //   3  | -2n - 0.5 | -2n - 1  | -2n      | -2n      |   <    | -0.5  |   0   | -0.5 ->  0
                                            //   4  | -2n - 1.5 | -2n - 2  | -2n - 1  | -2n - 2  |   <    | -0.5  |   1   | -1.5 -> -2
                                            // (where n is a non-negative integer)
                                            //
                                            // Branch here for cases 1 and 4
                                            if (
                                                (x > 0 &&
                                                    x % 1 === +0.5 &&
                                                    (x & 1) === 0) ||
                                                (x < 0 &&
                                                    x % 1 === -0.5 &&
                                                    (x & 1) === 1)
                                            ) {
                                                return censorNegativeZero(
                                                    Math.floor(x),
                                                );
                                            }

                                            return censorNegativeZero(
                                                Math.round(x),
                                            );
                                        }

                                        function integerPart(n) {
                                            return censorNegativeZero(
                                                Math.trunc(n),
                                            );
                                        }

                                        function sign(x) {
                                            return x < 0 ? -1 : 1;
                                        }

                                        function modulo(x, y) {
                                            // https://tc39.github.io/ecma262/#eqn-modulo
                                            // Note that http://stackoverflow.com/a/4467559/3191 does NOT work for large modulos
                                            var signMightNotMatch = x % y;
                                            if (
                                                sign(y) !==
                                                sign(signMightNotMatch)
                                            ) {
                                                return signMightNotMatch + y;
                                            }
                                            return signMightNotMatch;
                                        }

                                        function censorNegativeZero(x) {
                                            return x === 0 ? 0 : x;
                                        }

                                        function createIntegerConversion(
                                            bitLength,
                                            typeOpts,
                                        ) {
                                            var isSigned = !typeOpts.unsigned;

                                            var lowerBound = void 0;
                                            var upperBound = void 0;
                                            if (bitLength === 64) {
                                                upperBound =
                                                    Math.pow(2, 53) - 1;
                                                lowerBound = !isSigned
                                                    ? 0
                                                    : -Math.pow(2, 53) + 1;
                                            } else if (!isSigned) {
                                                lowerBound = 0;
                                                upperBound =
                                                    Math.pow(2, bitLength) - 1;
                                            } else {
                                                lowerBound = -Math.pow(
                                                    2,
                                                    bitLength - 1,
                                                );
                                                upperBound =
                                                    Math.pow(2, bitLength - 1) -
                                                    1;
                                            }

                                            var twoToTheBitLength = Math.pow(
                                                2,
                                                bitLength,
                                            );
                                            var twoToOneLessThanTheBitLength = Math.pow(
                                                2,
                                                bitLength - 1,
                                            );

                                            return function(V, opts) {
                                                if (opts === undefined) {
                                                    opts = {};
                                                }

                                                var x = +V;
                                                x = censorNegativeZero(x); // Spec discussion ongoing: https://github.com/heycam/webidl/issues/306

                                                if (opts.enforceRange) {
                                                    if (!Number.isFinite(x)) {
                                                        throw new TypeError(
                                                            _(
                                                                "is not a finite number",
                                                                opts,
                                                            ),
                                                        );
                                                    }

                                                    x = integerPart(x);

                                                    if (
                                                        x < lowerBound ||
                                                        x > upperBound
                                                    ) {
                                                        throw new TypeError(
                                                            _(
                                                                "is outside the accepted range of " +
                                                                    lowerBound +
                                                                    " to " +
                                                                    upperBound +
                                                                    ", inclusive",
                                                                opts,
                                                            ),
                                                        );
                                                    }

                                                    return x;
                                                }

                                                if (
                                                    !Number.isNaN(x) &&
                                                    opts.clamp
                                                ) {
                                                    x = Math.min(
                                                        Math.max(x, lowerBound),
                                                        upperBound,
                                                    );
                                                    x = evenRound(x);
                                                    return x;
                                                }

                                                if (
                                                    !Number.isFinite(x) ||
                                                    x === 0
                                                ) {
                                                    return 0;
                                                }
                                                x = integerPart(x);

                                                // Math.pow(2, 64) is not accurately representable in JavaScript, so try to avoid these per-spec operations if
                                                // possible. Hopefully it's an optimization for the non-64-bitLength cases too.
                                                if (
                                                    x >= lowerBound &&
                                                    x <= upperBound
                                                ) {
                                                    return x;
                                                }

                                                // These will not work great for bitLength of 64, but oh well. See the README for more details.
                                                x = modulo(
                                                    x,
                                                    twoToTheBitLength,
                                                );
                                                if (
                                                    isSigned &&
                                                    x >=
                                                        twoToOneLessThanTheBitLength
                                                ) {
                                                    return (
                                                        x - twoToTheBitLength
                                                    );
                                                }
                                                return x;
                                            };
                                        }

                                        exports.any = function(V) {
                                            return V;
                                        };

                                        exports.void = function() {
                                            return undefined;
                                        };

                                        exports.boolean = function(val) {
                                            return !!val;
                                        };

                                        exports.byte = createIntegerConversion(
                                            8,
                                            { unsigned: false },
                                        );
                                        exports.octet = createIntegerConversion(
                                            8,
                                            { unsigned: true },
                                        );

                                        exports.short = createIntegerConversion(
                                            16,
                                            { unsigned: false },
                                        );
                                        exports[
                                            "unsigned short"
                                        ] = createIntegerConversion(16, {
                                            unsigned: true,
                                        });

                                        exports.long = createIntegerConversion(
                                            32,
                                            { unsigned: false },
                                        );
                                        exports[
                                            "unsigned long"
                                        ] = createIntegerConversion(32, {
                                            unsigned: true,
                                        });

                                        exports[
                                            "long long"
                                        ] = createIntegerConversion(64, {
                                            unsigned: false,
                                        });
                                        exports[
                                            "unsigned long long"
                                        ] = createIntegerConversion(64, {
                                            unsigned: true,
                                        });

                                        exports.double = function(V, opts) {
                                            var x = +V;

                                            if (!Number.isFinite(x)) {
                                                throw new TypeError(
                                                    _(
                                                        "is not a finite floating-point value",
                                                        opts,
                                                    ),
                                                );
                                            }

                                            return x;
                                        };

                                        exports[
                                            "unrestricted double"
                                        ] = function(V) {
                                            var x = +V;

                                            return x;
                                        };

                                        exports.float = function(V, opts) {
                                            var x = +V;

                                            if (!Number.isFinite(x)) {
                                                throw new TypeError(
                                                    _(
                                                        "is not a finite floating-point value",
                                                        opts,
                                                    ),
                                                );
                                            }

                                            if (Object.is(x, -0)) {
                                                return x;
                                            }

                                            var y = Math.fround(x);

                                            if (!Number.isFinite(y)) {
                                                throw new TypeError(
                                                    _(
                                                        "is outside the range of a single-precision floating-point value",
                                                        opts,
                                                    ),
                                                );
                                            }

                                            return y;
                                        };

                                        exports[
                                            "unrestricted float"
                                        ] = function(V) {
                                            var x = +V;

                                            if (isNaN(x)) {
                                                return x;
                                            }

                                            if (Object.is(x, -0)) {
                                                return x;
                                            }

                                            return Math.fround(x);
                                        };

                                        exports.DOMString = function(V, opts) {
                                            if (opts === undefined) {
                                                opts = {};
                                            }

                                            if (
                                                opts.treatNullAsEmptyString &&
                                                V === null
                                            ) {
                                                return "";
                                            }

                                            if (
                                                (typeof V === "undefined"
                                                    ? "undefined"
                                                    : _typeof(V)) === "symbol"
                                            ) {
                                                throw new TypeError(
                                                    _(
                                                        "is a symbol, which cannot be converted to a string",
                                                        opts,
                                                    ),
                                                );
                                            }

                                            return String(V);
                                        };

                                        exports.ByteString = function(V, opts) {
                                            var x = exports.DOMString(V, opts);
                                            var c = void 0;
                                            for (
                                                var i = 0;
                                                (c = x.codePointAt(i)) !==
                                                undefined;
                                                ++i
                                            ) {
                                                if (c > 255) {
                                                    throw new TypeError(
                                                        _(
                                                            "is not a valid ByteString",
                                                            opts,
                                                        ),
                                                    );
                                                }
                                            }

                                            return x;
                                        };

                                        exports.USVString = function(V, opts) {
                                            var S = exports.DOMString(V, opts);
                                            var n = S.length;
                                            var U = [];
                                            for (var i = 0; i < n; ++i) {
                                                var c = S.charCodeAt(i);
                                                if (c < 0xd800 || c > 0xdfff) {
                                                    U.push(
                                                        String.fromCodePoint(c),
                                                    );
                                                } else if (
                                                    0xdc00 <= c &&
                                                    c <= 0xdfff
                                                ) {
                                                    U.push(
                                                        String.fromCodePoint(
                                                            0xfffd,
                                                        ),
                                                    );
                                                } else if (i === n - 1) {
                                                    U.push(
                                                        String.fromCodePoint(
                                                            0xfffd,
                                                        ),
                                                    );
                                                } else {
                                                    var d = S.charCodeAt(i + 1);
                                                    if (
                                                        0xdc00 <= d &&
                                                        d <= 0xdfff
                                                    ) {
                                                        var a = c & 0x3ff;
                                                        var b = d & 0x3ff;
                                                        U.push(
                                                            String.fromCodePoint(
                                                                (2 << 15) +
                                                                    (2 << 9) *
                                                                        a +
                                                                    b,
                                                            ),
                                                        );
                                                        ++i;
                                                    } else {
                                                        U.push(
                                                            String.fromCodePoint(
                                                                0xfffd,
                                                            ),
                                                        );
                                                    }
                                                }
                                            }

                                            return U.join("");
                                        };

                                        exports.object = function(V, opts) {
                                            if (type(V) !== "Object") {
                                                throw new TypeError(
                                                    _("is not an object", opts),
                                                );
                                            }

                                            return V;
                                        };

                                        // Not exported, but used in Function and VoidFunction.

                                        // Neither Function nor VoidFunction is defined with [TreatNonObjectAsNull], so
                                        // handling for that is omitted.
                                        function convertCallbackFunction(
                                            V,
                                            opts,
                                        ) {
                                            if (typeof V !== "function") {
                                                throw new TypeError(
                                                    _(
                                                        "is not a function",
                                                        opts,
                                                    ),
                                                );
                                            }
                                            return V;
                                        }

                                        [
                                            Error,
                                            ArrayBuffer, // The IsDetachedBuffer abstract operation is not exposed in JS
                                            DataView,
                                            Int8Array,
                                            Int16Array,
                                            Int32Array,
                                            Uint8Array,
                                            Uint16Array,
                                            Uint32Array,
                                            Uint8ClampedArray,
                                            Float32Array,
                                            Float64Array,
                                        ].forEach(function(func) {
                                            var name = func.name;
                                            var article = /^[AEIOU]/.test(name)
                                                ? "an"
                                                : "a";
                                            exports[name] = function(V, opts) {
                                                if (!(V instanceof func)) {
                                                    throw new TypeError(
                                                        _(
                                                            "is not " +
                                                                article +
                                                                " " +
                                                                name +
                                                                " object",
                                                            opts,
                                                        ),
                                                    );
                                                }

                                                return V;
                                            };
                                        });

                                        // Common definitions

                                        exports.ArrayBufferView = function(
                                            V,
                                            opts,
                                        ) {
                                            if (!ArrayBuffer.isView(V)) {
                                                throw new TypeError(
                                                    _(
                                                        "is not a view on an ArrayBuffer object",
                                                        opts,
                                                    ),
                                                );
                                            }

                                            return V;
                                        };

                                        exports.BufferSource = function(
                                            V,
                                            opts,
                                        ) {
                                            if (
                                                !(
                                                    ArrayBuffer.isView(V) ||
                                                    V instanceof ArrayBuffer
                                                )
                                            ) {
                                                throw new TypeError(
                                                    _(
                                                        "is not an ArrayBuffer object or a view on one",
                                                        opts,
                                                    ),
                                                );
                                            }

                                            return V;
                                        };

                                        exports.DOMTimeStamp =
                                            exports["unsigned long long"];

                                        exports.Function = convertCallbackFunction;

                                        exports.VoidFunction = convertCallbackFunction;
                                    },
                                    {},
                                ],
                            },
                            {},
                            [1],
                        )(1);
                    });
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {},
                    require("buffer").Buffer,
                ));
            },
            { buffer: 35 },
        ],
    },
    {},
    [33],
);
